# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azext_datafactory.action import (
    AddIdentity,
    AddFactoryVstsConfiguration,
    AddFactoryGitHubConfiguration,
    AddTypePropertiesScriptActions,
    AddFolder,
    AddDatasetBZip2Compression,
    AddDatasetGZipCompression,
    AddDatasetDeflateCompression,
    AddDatasetZipDeflateCompression,
    AddFilters,
    AddOrderBy,
    AddCommandPayload
)


def load_arguments(self, _):

    with self.argument_context('datafactory factory list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')

    with self.argument_context('datafactory factory show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('if_none_match', help='ETag of the factory entity. Should only be specified for get. If the ETag mat'
                   'ches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory factory create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('if_match', help='ETag of the factory entity. Should only be specified for update, for which it shou'
                   'ld match existing entity or can be * for unconditional update.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), help='The resource location.')
        c.argument('tags', tags_type, help='The resource tags.')
        c.argument('identity', action=AddIdentity, nargs='+', help='Managed service identity of the factory.')
        c.argument('factory_vsts_configuration', action=AddFactoryVstsConfiguration, nargs='+', help='Factory\'s VSTS r'
                   'epo information.', arg_group='RepoConfiguration')
        c.argument('factory_git_hub_configuration', action=AddFactoryGitHubConfiguration, nargs='+', help='Factory\'s G'
                   'itHub repo information.', arg_group='RepoConfiguration')

    with self.argument_context('datafactory factory update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('tags', tags_type, help='The resource tags.')
        c.argument('identity', action=AddIdentity, nargs='+', help='Managed service identity of the factory.')

    with self.argument_context('datafactory factory delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory factory configure-factory-repo') as c:
        c.argument('location_id', help='The location identifier.')
        c.argument('factory_resource_id', help='The factory resource id.')
        c.argument('factory_vsts_configuration', action=AddFactoryVstsConfiguration, nargs='+', help='Factory\'s VSTS r'
                   'epo information.', arg_group='RepoConfiguration')
        c.argument('factory_git_hub_configuration', action=AddFactoryGitHubConfiguration, nargs='+', help='Factory\'s G'
                   'itHub repo information.', arg_group='RepoConfiguration')

    with self.argument_context('datafactory factory get-data-plane-access') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('permissions', help='The string with permissions for Data Plane access. Currently only \'r\' is supp'
                   'orted which grants read only access.')
        c.argument('access_resource_path', help='The resource path to get access relative to factory. Currently only em'
                   'pty string is supported which corresponds to the factory resource.')
        c.argument('profile_name', help='The name of the profile. Currently only the default is supported. The default '
                   'value is DefaultProfile.')
        c.argument('start_time', help='Start time for the token. If not specified the current time will be used.')
        c.argument('expire_time', help='Expiration time for the token. Maximum duration for the token is eight hours an'
                   'd by default the token will expire in eight hours.')

    with self.argument_context('datafactory factory get-git-hub-access-token') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('git_hub_access_code', help='GitHub access code.')
        c.argument('git_hub_client_id', help='GitHub application client ID.')
        c.argument('git_hub_access_token_base_url', help='GitHub access token base URL.')

    with self.argument_context('datafactory exposure-control get-feature-value') as c:
        c.argument('location_id', help='The location identifier.')
        c.argument('feature_name', help='The feature name.')
        c.argument('feature_type', help='The feature type.')

    with self.argument_context('datafactory exposure-control get-feature-value-by-factory') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('feature_name', help='The feature name.')
        c.argument('feature_type', help='The feature type.')

    with self.argument_context('datafactory integration-runtime list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory integration-runtime show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('if_none_match', help='ETag of the integration runtime entity. Should only be specified for get. If '
                   'the ETag matches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory integration-runtime managed create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('if_match', help='ETag of the integration runtime entity. Should only be specified for update, for w'
                   'hich it should match existing entity or can be * for unconditional update.')
        c.argument('description', help='Integration runtime description.')
        c.argument('type_properties_compute_properties', arg_type=CLIArgumentType(options_list=['--type-properties-comp'
                   'ute-properties'], help='The compute resource for managed integration runtime.'))
        c.argument('type_properties_ssis_properties', arg_type=CLIArgumentType(options_list=['--type-properties-ssis-pr'
                   'operties'], help='SSIS properties for managed integration runtime.'))

    with self.argument_context('datafactory integration-runtime self-hosted create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('if_match', help='ETag of the integration runtime entity. Should only be specified for update, for w'
                   'hich it should match existing entity or can be * for unconditional update.')
        c.argument('description', help='Integration runtime description.')
        c.argument('type_properties_linked_info', arg_type=CLIArgumentType(options_list=['--type-properties-linked-info'
                   ''], help='The base definition of a linked integration runtime.'))

    with self.argument_context('datafactory integration-runtime update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('auto_update', arg_type=get_enum_type(['On', 'Off']), help='Enables or disables the auto-update feat'
                   'ure of the self-hosted integration runtime. See https://go.microsoft.com/fwlink/?linkid=854189.')
        c.argument('update_delay_offset', help='The time offset (in hours) in the day, e.g., PT03H is 3 hours. The inte'
                   'gration runtime auto update will happen on that time.')

    with self.argument_context('datafactory integration-runtime delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime create-linked-integration-runtime') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('name', help='The name of the linked integration runtime.')
        c.argument('subscription_id',
                   help='The ID of the subscription that the linked integration runtime belongs to.')
        c.argument('data_factory_name', help='The name of the data factory that the linked integration runtime belongs '
                   'to.')
        c.argument('data_factory_location', help='The location of the data factory that the linked integration runtime '
                   'belongs to.')

    with self.argument_context('datafactory integration-runtime get-connection-info') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime get-monitoring-data') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime get-status') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime list-auth-key') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime regenerate-auth-key') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('key_name', arg_type=get_enum_type(['authKey1', 'authKey2']), help='The name of the authentication k'
                   'ey to regenerate.')

    with self.argument_context('datafactory integration-runtime remove-link') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('linked_factory_name', help='The data factory name for linked integration runtime.')

    with self.argument_context('datafactory integration-runtime start') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime stop') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime sync-credentials') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime upgrade') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime-object-metadata get') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('metadata_path', help='Metadata path.')

    with self.argument_context('datafactory integration-runtime-object-metadata refresh') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')

    with self.argument_context('datafactory integration-runtime-node show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('node_name', help='The integration runtime node name.')

    with self.argument_context('datafactory integration-runtime-node update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('node_name', help='The integration runtime node name.')
        c.argument('concurrent_jobs_limit', help='The number of concurrent jobs permitted to run on the integration run'
                   'time node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.')

    with self.argument_context('datafactory integration-runtime-node delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('node_name', help='The integration runtime node name.')

    with self.argument_context('datafactory integration-runtime-node get-ip-address') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('integration_runtime_name', help='The integration runtime name.')
        c.argument('node_name', help='The integration runtime node name.')

    with self.argument_context('datafactory linked-service list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory linked-service show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_none_match', help='ETag of the linked service entity. Should only be specified for get. If the E'
                   'Tag matches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory linked-service amazon-m-w-s create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)'))
        c.argument('type_properties_marketplace_id', arg_type=CLIArgumentType(options_list=['--type-properties-marketpl'
                   'ace-id'], help='The Amazon Marketplace ID you want to retrieve data from. To retrieve data from mul'
                   'tiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)'))
        c.argument('type_properties_seller_id', arg_type=CLIArgumentType(options_list=['--type-properties-seller-id'],
                   help='The Amazon seller ID.'))
        c.argument('type_properties_mws_auth_token', arg_type=CLIArgumentType(options_list=['--type-properties-mws-auth'
                   '-token'], help='The Amazon MWS authentication token.'))
        c.argument('type_properties_access_key_id', arg_type=CLIArgumentType(options_list=['--type-properties-access-ke'
                   'y-id'], help='The access key id used to access data.'))
        c.argument('type_properties_secret_key',
                   arg_type=CLIArgumentType(options_list=['--type-properties-secret-key'], help='The secret key used to'
                   ' access data.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service amazon-m-w-s update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)'))
        c.argument('type_properties_marketplace_id', arg_type=CLIArgumentType(options_list=['--type-properties-marketpl'
                   'ace-id'], help='The Amazon Marketplace ID you want to retrieve data from. To retrieve data from mul'
                   'tiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)'))
        c.argument('type_properties_seller_id', arg_type=CLIArgumentType(options_list=['--type-properties-seller-id'],
                   help='The Amazon seller ID.'))
        c.argument('type_properties_mws_auth_token', arg_type=CLIArgumentType(options_list=['--type-properties-mws-auth'
                   '-token'], help='The Amazon MWS authentication token.'))
        c.argument('type_properties_access_key_id', arg_type=CLIArgumentType(options_list=['--type-properties-access-ke'
                   'y-id'], help='The access key id used to access data.'))
        c.argument('type_properties_secret_key',
                   arg_type=CLIArgumentType(options_list=['--type-properties-secret-key'], help='The secret key used to'
                   ' access data.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service amazon-redshift create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'The name of the Amazon Redshift server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username of the Amazon Redshift source. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password of the Amazon Redshift source.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The database name of the Amazon Redshift source. Type: string (or Expression with resultType s'
                   'tring).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the Amazon Redshift server uses to listen for client connections. The default '
                   'value is 5439. Type: integer (or Expression with resultType integer).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service amazon-redshift update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'The name of the Amazon Redshift server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username of the Amazon Redshift source. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password of the Amazon Redshift source.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The database name of the Amazon Redshift source. Type: string (or Expression with resultType s'
                   'tring).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the Amazon Redshift server uses to listen for client connections. The default '
                   'value is 5439. Type: integer (or Expression with resultType integer).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service amazon-s3 create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_access_key_id', arg_type=CLIArgumentType(options_list=['--type-properties-access-ke'
                   'y-id'], help='The access key identifier of the Amazon S3 Identity and Access Management (IAM) user.'
                   ' Type: string (or Expression with resultType string).'))
        c.argument('type_properties_secret_access_key', arg_type=CLIArgumentType(options_list=['--type-properties-secre'
                   't-access-key'], help='The secret access key of the Amazon S3 Identity and Access Management (IAM) u'
                   'ser.'))
        c.argument('type_properties_service_url', arg_type=CLIArgumentType(options_list=['--type-properties-service-url'
                   ''], help='This value specifies the endpoint to access with the S3 Connector. This is an optional pr'
                   'operty; change it only if you want to try a different service endpoint or want to switch between ht'
                   'tps and http. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service amazon-s3 update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_access_key_id', arg_type=CLIArgumentType(options_list=['--type-properties-access-ke'
                   'y-id'], help='The access key identifier of the Amazon S3 Identity and Access Management (IAM) user.'
                   ' Type: string (or Expression with resultType string).'))
        c.argument('type_properties_secret_access_key', arg_type=CLIArgumentType(options_list=['--type-properties-secre'
                   't-access-key'], help='The secret access key of the Amazon S3 Identity and Access Management (IAM) u'
                   'ser.'))
        c.argument('type_properties_service_url', arg_type=CLIArgumentType(options_list=['--type-properties-service-url'
                   ''], help='This value specifies the endpoint to access with the S3 Connector. This is an optional pr'
                   'operty; change it only if you want to try a different service endpoint or want to switch between ht'
                   'tps and http. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-batch create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_account_name', arg_type=CLIArgumentType(options_list=['--type-properties-account-na'
                   'me'], help='The Azure Batch account name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_access_key',
                   arg_type=CLIArgumentType(options_list=['--type-properties-access-key'], help='The Azure Batch accoun'
                   't access key.'))
        c.argument('type_properties_batch_uri', arg_type=CLIArgumentType(options_list=['--type-properties-batch-uri'],
                   help='The Azure Batch URI. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_pool_name', arg_type=CLIArgumentType(options_list=['--type-properties-pool-name'],
                   help='The Azure Batch pool name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-properties-lin'
                   'ked-service-name'], help='The Azure Storage linked service reference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-batch update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_account_name', arg_type=CLIArgumentType(options_list=['--type-properties-account-na'
                   'me'], help='The Azure Batch account name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_access_key',
                   arg_type=CLIArgumentType(options_list=['--type-properties-access-key'], help='The Azure Batch accoun'
                   't access key.'))
        c.argument('type_properties_batch_uri', arg_type=CLIArgumentType(options_list=['--type-properties-batch-uri'],
                   help='The Azure Batch URI. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_pool_name', arg_type=CLIArgumentType(options_list=['--type-properties-pool-name'],
                   help='The Azure Batch pool name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-properties-lin'
                   'ked-service-name'], help='The Azure Storage linked service reference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-blob-f-s create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='Endpoi'
                   'nt for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression wit'
                   'h resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the application used to authenticate against the Azure Data L'
                   'ake Storage Gen2 account. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The Key of the application used to authenticate against the Azure Dat'
                   'a Lake Storage Gen2 account.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-blob-f-s update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='Endpoi'
                   'nt for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression wit'
                   'h resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the application used to authenticate against the Azure Data L'
                   'ake Storage Gen2 account. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The Key of the application used to authenticate against the Azure Dat'
                   'a Lake Storage Gen2 account.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-blob-storage create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with sasUri, serviceEndpoint '
                   'property. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The Azure key vault secret reference of accountKey in connection string.'))
        c.argument('type_properties_sas_uri', arg_type=CLIArgumentType(options_list=['--type-properties-sas-uri'],
                   help='SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, se'
                   'rviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_sas_token', arg_type=CLIArgumentType(options_list=['--type-properties-sas-token'],
                   help='The Azure key vault secret reference of sasToken in sas uri.'))
        c.argument('type_properties_service_endpoint', help='Blob service endpoint of the Azure Blob Storage resource. '
                   'It is mutually exclusive with connectionString, sasUri property.')
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Data Warehouse. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Data Warehouse.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Type: string (or Expression'
                   ' with resultType string).')

    with self.argument_context('datafactory linked-service azure-blob-storage update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with sasUri, serviceEndpoint '
                   'property. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The Azure key vault secret reference of accountKey in connection string.'))
        c.argument('type_properties_sas_uri', arg_type=CLIArgumentType(options_list=['--type-properties-sas-uri'],
                   help='SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, se'
                   'rviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_sas_token', arg_type=CLIArgumentType(options_list=['--type-properties-sas-token'],
                   help='The Azure key vault secret reference of sasToken in sas uri.'))
        c.argument('type_properties_service_endpoint', help='Blob service endpoint of the Azure Blob Storage resource. '
                   'It is mutually exclusive with connectionString, sasUri property.')
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Data Warehouse. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Data Warehouse.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Type: string (or Expression'
                   ' with resultType string).')
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-data-explorer create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of Azure Data Explorer (the engine\'s endpoint). URL will be in the format https:'
                   '//:code:`<clusterName>`.:code:`<regionName>`.kusto.windows.net. Type: string (or Expression with re'
                   'sultType string)'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure Data'
                   ' Explorer. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'],
                   help='The key of the service principal used to authenticate against Kusto.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='Database name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))

    with self.argument_context('datafactory linked-service azure-data-explorer update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of Azure Data Explorer (the engine\'s endpoint). URL will be in the format https:'
                   '//:code:`<clusterName>`.:code:`<regionName>`.kusto.windows.net. Type: string (or Expression with re'
                   'sultType string)'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure Data'
                   ' Explorer. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'],
                   help='The key of the service principal used to authenticate against Kusto.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='Database name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-data-lake-analytics create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_account_name', arg_type=CLIArgumentType(options_list=['--type-properties-account-na'
                   'me'], help='The Azure Data Lake Analytics account name. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the application used to authenticate against the Azure Data L'
                   'ake Analytics account. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The Key of the application used to authenticate against the Azure Dat'
                   'a Lake Analytics account.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-subscri'
                   'ption-id'], help='Data Lake Analytics account subscription ID (if different from Data Factory accou'
                   'nt). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_resource_group_name', arg_type=CLIArgumentType(options_list=['--type-properties-res'
                   'ource-group-name'], help='Data Lake Analytics account resource group name (if different from Data F'
                   'actory account). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_data_lake_analytics_uri', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-data-lake-analytics-uri'], help='Azure Data Lake Analytics URI Type: string (or Expression with re'
                   'sultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-data-lake-analytics update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_account_name', arg_type=CLIArgumentType(options_list=['--type-properties-account-na'
                   'me'], help='The Azure Data Lake Analytics account name. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the application used to authenticate against the Azure Data L'
                   'ake Analytics account. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The Key of the application used to authenticate against the Azure Dat'
                   'a Lake Analytics account.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-subscri'
                   'ption-id'], help='Data Lake Analytics account subscription ID (if different from Data Factory accou'
                   'nt). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_resource_group_name', arg_type=CLIArgumentType(options_list=['--type-properties-res'
                   'ource-group-name'], help='Data Lake Analytics account resource group name (if different from Data F'
                   'actory account). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_data_lake_analytics_uri', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-data-lake-analytics-uri'], help='Azure Data Lake Analytics URI Type: string (or Expression with re'
                   'sultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-data-lake-store create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_data_lake_store_uri', arg_type=CLIArgumentType(options_list=['--type-properties-dat'
                   'a-lake-store-uri'], help='Data Lake Store service URI. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the application used to authenticate against the Azure Data L'
                   'ake Store account. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The Key of the application used to authenticate against the Azure Dat'
                   'a Lake Store account.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_account_name', arg_type=CLIArgumentType(options_list=['--type-properties-account-na'
                   'me'], help='Data Lake Store account name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-subscri'
                   'ption-id'], help='Data Lake Store account subscription ID (if different from Data Factory account).'
                   ' Type: string (or Expression with resultType string).'))
        c.argument('type_properties_resource_group_name', arg_type=CLIArgumentType(options_list=['--type-properties-res'
                   'ource-group-name'], help='Data Lake Store account resource group name (if different from Data Facto'
                   'ry account). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-data-lake-store update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_data_lake_store_uri', arg_type=CLIArgumentType(options_list=['--type-properties-dat'
                   'a-lake-store-uri'], help='Data Lake Store service URI. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the application used to authenticate against the Azure Data L'
                   'ake Store account. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The Key of the application used to authenticate against the Azure Dat'
                   'a Lake Store account.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_account_name', arg_type=CLIArgumentType(options_list=['--type-properties-account-na'
                   'me'], help='Data Lake Store account name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-subscri'
                   'ption-id'], help='Data Lake Store account subscription ID (if different from Data Factory account).'
                   ' Type: string (or Expression with resultType string).'))
        c.argument('type_properties_resource_group_name', arg_type=CLIArgumentType(options_list=['--type-properties-res'
                   'ource-group-name'], help='Data Lake Store account resource group name (if different from Data Facto'
                   'ry account). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-databricks create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_domain', arg_type=CLIArgumentType(options_list=['--type-properties-domain'], help=
                   ':code:`<REGION>`.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/lat'
                   'est/authentication.html. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_existing_cluster_id', arg_type=CLIArgumentType(options_list=['--type-properties-exi'
                   'sting-cluster-id'], help='The id of an existing interactive cluster that will be used for all runs '
                   'of this activity. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_instance_pool_id', arg_type=CLIArgumentType(options_list=['--type-properties-instan'
                   'ce-pool-id'], help='The id of an existing instance pool that will be used for all runs of this acti'
                   'vity. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_version', arg_type=CLIArgumentType(options_list=['--type-properties-new'
                   '-cluster-version'], help='If not using an existing interactive cluster, this specifies the Spark ve'
                   'rsion of a new job cluster or instance pool nodes created for each run of this activity. Required i'
                   'f instancePoolId is specified. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_num_of_worker', arg_type=CLIArgumentType(options_list=['--type-properti'
                   'es-new-cluster-num-of-worker'], help='If not using an existing interactive cluster, this specifies '
                   'the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, t'
                   'his a string-formatted Int32, like \'1\' means numOfWorker is 1 or \'1:10\' means auto-scale from 1'
                   ' (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fi'
                   'xed number of worker nodes, such as \'2\'. Required if newClusterVersion is specified. Type: string'
                   ' (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_node_type', arg_type=CLIArgumentType(options_list=['--type-properties-n'
                   'ew-cluster-node-type'], help='The node type of the new job cluster. This property is required if ne'
                   'wClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, t'
                   'his property is ignored. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_spark_conf', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'new-cluster-spark-conf'], help='A set of optional, user-specified Spark configuration key-value pai'
                   'rs.'))
        c.argument('type_properties_new_cluster_spark_env_vars', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-new-cluster-spark-env-vars'], help='A set of optional, user-specified Spark environment variabl'
                   'es key-value pairs.'))
        c.argument('type_properties_new_cluster_custom_tags', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-new-cluster-custom-tags'], help='Additional tags for cluster resources. This property is ignored i'
                   'n instance pool configurations.'))
        c.argument('type_properties_new_cluster_driver_node_type', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-new-cluster-driver-node-type'], help='The driver node type for the new job cluster. This prop'
                   'erty is ignored in instance pool configurations. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_new_cluster_init_scripts', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-new-cluster-init-scripts'], help='User-defined initialization scripts for the new cluster. Type: '
                   'array of strings (or Expression with resultType array of strings).'))
        c.argument('type_properties_new_cluster_enable_elastic_disk', arg_type=CLIArgumentType(options_list=['--type-pr'
                   'operties-new-cluster-enable-elastic-disk'], help='Enable the elastic disk on the new cluster. This '
                   'property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks a'
                   're always enabled). Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-databricks update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_domain', arg_type=CLIArgumentType(options_list=['--type-properties-domain'], help=
                   ':code:`<REGION>`.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/lat'
                   'est/authentication.html. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_existing_cluster_id', arg_type=CLIArgumentType(options_list=['--type-properties-exi'
                   'sting-cluster-id'], help='The id of an existing interactive cluster that will be used for all runs '
                   'of this activity. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_instance_pool_id', arg_type=CLIArgumentType(options_list=['--type-properties-instan'
                   'ce-pool-id'], help='The id of an existing instance pool that will be used for all runs of this acti'
                   'vity. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_version', arg_type=CLIArgumentType(options_list=['--type-properties-new'
                   '-cluster-version'], help='If not using an existing interactive cluster, this specifies the Spark ve'
                   'rsion of a new job cluster or instance pool nodes created for each run of this activity. Required i'
                   'f instancePoolId is specified. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_num_of_worker', arg_type=CLIArgumentType(options_list=['--type-properti'
                   'es-new-cluster-num-of-worker'], help='If not using an existing interactive cluster, this specifies '
                   'the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, t'
                   'his a string-formatted Int32, like \'1\' means numOfWorker is 1 or \'1:10\' means auto-scale from 1'
                   ' (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fi'
                   'xed number of worker nodes, such as \'2\'. Required if newClusterVersion is specified. Type: string'
                   ' (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_node_type', arg_type=CLIArgumentType(options_list=['--type-properties-n'
                   'ew-cluster-node-type'], help='The node type of the new job cluster. This property is required if ne'
                   'wClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, t'
                   'his property is ignored. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_new_cluster_spark_conf', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'new-cluster-spark-conf'], help='A set of optional, user-specified Spark configuration key-value pai'
                   'rs.'))
        c.argument('type_properties_new_cluster_spark_env_vars', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-new-cluster-spark-env-vars'], help='A set of optional, user-specified Spark environment variabl'
                   'es key-value pairs.'))
        c.argument('type_properties_new_cluster_custom_tags', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-new-cluster-custom-tags'], help='Additional tags for cluster resources. This property is ignored i'
                   'n instance pool configurations.'))
        c.argument('type_properties_new_cluster_driver_node_type', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-new-cluster-driver-node-type'], help='The driver node type for the new job cluster. This prop'
                   'erty is ignored in instance pool configurations. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_new_cluster_init_scripts', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-new-cluster-init-scripts'], help='User-defined initialization scripts for the new cluster. Type: '
                   'array of strings (or Expression with resultType array of strings).'))
        c.argument('type_properties_new_cluster_enable_elastic_disk', arg_type=CLIArgumentType(options_list=['--type-pr'
                   'operties-new-cluster-enable-elastic-disk'], help='Enable the elastic disk on the new cluster. This '
                   'property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks a'
                   're always enabled). Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-file-storage create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name of the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_id', arg_type=CLIArgumentType(options_list=['--type-properties-user-id'],
                   help='User ID to logon the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-file-storage update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name of the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_id', arg_type=CLIArgumentType(options_list=['--type-properties-user-id'],
                   help='User ID to logon the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-function create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_function_app_url', arg_type=CLIArgumentType(options_list=['--type-properties-functi'
                   'on-app-url'], help='The endpoint of the Azure Function App. URL will be in the format https://:code'
                   ':`<accountName>`.azurewebsites.net.'))
        c.argument('type_properties_function_key', arg_type=CLIArgumentType(options_list=['--type-properties-function-k'
                   'ey'], help='Function or Host key for Azure Function App.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-function update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_function_app_url', arg_type=CLIArgumentType(options_list=['--type-properties-functi'
                   'on-app-url'], help='The endpoint of the Azure Function App. URL will be in the format https://:code'
                   ':`<accountName>`.azurewebsites.net.'))
        c.argument('type_properties_function_key', arg_type=CLIArgumentType(options_list=['--type-properties-function-k'
                   'ey'], help='Function or Host key for Azure Function App.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-key-vault create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_base_url', arg_type=CLIArgumentType(options_list=['--type-properties-base-url'],
                   help='The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expre'
                   'ssion with resultType string).'))

    with self.argument_context('datafactory linked-service azure-key-vault update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_base_url', arg_type=CLIArgumentType(options_list=['--type-properties-base-url'],
                   help='The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expre'
                   'ssion with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-m-l create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_ml_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-ml-endpoint'
                   ''], help='The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (o'
                   'r Expression with resultType string).'))
        c.argument('type_properties_api_key', arg_type=CLIArgumentType(options_list=['--type-properties-api-key'],
                   help='The API key for accessing the Azure ML model endpoint.'))
        c.argument('type_properties_update_resource_endpoint', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-update-resource-endpoint'], help='The Update Resource REST URL for an Azure ML Studio Web Service'
                   ' endpoint. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against the ARM-ba'
                   'sed updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resu'
                   'ltType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against the ARM'
                   '-based updateResourceEndpoint of an Azure ML Studio web service.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-m-l update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_ml_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-ml-endpoint'
                   ''], help='The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (o'
                   'r Expression with resultType string).'))
        c.argument('type_properties_api_key', arg_type=CLIArgumentType(options_list=['--type-properties-api-key'],
                   help='The API key for accessing the Azure ML model endpoint.'))
        c.argument('type_properties_update_resource_endpoint', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-update-resource-endpoint'], help='The Update Resource REST URL for an Azure ML Studio Web Service'
                   ' endpoint. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against the ARM-ba'
                   'sed updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resu'
                   'ltType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against the ARM'
                   '-based updateResourceEndpoint of an Azure ML Studio web service.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-m-l-service create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-subscri'
                   'ption-id'], help='Azure ML Service workspace subscription ID. Type: string (or Expression with resu'
                   'ltType string).'))
        c.argument('type_properties_resource_group_name', arg_type=CLIArgumentType(options_list=['--type-properties-res'
                   'ource-group-name'], help='Azure ML Service workspace resource group name. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_ml_workspace_name', arg_type=CLIArgumentType(options_list=['--type-properties-ml-wo'
                   'rkspace-name'], help='Azure ML Service workspace name. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against the endpoi'
                   'nt of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against the end'
                   'point of a published Azure ML Service pipeline.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-m-l-service update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-subscri'
                   'ption-id'], help='Azure ML Service workspace subscription ID. Type: string (or Expression with resu'
                   'ltType string).'))
        c.argument('type_properties_resource_group_name', arg_type=CLIArgumentType(options_list=['--type-properties-res'
                   'ource-group-name'], help='Azure ML Service workspace resource group name. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_ml_workspace_name', arg_type=CLIArgumentType(options_list=['--type-properties-ml-wo'
                   'rkspace-name'], help='Azure ML Service workspace name. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against the endpoi'
                   'nt of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against the end'
                   'point of a published Azure ML Service pipeline.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-maria-d-b create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-maria-d-b update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-my-sql create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-my-sql update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-postgre-sql create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-postgre-sql update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-search create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='URL fo'
                   'r Azure Search service. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_key', arg_type=CLIArgumentType(options_list=['--type-properties-key'], help='Admin '
                   'Key for Azure Search service'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-search update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='URL fo'
                   'r Azure Search service. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_key', arg_type=CLIArgumentType(options_list=['--type-properties-key'], help='Admin '
                   'Key for Azure Search service'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-sql-d-w create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Data Warehouse. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Data Warehouse.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-sql-d-w update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Data Warehouse. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Data Warehouse.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-sql-database create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Database.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-sql-database update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Database.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-sql-m-i create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Managed Instance. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Managed Instance.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service azure-sql-m-i update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The ID of the service principal used to authenticate against Azure SQL '
                   'Managed Instance. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key of the service principal used to authenticate against Azure S'
                   'QL Managed Instance.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The name or ID of the tenant to which the service principal belongs. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-storage create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with sasUri property. Type: s'
                   'tring, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The Azure key vault secret reference of accountKey in connection string.'))
        c.argument('type_properties_sas_uri', arg_type=CLIArgumentType(options_list=['--type-properties-sas-uri'],
                   help='SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property'
                   '. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_sas_token', arg_type=CLIArgumentType(options_list=['--type-properties-sas-token'],
                   help='The Azure key vault secret reference of sasToken in sas uri.'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Type: string (or Expression'
                   ' with resultType string).')

    with self.argument_context('datafactory linked-service azure-storage update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with sasUri property. Type: s'
                   'tring, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The Azure key vault secret reference of accountKey in connection string.'))
        c.argument('type_properties_sas_uri', arg_type=CLIArgumentType(options_list=['--type-properties-sas-uri'],
                   help='SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property'
                   '. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_sas_token', arg_type=CLIArgumentType(options_list=['--type-properties-sas-token'],
                   help='The Azure key vault secret reference of sasToken in sas uri.'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Type: string (or Expression'
                   ' with resultType string).')
        c.ignore('properties')

    with self.argument_context('datafactory linked-service azure-table-storage create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with sasUri property. Type: s'
                   'tring, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The Azure key vault secret reference of accountKey in connection string.'))
        c.argument('type_properties_sas_uri', arg_type=CLIArgumentType(options_list=['--type-properties-sas-uri'],
                   help='SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property'
                   '. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_sas_token', arg_type=CLIArgumentType(options_list=['--type-properties-sas-token'],
                   help='The Azure key vault secret reference of sasToken in sas uri.'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Type: string (or Expression'
                   ' with resultType string).')

    with self.argument_context('datafactory linked-service azure-table-storage update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with sasUri property. Type: s'
                   'tring, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The Azure key vault secret reference of accountKey in connection string.'))
        c.argument('type_properties_sas_uri', arg_type=CLIArgumentType(options_list=['--type-properties-sas-uri'],
                   help='SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property'
                   '. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_sas_token', arg_type=CLIArgumentType(options_list=['--type-properties-sas-token'],
                   help='The Azure key vault secret reference of sasToken in sas uri.'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Type: string (or Expression'
                   ' with resultType string).')
        c.ignore('properties')

    with self.argument_context('datafactory linked-service cassandra create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='AuthenticationType to be used for connection. Type: string (or Expression'
                   ' with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port for the connection. Type: integer (or Expression with resultType integer).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service cassandra update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='AuthenticationType to be used for connection. Type: string (or Expression'
                   ' with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port for the connection. Type: integer (or Expression with resultType integer).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service common-data-service-for-apps create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_deployment_type', arg_type=get_enum_type(['Online', 'OnPremisesWithIfd']), help='Th'
                   'e deployment type of the Common Data Service for Apps instance. \'Online\' for Common Data Service '
                   'for Apps Online and \'OnPremisesWithIfd\' for Common Data Service for Apps on-premises with Ifd. Ty'
                   'pe: string (or Expression with resultType string).')
        c.argument('type_properties_host_name', arg_type=CLIArgumentType(options_list=['--type-properties-host-name'],
                   help='The host name of the on-premises Common Data Service for Apps server. The property is required'
                   ' for on-prem and not allowed for online. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port of on-premises Common Data Service for Apps server. The property is required for on-prem and n'
                   'ot allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minim'
                   'um: 0.'))
        c.argument('type_properties_service_uri', arg_type=CLIArgumentType(options_list=['--type-properties-service-uri'
                   ''], help='The URL to the Microsoft Common Data Service for Apps server. The property is required fo'
                   'r on-line and not allowed for on-prem. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_organization_name', arg_type=CLIArgumentType(options_list=['--type-properties-organ'
                   'ization-name'], help='The organization name of the Common Data Service for Apps instance. The prope'
                   'rty is required for on-prem and required for online when there are more than one Common Data Servic'
                   'e for Apps instances associated with the user. Type: string (or Expression with resultType string).'
                   ''))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Office365', 'Ifd', 'AADServicePrinci'
                   'pal']), help='The authentication type to connect to Common Data Service for Apps server. \'Office36'
                   '5\' for online scenario, \'Ifd\' for on-premises with Ifd scenario. \'AADServicePrincipal\' for Ser'
                   'ver-To-Server authentication in online scenario. Type: string (or Expression with resultType string'
                   ').')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='User name to access the Common Data Service for Apps instance. Type: string (or Expression wit'
                   'h resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the Common Data Service for Apps instance.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The client ID of the application in Azure Active Directory used for Ser'
                   'ver-To-Server authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKey',
                   'ServicePrincipalCert']), help='The service principal credential type to use in Server-To-Server aut'
                   'hentication. \'ServicePrincipalKey\' for key/secret, \'ServicePrincipalCert\' for certificate. Type'
                   ': string (or Expression with resultType string).')
        c.argument('type_properties_service_principal_credential', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-service-principal-credential'], help='The credential of the service principal object in Azure'
                   ' Active Directory. If servicePrincipalCredentialType is \'ServicePrincipalKey\', servicePrincipalCr'
                   'edential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is '
                   '\'ServicePrincipalCert\', servicePrincipalCredential can only be AzureKeyVaultSecretReference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service common-data-service-for-apps update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_deployment_type', arg_type=get_enum_type(['Online', 'OnPremisesWithIfd']), help='Th'
                   'e deployment type of the Common Data Service for Apps instance. \'Online\' for Common Data Service '
                   'for Apps Online and \'OnPremisesWithIfd\' for Common Data Service for Apps on-premises with Ifd. Ty'
                   'pe: string (or Expression with resultType string).')
        c.argument('type_properties_host_name', arg_type=CLIArgumentType(options_list=['--type-properties-host-name'],
                   help='The host name of the on-premises Common Data Service for Apps server. The property is required'
                   ' for on-prem and not allowed for online. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port of on-premises Common Data Service for Apps server. The property is required for on-prem and n'
                   'ot allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minim'
                   'um: 0.'))
        c.argument('type_properties_service_uri', arg_type=CLIArgumentType(options_list=['--type-properties-service-uri'
                   ''], help='The URL to the Microsoft Common Data Service for Apps server. The property is required fo'
                   'r on-line and not allowed for on-prem. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_organization_name', arg_type=CLIArgumentType(options_list=['--type-properties-organ'
                   'ization-name'], help='The organization name of the Common Data Service for Apps instance. The prope'
                   'rty is required for on-prem and required for online when there are more than one Common Data Servic'
                   'e for Apps instances associated with the user. Type: string (or Expression with resultType string).'
                   ''))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Office365', 'Ifd', 'AADServicePrinci'
                   'pal']), help='The authentication type to connect to Common Data Service for Apps server. \'Office36'
                   '5\' for online scenario, \'Ifd\' for on-premises with Ifd scenario. \'AADServicePrincipal\' for Ser'
                   'ver-To-Server authentication in online scenario. Type: string (or Expression with resultType string'
                   ').')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='User name to access the Common Data Service for Apps instance. Type: string (or Expression wit'
                   'h resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the Common Data Service for Apps instance.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The client ID of the application in Azure Active Directory used for Ser'
                   'ver-To-Server authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKey',
                   'ServicePrincipalCert']), help='The service principal credential type to use in Server-To-Server aut'
                   'hentication. \'ServicePrincipalKey\' for key/secret, \'ServicePrincipalCert\' for certificate. Type'
                   ': string (or Expression with resultType string).')
        c.argument('type_properties_service_principal_credential', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-service-principal-credential'], help='The credential of the service principal object in Azure'
                   ' Active Directory. If servicePrincipalCredentialType is \'ServicePrincipalKey\', servicePrincipalCr'
                   'edential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is '
                   '\'ServicePrincipalCert\', servicePrincipalCredential can only be AzureKeyVaultSecretReference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service concur create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Application client_id supplied by Concur App Management.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Concur Service.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the username field.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service concur update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Application client_id supplied by Concur App Management.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Concur Service.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the username field.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service cosmos-db create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_account_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-accoun'
                   't-endpoint'], help='The endpoint of the Azure CosmosDB account. Type: string (or Expression with re'
                   'sultType string)'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The name of the database. Type: string (or Expression with resultType string)'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service cosmos-db update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_account_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-accoun'
                   't-endpoint'], help='The endpoint of the Azure CosmosDB account. Type: string (or Expression with re'
                   'sultType string)'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The name of the database. Type: string (or Expression with resultType string)'))
        c.argument('type_properties_account_key', arg_type=CLIArgumentType(options_list=['--type-properties-account-key'
                   ''], help='The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service cosmos-db-mongo-db-api create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The CosmosDB (MongoDB API) connection string. Type: string, SecureString or A'
                   'zureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expr'
                   'ession with resultType string).'))

    with self.argument_context('datafactory linked-service cosmos-db-mongo-db-api update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The CosmosDB (MongoDB API) connection string. Type: string, SecureString or A'
                   'zureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expr'
                   'ession with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service couchbase create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_cred_string', arg_type=CLIArgumentType(options_list=['--type-properties-cred-string'
                   ''], help='The Azure key vault secret reference of credString in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service couchbase update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_cred_string', arg_type=CLIArgumentType(options_list=['--type-properties-cred-string'
                   ''], help='The Azure key vault secret reference of credString in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service custom-data-source create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties', arg_type=CLIArgumentType(options_list=['--type-properties'], help='Custom linked '
                   'service properties.'))

    with self.argument_context('datafactory linked-service custom-data-source update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties', arg_type=CLIArgumentType(options_list=['--type-properties'], help='Custom linked '
                   'service properties.'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service db2 create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with server, database, authen'
                   'ticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureS'
                   'tring or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Server name for connection. It is mutually exclusive with connectionString property. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='Database name for connection. It is mutually exclusive with connectionString property. Type: s'
                   'tring (or Expression with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. It is mutually exclusive with connectionString property. Type: st'
                   'ring (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_package_collection', arg_type=CLIArgumentType(options_list=['--type-properties-pack'
                   'age-collection'], help='Under where packages are created when querying database. It is mutually exc'
                   'lusive with connectionString property. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_certificate_common_name', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-certificate-common-name'], help='Certificate Common Name when TLS is enabled. It is mutually exclu'
                   'sive with connectionString property. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. It is mutually exclusive with connectionStri'
                   'ng property. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory linked-service db2 update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. It is mutually exclusive with server, database, authen'
                   'ticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureS'
                   'tring or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Server name for connection. It is mutually exclusive with connectionString property. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='Database name for connection. It is mutually exclusive with connectionString property. Type: s'
                   'tring (or Expression with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. It is mutually exclusive with connectionString property. Type: st'
                   'ring (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_package_collection', arg_type=CLIArgumentType(options_list=['--type-properties-pack'
                   'age-collection'], help='Under where packages are created when querying database. It is mutually exc'
                   'lusive with connectionString property. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_certificate_common_name', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-certificate-common-name'], help='Certificate Common Name when TLS is enabled. It is mutually exclu'
                   'sive with connectionString property. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. It is mutually exclusive with connectionStri'
                   'ng property. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service drill create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service drill update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service dynamics create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_deployment_type', arg_type=get_enum_type(['Online', 'OnPremisesWithIfd']), help='Th'
                   'e deployment type of the Dynamics instance. \'Online\' for Dynamics Online and \'OnPremisesWithIfd'
                   '\' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).')
        c.argument('type_properties_host_name', arg_type=CLIArgumentType(options_list=['--type-properties-host-name'],
                   help='The host name of the on-premises Dynamics server. The property is required for on-prem and not'
                   ' allowed for online. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port of on-premises Dynamics server. The property is required for on-prem and not allowed for onlin'
                   'e. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_service_uri', arg_type=CLIArgumentType(options_list=['--type-properties-service-uri'
                   ''], help='The URL to the Microsoft Dynamics server. The property is required for on-line and not al'
                   'lowed for on-prem. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_organization_name', arg_type=CLIArgumentType(options_list=['--type-properties-organ'
                   'ization-name'], help='The organization name of the Dynamics instance. The property is required for '
                   'on-prem and required for online when there are more than one Dynamics instances associated with the'
                   ' user. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Office365', 'Ifd', 'AADServicePrinci'
                   'pal']), help='The authentication type to connect to Dynamics server. \'Office365\' for online scena'
                   'rio, \'Ifd\' for on-premises with Ifd scenario, \'AADServicePrincipal\' for Server-To-Server authen'
                   'tication in online scenario. Type: string (or Expression with resultType string).')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='User name to access the Dynamics instance. Type: string (or Expression with resultType string)'
                   '.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the Dynamics instance.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The client ID of the application in Azure Active Directory used for Ser'
                   'ver-To-Server authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKey',
                   'ServicePrincipalCert']), help='The service principal credential type to use in Server-To-Server aut'
                   'hentication. \'ServicePrincipalKey\' for key/secret, \'ServicePrincipalCert\' for certificate. Type'
                   ': string (or Expression with resultType string).')
        c.argument('type_properties_service_principal_credential', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-service-principal-credential'], help='The credential of the service principal object in Azure'
                   ' Active Directory. If servicePrincipalCredentialType is \'ServicePrincipalKey\', servicePrincipalCr'
                   'edential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is '
                   '\'ServicePrincipalCert\', servicePrincipalCredential can only be AzureKeyVaultSecretReference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service dynamics update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_deployment_type', arg_type=get_enum_type(['Online', 'OnPremisesWithIfd']), help='Th'
                   'e deployment type of the Dynamics instance. \'Online\' for Dynamics Online and \'OnPremisesWithIfd'
                   '\' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).')
        c.argument('type_properties_host_name', arg_type=CLIArgumentType(options_list=['--type-properties-host-name'],
                   help='The host name of the on-premises Dynamics server. The property is required for on-prem and not'
                   ' allowed for online. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port of on-premises Dynamics server. The property is required for on-prem and not allowed for onlin'
                   'e. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_service_uri', arg_type=CLIArgumentType(options_list=['--type-properties-service-uri'
                   ''], help='The URL to the Microsoft Dynamics server. The property is required for on-line and not al'
                   'lowed for on-prem. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_organization_name', arg_type=CLIArgumentType(options_list=['--type-properties-organ'
                   'ization-name'], help='The organization name of the Dynamics instance. The property is required for '
                   'on-prem and required for online when there are more than one Dynamics instances associated with the'
                   ' user. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Office365', 'Ifd', 'AADServicePrinci'
                   'pal']), help='The authentication type to connect to Dynamics server. \'Office365\' for online scena'
                   'rio, \'Ifd\' for on-premises with Ifd scenario, \'AADServicePrincipal\' for Server-To-Server authen'
                   'tication in online scenario. Type: string (or Expression with resultType string).')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='User name to access the Dynamics instance. Type: string (or Expression with resultType string)'
                   '.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the Dynamics instance.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The client ID of the application in Azure Active Directory used for Ser'
                   'ver-To-Server authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKey',
                   'ServicePrincipalCert']), help='The service principal credential type to use in Server-To-Server aut'
                   'hentication. \'ServicePrincipalKey\' for key/secret, \'ServicePrincipalCert\' for certificate. Type'
                   ': string (or Expression with resultType string).')
        c.argument('type_properties_service_principal_credential', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-service-principal-credential'], help='The credential of the service principal object in Azure'
                   ' Active Directory. If servicePrincipalCredentialType is \'ServicePrincipalKey\', servicePrincipalCr'
                   'edential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is '
                   '\'ServicePrincipalCert\', servicePrincipalCredential can only be AzureKeyVaultSecretReference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service dynamics-a-x create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The Dy'
                   'namics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='Specify the application\'s client ID. Type: string (or Expression with '
                   'resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='Specify the application\'s key. Mark this field as a SecureString to '
                   'store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (o'
                   'r Expression with resultType string).'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'Specify the tenant information (domain name or tenant ID) under which your application resides. Ret'
                   'rieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expres'
                   'sion with resultType string).'))
        c.argument('type_properties_aad_resource_id', arg_type=CLIArgumentType(options_list=['--type-properties-aad-res'
                   'ource-id'], help='Specify the resource you are requesting authorization. Type: string (or Expressio'
                   'n with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service dynamics-a-x update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The Dy'
                   'namics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='Specify the application\'s client ID. Type: string (or Expression with '
                   'resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='Specify the application\'s key. Mark this field as a SecureString to '
                   'store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (o'
                   'r Expression with resultType string).'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'Specify the tenant information (domain name or tenant ID) under which your application resides. Ret'
                   'rieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expres'
                   'sion with resultType string).'))
        c.argument('type_properties_aad_resource_id', arg_type=CLIArgumentType(options_list=['--type-properties-aad-res'
                   'ource-id'], help='Specify the resource you are requesting authorization. Type: string (or Expressio'
                   'n with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service dynamics-crm create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_deployment_type', arg_type=get_enum_type(['Online', 'OnPremisesWithIfd']), help='Th'
                   'e deployment type of the Dynamics CRM instance. \'Online\' for Dynamics CRM Online and \'OnPremises'
                   'WithIfd\' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string'
                   ').')
        c.argument('type_properties_host_name', arg_type=CLIArgumentType(options_list=['--type-properties-host-name'],
                   help='The host name of the on-premises Dynamics CRM server. The property is required for on-prem and'
                   ' not allowed for online. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for o'
                   'nline. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_service_uri', arg_type=CLIArgumentType(options_list=['--type-properties-service-uri'
                   ''], help='The URL to the Microsoft Dynamics CRM server. The property is required for on-line and no'
                   't allowed for on-prem. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_organization_name', arg_type=CLIArgumentType(options_list=['--type-properties-organ'
                   'ization-name'], help='The organization name of the Dynamics CRM instance. The property is required '
                   'for on-prem and required for online when there are more than one Dynamics CRM instances associated '
                   'with the user. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Office365', 'Ifd', 'AADServicePrinci'
                   'pal']), help='The authentication type to connect to Dynamics CRM server. \'Office365\' for online s'
                   'cenario, \'Ifd\' for on-premises with Ifd scenario, \'AADServicePrincipal\' for Server-To-Server au'
                   'thentication in online scenario. Type: string (or Expression with resultType string).')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='User name to access the Dynamics CRM instance. Type: string (or Expression with resultType str'
                   'ing).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the Dynamics CRM instance.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The client ID of the application in Azure Active Directory used for Ser'
                   'ver-To-Server authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKey',
                   'ServicePrincipalCert']), help='The service principal credential type to use in Server-To-Server aut'
                   'hentication. \'ServicePrincipalKey\' for key/secret, \'ServicePrincipalCert\' for certificate. Type'
                   ': string (or Expression with resultType string).')
        c.argument('type_properties_service_principal_credential', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-service-principal-credential'], help='The credential of the service principal object in Azure'
                   ' Active Directory. If servicePrincipalCredentialType is \'ServicePrincipalKey\', servicePrincipalCr'
                   'edential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is '
                   '\'ServicePrincipalCert\', servicePrincipalCredential can only be AzureKeyVaultSecretReference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service dynamics-crm update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_deployment_type', arg_type=get_enum_type(['Online', 'OnPremisesWithIfd']), help='Th'
                   'e deployment type of the Dynamics CRM instance. \'Online\' for Dynamics CRM Online and \'OnPremises'
                   'WithIfd\' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string'
                   ').')
        c.argument('type_properties_host_name', arg_type=CLIArgumentType(options_list=['--type-properties-host-name'],
                   help='The host name of the on-premises Dynamics CRM server. The property is required for on-prem and'
                   ' not allowed for online. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for o'
                   'nline. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_service_uri', arg_type=CLIArgumentType(options_list=['--type-properties-service-uri'
                   ''], help='The URL to the Microsoft Dynamics CRM server. The property is required for on-line and no'
                   't allowed for on-prem. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_organization_name', arg_type=CLIArgumentType(options_list=['--type-properties-organ'
                   'ization-name'], help='The organization name of the Dynamics CRM instance. The property is required '
                   'for on-prem and required for online when there are more than one Dynamics CRM instances associated '
                   'with the user. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Office365', 'Ifd', 'AADServicePrinci'
                   'pal']), help='The authentication type to connect to Dynamics CRM server. \'Office365\' for online s'
                   'cenario, \'Ifd\' for on-premises with Ifd scenario, \'AADServicePrincipal\' for Server-To-Server au'
                   'thentication in online scenario. Type: string (or Expression with resultType string).')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='User name to access the Dynamics CRM instance. Type: string (or Expression with resultType str'
                   'ing).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the Dynamics CRM instance.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The client ID of the application in Azure Active Directory used for Ser'
                   'ver-To-Server authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKey',
                   'ServicePrincipalCert']), help='The service principal credential type to use in Server-To-Server aut'
                   'hentication. \'ServicePrincipalKey\' for key/secret, \'ServicePrincipalCert\' for certificate. Type'
                   ': string (or Expression with resultType string).')
        c.argument('type_properties_service_principal_credential', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-service-principal-credential'], help='The credential of the service principal object in Azure'
                   ' Active Directory. If servicePrincipalCredentialType is \'ServicePrincipalKey\', servicePrincipalCr'
                   'edential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is '
                   '\'ServicePrincipalCert\', servicePrincipalCredential can only be AzureKeyVaultSecretReference.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service eloqua create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Eloqua server. (i.e. eloqua.example.com)'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqu'
                   'a/Alice)'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service eloqua update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Eloqua server. (i.e. eloqua.example.com)'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqu'
                   'a/Alice)'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service file-server create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name of the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_id', arg_type=CLIArgumentType(options_list=['--type-properties-user-id'],
                   help='User ID to logon the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service file-server update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name of the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_id', arg_type=CLIArgumentType(options_list=['--type-properties-user-id'],
                   help='User ID to logon the server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service ftp-server create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name of the FTP server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the FTP server uses to listen for client connections. Default value is 21. Typ'
                   'e: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous']), help='The aut'
                   'hentication type to be used to connect to the FTP server.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to logon the FTP server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the FTP server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='If true, connect to th'
                   'e FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultT'
                   'ype boolean).'))
        c.argument('type_properties_enable_server_certificate_validation', arg_type=CLIArgumentType(options_list=['--ty'
                   'pe-properties-enable-server-certificate-validation'], help='If true, validate the FTP server SSL ce'
                   'rtificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression wi'
                   'th resultType boolean).'))

    with self.argument_context('datafactory linked-service ftp-server update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='Host'
                   ' name of the FTP server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the FTP server uses to listen for client connections. Default value is 21. Typ'
                   'e: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous']), help='The aut'
                   'hentication type to be used to connect to the FTP server.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to logon the FTP server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the FTP server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='If true, connect to th'
                   'e FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultT'
                   'ype boolean).'))
        c.argument('type_properties_enable_server_certificate_validation', arg_type=CLIArgumentType(options_list=['--ty'
                   'pe-properties-enable-server-certificate-validation'], help='If true, validate the FTP server SSL ce'
                   'rtificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression wi'
                   'th resultType boolean).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service google-ad-words create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_customer_id', arg_type=CLIArgumentType(options_list=['--type-properties-clie'
                   'nt-customer-id'], help='The Client customer ID of the AdWords account that you want to fetch report'
                   ' data for.'))
        c.argument('type_properties_developer_token', arg_type=CLIArgumentType(options_list=['--type-properties-develop'
                   'er-token'], help='The developer token associated with the manager account that you use to grant acc'
                   'ess to the AdWords API.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['ServiceAuthentication', 'UserAuthent'
                   'ication']), help='The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentica'
                   'tion can only be used on self-hosted IR.')
        c.argument('type_properties_refresh_token', arg_type=CLIArgumentType(options_list=['--type-properties-refresh-t'
                   'oken'], help='The refresh token obtained from Google for authorizing access to AdWords for UserAuth'
                   'entication.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client id of the google application used to acquire the refresh token. Type: string (or Ex'
                   'pression with resultType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret of the google application used to acquire the refresh token.'))
        c.argument('type_properties_email', arg_type=CLIArgumentType(options_list=['--type-properties-email'], help='Th'
                   'e service account email ID that is used for ServiceAuthentication and can only be used on self-host'
                   'ed IR.'))
        c.argument('type_properties_key_file_path', arg_type=CLIArgumentType(options_list=['--type-properties-key-file-'
                   'path'], help='The full path to the .p12 key file that is used to authenticate the service account e'
                   'mail address and can only be used on self-hosted IR.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service google-ad-words update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_customer_id', arg_type=CLIArgumentType(options_list=['--type-properties-clie'
                   'nt-customer-id'], help='The Client customer ID of the AdWords account that you want to fetch report'
                   ' data for.'))
        c.argument('type_properties_developer_token', arg_type=CLIArgumentType(options_list=['--type-properties-develop'
                   'er-token'], help='The developer token associated with the manager account that you use to grant acc'
                   'ess to the AdWords API.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['ServiceAuthentication', 'UserAuthent'
                   'ication']), help='The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentica'
                   'tion can only be used on self-hosted IR.')
        c.argument('type_properties_refresh_token', arg_type=CLIArgumentType(options_list=['--type-properties-refresh-t'
                   'oken'], help='The refresh token obtained from Google for authorizing access to AdWords for UserAuth'
                   'entication.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client id of the google application used to acquire the refresh token. Type: string (or Ex'
                   'pression with resultType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret of the google application used to acquire the refresh token.'))
        c.argument('type_properties_email', arg_type=CLIArgumentType(options_list=['--type-properties-email'], help='Th'
                   'e service account email ID that is used for ServiceAuthentication and can only be used on self-host'
                   'ed IR.'))
        c.argument('type_properties_key_file_path', arg_type=CLIArgumentType(options_list=['--type-properties-key-file-'
                   'path'], help='The full path to the .p12 key file that is used to authenticate the service account e'
                   'mail address and can only be used on self-hosted IR.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service google-big-query create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_project', arg_type=CLIArgumentType(options_list=['--type-properties-project'],
                   help='The default BigQuery project to query against.'))
        c.argument('type_properties_additional_projects', arg_type=CLIArgumentType(options_list=['--type-properties-add'
                   'itional-projects'], help='A comma-separated list of public BigQuery projects to access.'))
        c.argument('type_properties_request_google_drive_scope', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-request-google-drive-scope'], help='Whether to request access to Google Drive. Allowing Google '
                   'Drive access enables support for federated tables that combine BigQuery data with data from Google '
                   'Drive. The default value is false.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['ServiceAuthentication', 'UserAuthent'
                   'ication']), help='The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentica'
                   'tion can only be used on self-hosted IR.')
        c.argument('type_properties_refresh_token', arg_type=CLIArgumentType(options_list=['--type-properties-refresh-t'
                   'oken'], help='The refresh token obtained from Google for authorizing access to BigQuery for UserAut'
                   'hentication.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client id of the google application used to acquire the refresh token. Type: string (or Ex'
                   'pression with resultType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret of the google application used to acquire the refresh token.'))
        c.argument('type_properties_email', arg_type=CLIArgumentType(options_list=['--type-properties-email'], help='Th'
                   'e service account email ID that is used for ServiceAuthentication and can only be used on self-host'
                   'ed IR.'))
        c.argument('type_properties_key_file_path', arg_type=CLIArgumentType(options_list=['--type-properties-key-file-'
                   'path'], help='The full path to the .p12 key file that is used to authenticate the service account e'
                   'mail address and can only be used on self-hosted IR.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service google-big-query update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_project', arg_type=CLIArgumentType(options_list=['--type-properties-project'],
                   help='The default BigQuery project to query against.'))
        c.argument('type_properties_additional_projects', arg_type=CLIArgumentType(options_list=['--type-properties-add'
                   'itional-projects'], help='A comma-separated list of public BigQuery projects to access.'))
        c.argument('type_properties_request_google_drive_scope', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-request-google-drive-scope'], help='Whether to request access to Google Drive. Allowing Google '
                   'Drive access enables support for federated tables that combine BigQuery data with data from Google '
                   'Drive. The default value is false.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['ServiceAuthentication', 'UserAuthent'
                   'ication']), help='The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentica'
                   'tion can only be used on self-hosted IR.')
        c.argument('type_properties_refresh_token', arg_type=CLIArgumentType(options_list=['--type-properties-refresh-t'
                   'oken'], help='The refresh token obtained from Google for authorizing access to BigQuery for UserAut'
                   'hentication.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client id of the google application used to acquire the refresh token. Type: string (or Ex'
                   'pression with resultType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret of the google application used to acquire the refresh token.'))
        c.argument('type_properties_email', arg_type=CLIArgumentType(options_list=['--type-properties-email'], help='Th'
                   'e service account email ID that is used for ServiceAuthentication and can only be used on self-host'
                   'ed IR.'))
        c.argument('type_properties_key_file_path', arg_type=CLIArgumentType(options_list=['--type-properties-key-file-'
                   'path'], help='The full path to the .p12 key file that is used to authenticate the service account e'
                   'mail address and can only be used on self-hosted IR.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service google-cloud-storage create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_access_key_id', arg_type=CLIArgumentType(options_list=['--type-properties-access-ke'
                   'y-id'], help='The access key identifier of the Google Cloud Storage Identity and Access Management '
                   '(IAM) user. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_secret_access_key', arg_type=CLIArgumentType(options_list=['--type-properties-secre'
                   't-access-key'], help='The secret access key of the Google Cloud Storage Identity and Access Managem'
                   'ent (IAM) user.'))
        c.argument('type_properties_service_url', arg_type=CLIArgumentType(options_list=['--type-properties-service-url'
                   ''], help='This value specifies the endpoint to access with the Google Cloud Storage Connector. This'
                   ' is an optional property; change it only if you want to try a different service endpoint or want to'
                   ' switch between https and http. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service google-cloud-storage update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_access_key_id', arg_type=CLIArgumentType(options_list=['--type-properties-access-ke'
                   'y-id'], help='The access key identifier of the Google Cloud Storage Identity and Access Management '
                   '(IAM) user. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_secret_access_key', arg_type=CLIArgumentType(options_list=['--type-properties-secre'
                   't-access-key'], help='The secret access key of the Google Cloud Storage Identity and Access Managem'
                   'ent (IAM) user.'))
        c.argument('type_properties_service_url', arg_type=CLIArgumentType(options_list=['--type-properties-service-url'
                   ''], help='This value specifies the endpoint to access with the Google Cloud Storage Connector. This'
                   ' is an optional property; change it only if you want to try a different service endpoint or want to'
                   ' switch between https and http. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service greenplum create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service greenplum update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service h-base create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the HBase server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the HBase instance uses to listen for client connections. The default value is 9090.'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Basic']), help='The aut'
                   'hentication mechanism to use to connect to the HBase server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the HBase instance.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service h-base update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the HBase server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the HBase instance uses to listen for client connections. The default value is 9090.'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Basic']), help='The aut'
                   'hentication mechanism to use to connect to the HBase server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the HBase instance.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service h-d-insight create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_cluster_uri', arg_type=CLIArgumentType(options_list=['--type-properties-cluster-uri'
                   ''], help='HDInsight cluster URI. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='HDInsight cluster user name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='HDInsight cluster password.'))
        c.argument('type_properties_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-properties-lin'
                   'ked-service-name'], help='The Azure Storage linked service reference.'))
        c.argument('type_properties_hcatalog_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-hcatalog-linked-service-name'], help='A reference to the Azure SQL linked service that points'
                   ' to the HCatalog database.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_is_esp_enabled', arg_type=CLIArgumentType(options_list=['--type-properties-is-esp-e'
                   'nabled'], help='Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: B'
                   'oolean.'))
        c.argument('type_properties_file_system', arg_type=CLIArgumentType(options_list=['--type-properties-file-system'
                   ''], help='Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string ('
                   'or Expression with resultType string).'))

    with self.argument_context('datafactory linked-service h-d-insight update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_cluster_uri', arg_type=CLIArgumentType(options_list=['--type-properties-cluster-uri'
                   ''], help='HDInsight cluster URI. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='HDInsight cluster user name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='HDInsight cluster password.'))
        c.argument('type_properties_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-properties-lin'
                   'ked-service-name'], help='The Azure Storage linked service reference.'))
        c.argument('type_properties_hcatalog_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-hcatalog-linked-service-name'], help='A reference to the Azure SQL linked service that points'
                   ' to the HCatalog database.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_is_esp_enabled', arg_type=CLIArgumentType(options_list=['--type-properties-is-esp-e'
                   'nabled'], help='Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: B'
                   'oolean.'))
        c.argument('type_properties_file_system', arg_type=CLIArgumentType(options_list=['--type-properties-file-system'
                   ''], help='Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string ('
                   'or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service h-d-insight-on-demand create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_cluster_size', arg_type=CLIArgumentType(options_list=['--type-properties-cluster-si'
                   'ze'], help='Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expre'
                   'ssion with resultType string).'))
        c.argument('type_properties_time_to_live', arg_type=CLIArgumentType(options_list=['--type-properties-time-to-li'
                   've'], help='The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-de'
                   'mand HDInsight cluster stays alive after completion of an activity run if there are no other active'
                   ' jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_version', arg_type=CLIArgumentType(options_list=['--type-properties-version'],
                   help='Version of the HDInsight cluster.  Type: string (or Expression with resultType string).'))
        c.argument('type_properties_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-properties-lin'
                   'ked-service-name'], help='Azure Storage linked service to be used by the on-demand cluster for stor'
                   'ing and processing data.'))
        c.argument('type_properties_host_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-ho'
                   'st-subscription-id'], help='The customer’s subscription to host the cluster. Type: string (or Expre'
                   'ssion with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The service principal id for the hostSubscriptionId. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key for the service principal id.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultT'
                   'ype string).'))
        c.argument('type_properties_cluster_resource_group', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'cluster-resource-group'], help='The resource group where the cluster belongs. Type: string (or Expr'
                   'ession with resultType string).'))
        c.argument('type_properties_cluster_name_prefix', arg_type=CLIArgumentType(options_list=['--type-properties-clu'
                   'ster-name-prefix'], help='The prefix of cluster name, postfix will be distinct with timestamp. Type'
                   ': string (or Expression with resultType string).'))
        c.argument('type_properties_cluster_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-clust'
                   'er-user-name'], help='The username to access the cluster. Type: string (or Expression with resultTy'
                   'pe string).'))
        c.argument('type_properties_cluster_password', arg_type=CLIArgumentType(options_list=['--type-properties-cluste'
                   'r-password'], help='The password to access the cluster.'))
        c.argument('type_properties_cluster_ssh_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-c'
                   'luster-ssh-user-name'], help='The username to SSH remotely connect to cluster’s node (for Linux). T'
                   'ype: string (or Expression with resultType string).'))
        c.argument('type_properties_cluster_ssh_password', arg_type=CLIArgumentType(options_list=['--type-properties-cl'
                   'uster-ssh-password'], help='The password to SSH remotely connect cluster’s node (for Linux).'))
        c.argument('type_properties_additional_linked_service_names', arg_type=CLIArgumentType(options_list=['--type-pr'
                   'operties-additional-linked-service-names'], help='Specifies additional storage accounts for the HDI'
                   'nsight linked service so that the Data Factory service can register them on your behalf.'))
        c.argument('type_properties_hcatalog_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-hcatalog-linked-service-name'], help='The name of Azure SQL linked service that point to the '
                   'HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as th'
                   'e metastore.'))
        c.argument('type_properties_cluster_type', arg_type=CLIArgumentType(options_list=['--type-properties-cluster-ty'
                   'pe'], help='The cluster type. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_spark_version', arg_type=CLIArgumentType(options_list=['--type-properties-spark-ver'
                   'sion'], help='The version of spark if the cluster type is \'spark\'. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_core_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-core'
                   '-configuration'], help='Specifies the core configuration parameters (as in core-site.xml) for the H'
                   'DInsight cluster to be created.'))
        c.argument('type_properties_h_base_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-h-'
                   'base-configuration'], help='Specifies the HBase configuration parameters (hbase-site.xml) for the H'
                   'DInsight cluster.'))
        c.argument('type_properties_hdfs_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-hdfs'
                   '-configuration'], help='Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsig'
                   'ht cluster.'))
        c.argument('type_properties_hive_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-hive'
                   '-configuration'], help='Specifies the hive configuration parameters (hive-site.xml) for the HDInsig'
                   'ht cluster.'))
        c.argument('type_properties_map_reduce_configuration', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-map-reduce-configuration'], help='Specifies the MapReduce configuration parameters (mapred-site.x'
                   'ml) for the HDInsight cluster.'))
        c.argument('type_properties_oozie_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-ooz'
                   'ie-configuration'], help='Specifies the Oozie configuration parameters (oozie-site.xml) for the HDI'
                   'nsight cluster.'))
        c.argument('type_properties_storm_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-sto'
                   'rm-configuration'], help='Specifies the Storm configuration parameters (storm-site.xml) for the HDI'
                   'nsight cluster.'))
        c.argument('type_properties_yarn_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-yarn'
                   '-configuration'], help='Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsig'
                   'ht cluster.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_head_node_size', arg_type=CLIArgumentType(options_list=['--type-properties-head-nod'
                   'e-size'], help='Specifies the size of the head node for the HDInsight cluster.'))
        c.argument('type_properties_data_node_size', arg_type=CLIArgumentType(options_list=['--type-properties-data-nod'
                   'e-size'], help='Specifies the size of the data node for the HDInsight cluster.'))
        c.argument('type_properties_zookeeper_node_size', arg_type=CLIArgumentType(options_list=['--type-properties-zoo'
                   'keeper-node-size'], help='Specifies the size of the Zoo Keeper node for the HDInsight cluster.'))
        c.argument('type_properties_script_actions', action=AddTypePropertiesScriptActions, nargs='+', help='Custom scr'
                   'ipt actions to run on HDI ondemand cluster once it\'s up. Please refer to https://docs.microsoft.co'
                   'm/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2'
                   'Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.')
        c.argument('type_properties_virtual_network_id', arg_type=CLIArgumentType(options_list=['--type-properties-virt'
                   'ual-network-id'], help='The ARM resource ID for the vNet to which the cluster should be joined afte'
                   'r creation. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_subnet_name', arg_type=CLIArgumentType(options_list=['--type-properties-subnet-name'
                   ''], help='The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then t'
                   'his property is required. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory linked-service h-d-insight-on-demand update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_cluster_size', arg_type=CLIArgumentType(options_list=['--type-properties-cluster-si'
                   'ze'], help='Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expre'
                   'ssion with resultType string).'))
        c.argument('type_properties_time_to_live', arg_type=CLIArgumentType(options_list=['--type-properties-time-to-li'
                   've'], help='The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-de'
                   'mand HDInsight cluster stays alive after completion of an activity run if there are no other active'
                   ' jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_version', arg_type=CLIArgumentType(options_list=['--type-properties-version'],
                   help='Version of the HDInsight cluster.  Type: string (or Expression with resultType string).'))
        c.argument('type_properties_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-properties-lin'
                   'ked-service-name'], help='Azure Storage linked service to be used by the on-demand cluster for stor'
                   'ing and processing data.'))
        c.argument('type_properties_host_subscription_id', arg_type=CLIArgumentType(options_list=['--type-properties-ho'
                   'st-subscription-id'], help='The customer’s subscription to host the cluster. Type: string (or Expre'
                   'ssion with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The service principal id for the hostSubscriptionId. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The key for the service principal id.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultT'
                   'ype string).'))
        c.argument('type_properties_cluster_resource_group', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'cluster-resource-group'], help='The resource group where the cluster belongs. Type: string (or Expr'
                   'ession with resultType string).'))
        c.argument('type_properties_cluster_name_prefix', arg_type=CLIArgumentType(options_list=['--type-properties-clu'
                   'ster-name-prefix'], help='The prefix of cluster name, postfix will be distinct with timestamp. Type'
                   ': string (or Expression with resultType string).'))
        c.argument('type_properties_cluster_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-clust'
                   'er-user-name'], help='The username to access the cluster. Type: string (or Expression with resultTy'
                   'pe string).'))
        c.argument('type_properties_cluster_password', arg_type=CLIArgumentType(options_list=['--type-properties-cluste'
                   'r-password'], help='The password to access the cluster.'))
        c.argument('type_properties_cluster_ssh_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-c'
                   'luster-ssh-user-name'], help='The username to SSH remotely connect to cluster’s node (for Linux). T'
                   'ype: string (or Expression with resultType string).'))
        c.argument('type_properties_cluster_ssh_password', arg_type=CLIArgumentType(options_list=['--type-properties-cl'
                   'uster-ssh-password'], help='The password to SSH remotely connect cluster’s node (for Linux).'))
        c.argument('type_properties_additional_linked_service_names', arg_type=CLIArgumentType(options_list=['--type-pr'
                   'operties-additional-linked-service-names'], help='Specifies additional storage accounts for the HDI'
                   'nsight linked service so that the Data Factory service can register them on your behalf.'))
        c.argument('type_properties_hcatalog_linked_service_name', arg_type=CLIArgumentType(options_list=['--type-prope'
                   'rties-hcatalog-linked-service-name'], help='The name of Azure SQL linked service that point to the '
                   'HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as th'
                   'e metastore.'))
        c.argument('type_properties_cluster_type', arg_type=CLIArgumentType(options_list=['--type-properties-cluster-ty'
                   'pe'], help='The cluster type. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_spark_version', arg_type=CLIArgumentType(options_list=['--type-properties-spark-ver'
                   'sion'], help='The version of spark if the cluster type is \'spark\'. Type: string (or Expression wi'
                   'th resultType string).'))
        c.argument('type_properties_core_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-core'
                   '-configuration'], help='Specifies the core configuration parameters (as in core-site.xml) for the H'
                   'DInsight cluster to be created.'))
        c.argument('type_properties_h_base_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-h-'
                   'base-configuration'], help='Specifies the HBase configuration parameters (hbase-site.xml) for the H'
                   'DInsight cluster.'))
        c.argument('type_properties_hdfs_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-hdfs'
                   '-configuration'], help='Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsig'
                   'ht cluster.'))
        c.argument('type_properties_hive_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-hive'
                   '-configuration'], help='Specifies the hive configuration parameters (hive-site.xml) for the HDInsig'
                   'ht cluster.'))
        c.argument('type_properties_map_reduce_configuration', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-map-reduce-configuration'], help='Specifies the MapReduce configuration parameters (mapred-site.x'
                   'ml) for the HDInsight cluster.'))
        c.argument('type_properties_oozie_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-ooz'
                   'ie-configuration'], help='Specifies the Oozie configuration parameters (oozie-site.xml) for the HDI'
                   'nsight cluster.'))
        c.argument('type_properties_storm_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-sto'
                   'rm-configuration'], help='Specifies the Storm configuration parameters (storm-site.xml) for the HDI'
                   'nsight cluster.'))
        c.argument('type_properties_yarn_configuration', arg_type=CLIArgumentType(options_list=['--type-properties-yarn'
                   '-configuration'], help='Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsig'
                   'ht cluster.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_head_node_size', arg_type=CLIArgumentType(options_list=['--type-properties-head-nod'
                   'e-size'], help='Specifies the size of the head node for the HDInsight cluster.'))
        c.argument('type_properties_data_node_size', arg_type=CLIArgumentType(options_list=['--type-properties-data-nod'
                   'e-size'], help='Specifies the size of the data node for the HDInsight cluster.'))
        c.argument('type_properties_zookeeper_node_size', arg_type=CLIArgumentType(options_list=['--type-properties-zoo'
                   'keeper-node-size'], help='Specifies the size of the Zoo Keeper node for the HDInsight cluster.'))
        c.argument('type_properties_script_actions', action=AddTypePropertiesScriptActions, nargs='+', help='Custom scr'
                   'ipt actions to run on HDI ondemand cluster once it\'s up. Please refer to https://docs.microsoft.co'
                   'm/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2'
                   'Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.')
        c.argument('type_properties_virtual_network_id', arg_type=CLIArgumentType(options_list=['--type-properties-virt'
                   'ual-network-id'], help='The ARM resource ID for the vNet to which the cluster should be joined afte'
                   'r creation. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_subnet_name', arg_type=CLIArgumentType(options_list=['--type-properties-subnet-name'
                   ''], help='The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then t'
                   'his property is required. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service hdfs create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The UR'
                   'L of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the HDFS. Possible values are: '
                   'Anonymous and Windows. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Windows authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Windows authentication.'))

    with self.argument_context('datafactory linked-service hdfs update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The UR'
                   'L of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the HDFS. Possible values are: '
                   'Anonymous and Windows. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Windows authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Windows authentication.'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service hive create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='IP a'
                   'ddress or host name of the Hive server, separated by \';\' for multiple hosts (only when serviceDis'
                   'coveryMode is enable).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Hive server uses to listen for client connections.'))
        c.argument('type_properties_server_type', arg_type=get_enum_type(['HiveServer1', 'HiveServer2', 'HiveThriftServ'
                   'er']), help='The type of Hive server.')
        c.argument('type_properties_thrift_transport_protocol', arg_type=get_enum_type(['Binary', 'SASL', 'HTTP ']),
                   help='The transport protocol to use in the Thrift layer.')
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Username', 'UsernameAnd'
                   'Password', 'WindowsAzureHDInsightService']), help='The authentication method used to access the Hiv'
                   'e server.')
        c.argument('type_properties_service_discovery_mode', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'service-discovery-mode'], help='true to indicate using the ZooKeeper service, false not.'))
        c.argument('type_properties_zoo_keeper_name_space', arg_type=CLIArgumentType(options_list=['--type-properties-z'
                   'oo-keeper-name-space'], help='The namespace on ZooKeeper under which Hive Server 2 nodes are added.'
                   ''))
        c.argument('type_properties_use_native_query', arg_type=CLIArgumentType(options_list=['--type-properties-use-na'
                   'tive-query'], help='Specifies whether the driver uses native HiveQL queries,or converts them into a'
                   'n equivalent form in HiveQL.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Hive Server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the Username field'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the Hive server.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service hive update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='IP a'
                   'ddress or host name of the Hive server, separated by \';\' for multiple hosts (only when serviceDis'
                   'coveryMode is enable).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Hive server uses to listen for client connections.'))
        c.argument('type_properties_server_type', arg_type=get_enum_type(['HiveServer1', 'HiveServer2', 'HiveThriftServ'
                   'er']), help='The type of Hive server.')
        c.argument('type_properties_thrift_transport_protocol', arg_type=get_enum_type(['Binary', 'SASL', 'HTTP ']),
                   help='The transport protocol to use in the Thrift layer.')
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Username', 'UsernameAnd'
                   'Password', 'WindowsAzureHDInsightService']), help='The authentication method used to access the Hiv'
                   'e server.')
        c.argument('type_properties_service_discovery_mode', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'service-discovery-mode'], help='true to indicate using the ZooKeeper service, false not.'))
        c.argument('type_properties_zoo_keeper_name_space', arg_type=CLIArgumentType(options_list=['--type-properties-z'
                   'oo-keeper-name-space'], help='The namespace on ZooKeeper under which Hive Server 2 nodes are added.'
                   ''))
        c.argument('type_properties_use_native_query', arg_type=CLIArgumentType(options_list=['--type-properties-use-na'
                   'tive-query'], help='Specifies whether the driver uses native HiveQL queries,or converts them into a'
                   'n equivalent form in HiveQL.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Hive Server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the Username field'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the Hive server.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service http-server create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The ba'
                   'se URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with result'
                   'Type string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous', 'Digest', 'Wind'
                   'ows', 'ClientCertificate']), help='The authentication type to be used to connect to the HTTP server'
                   '.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resul'
                   'tType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication'
                   '.'))
        c.argument('type_properties_embedded_cert_data', arg_type=CLIArgumentType(options_list=['--type-properties-embe'
                   'dded-cert-data'], help='Base64 encoded certificate data for ClientCertificate authentication. For o'
                   'n-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Pa'
                   'ssword should be specified. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_cert_thumbprint', arg_type=CLIArgumentType(options_list=['--type-properties-cert-th'
                   'umbprint'], help='Thumbprint of certificate for ClientCertificate authentication. Only valid for on'
                   '-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint o'
                   'r EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_enable_server_certificate_validation', arg_type=CLIArgumentType(options_list=['--ty'
                   'pe-properties-enable-server-certificate-validation'], help='If true, validate the HTTPS server SSL '
                   'certificate. Default value is true. Type: boolean (or Expression with resultType boolean).'))

    with self.argument_context('datafactory linked-service http-server update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The ba'
                   'se URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with result'
                   'Type string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous', 'Digest', 'Wind'
                   'ows', 'ClientCertificate']), help='The authentication type to be used to connect to the HTTP server'
                   '.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resul'
                   'tType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication'
                   '.'))
        c.argument('type_properties_embedded_cert_data', arg_type=CLIArgumentType(options_list=['--type-properties-embe'
                   'dded-cert-data'], help='Base64 encoded certificate data for ClientCertificate authentication. For o'
                   'n-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Pa'
                   'ssword should be specified. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_cert_thumbprint', arg_type=CLIArgumentType(options_list=['--type-properties-cert-th'
                   'umbprint'], help='Thumbprint of certificate for ClientCertificate authentication. Only valid for on'
                   '-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint o'
                   'r EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_enable_server_certificate_validation', arg_type=CLIArgumentType(options_list=['--ty'
                   'pe-properties-enable-server-certificate-validation'], help='If true, validate the HTTPS server SSL '
                   'certificate. Default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service hubspot create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with your Hubspot application.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with your Hubspot application.'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token obtained when initially authenticating your OAuth integration.'))
        c.argument('type_properties_refresh_token', arg_type=CLIArgumentType(options_list=['--type-properties-refresh-t'
                   'oken'], help='The refresh token obtained when initially authenticating your OAuth integration.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service hubspot update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with your Hubspot application.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with your Hubspot application.'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token obtained when initially authenticating your OAuth integration.'))
        c.argument('type_properties_refresh_token', arg_type=CLIArgumentType(options_list=['--type-properties-refresh-t'
                   'oken'], help='The refresh token obtained when initially authenticating your OAuth integration.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service impala create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Impala server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Impala server uses to listen for client connections. The default value is 21050.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'SASLUsername', 'Usernam'
                   'eAndPassword']), help='The authentication type to use.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to access the Impala server. The default value is anonymous when using SASL'
                   'Username.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name when using UsernameAndPassword.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service impala update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Impala server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Impala server uses to listen for client connections. The default value is 21050.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'SASLUsername', 'Usernam'
                   'eAndPassword']), help='The authentication type to use.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to access the Impala server. The default value is anonymous when using SASL'
                   'Username.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name when using UsernameAndPassword.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service informix create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The non-access credential portion of the connection string as well as an opti'
                   'onal encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the Informix as ODBC data store'
                   '. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_credential',
                   arg_type=CLIArgumentType(options_list=['--type-properties-credential'], help='The access credential '
                   'portion of the connection string specified in driver-specific property-value format.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service informix update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The non-access credential portion of the connection string as well as an opti'
                   'onal encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the Informix as ODBC data store'
                   '. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_credential',
                   arg_type=CLIArgumentType(options_list=['--type-properties-credential'], help='The access credential '
                   'portion of the connection string specified in driver-specific property-value format.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service jira create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Jira service. (e.g. jira.example.com)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Jira server uses to listen for client connections. The default value is 443 if co'
                   'nnecting through HTTPS, or 8080 if connecting through HTTP.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Jira Service.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the username field.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service jira update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Jira service. (e.g. jira.example.com)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Jira server uses to listen for client connections. The default value is 443 if co'
                   'nnecting through HTTPS, or 8080 if connecting through HTTP.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Jira Service.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the username field.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service magento create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the Magento instance. (i.e. 192.168.222.110/magento3)'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token from Magento.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service magento update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the Magento instance. (i.e. 192.168.222.110/magento3)'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token from Magento.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service maria-d-b create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service maria-d-b update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service marketo create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client Id of your Marketo service.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret of your Marketo service.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service marketo update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client Id of your Marketo service.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret of your Marketo service.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service microsoft-access create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The non-access credential portion of the connection string as well as an opti'
                   'onal encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the Microsoft Access as ODBC da'
                   'ta store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType str'
                   'ing).'))
        c.argument('type_properties_credential',
                   arg_type=CLIArgumentType(options_list=['--type-properties-credential'], help='The access credential '
                   'portion of the connection string specified in driver-specific property-value format.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service microsoft-access update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The non-access credential portion of the connection string as well as an opti'
                   'onal encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the Microsoft Access as ODBC da'
                   'ta store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType str'
                   'ing).'))
        c.argument('type_properties_credential',
                   arg_type=CLIArgumentType(options_list=['--type-properties-credential'], help='The access credential '
                   'portion of the connection string specified in driver-specific property-value format.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service mongo-db create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'The IP address or server name of the MongoDB server. Type: string (or Expression with resultType st'
                   'ring).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous']), help='The aut'
                   'hentication type to be used to connect to the MongoDB database.')
        c.argument('type_properties_database_name', arg_type=CLIArgumentType(options_list=['--type-properties-database-'
                   'name'], help='The name of the MongoDB database that you want to access. Type: string (or Expression'
                   ' with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_auth_source', arg_type=CLIArgumentType(options_list=['--type-properties-auth-source'
                   ''], help='Database to verify the username and password. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the MongoDB server uses to listen for client connections. The default value is'
                   ' 27017. Type: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Ex'
                   'pression with resultType boolean).'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service mongo-db update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'The IP address or server name of the MongoDB server. Type: string (or Expression with resultType st'
                   'ring).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous']), help='The aut'
                   'hentication type to be used to connect to the MongoDB database.')
        c.argument('type_properties_database_name', arg_type=CLIArgumentType(options_list=['--type-properties-database-'
                   'name'], help='The name of the MongoDB database that you want to access. Type: string (or Expression'
                   ' with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_auth_source', arg_type=CLIArgumentType(options_list=['--type-properties-auth-source'
                   ''], help='Database to verify the username and password. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the MongoDB server uses to listen for client connections. The default value is'
                   ' 27017. Type: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Ex'
                   'pression with resultType boolean).'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service mongo-db-v2 create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSec'
                   'retReference. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The name of the MongoDB database that you want to access. Type: string (or Expression with res'
                   'ultType string).'))

    with self.argument_context('datafactory linked-service mongo-db-v2 update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSec'
                   'retReference. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The name of the MongoDB database that you want to access. Type: string (or Expression with res'
                   'ultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service my-sql create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service my-sql update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service netezza create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service netezza update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service o-data create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The UR'
                   'L of the OData service endpoint. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous', 'Windows', 'Aad'
                   'ServicePrincipal', 'ManagedServiceIdentity']), help='Type of authentication used to connect to the '
                   'OData service.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name of the OData service. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password of the OData service.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'Specify the tenant information (domain name or tenant ID) under which your application resides. Typ'
                   'e: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='Specify the application id of your application registered in Azure Acti'
                   've Directory. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_aad_resource_id', arg_type=CLIArgumentType(options_list=['--type-properties-aad-res'
                   'ource-id'], help='Specify the resource you are requesting authorization to use Directory. Type: str'
                   'ing (or Expression with resultType string).'))
        c.argument('type_properties_aad_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKe'
                   'y', 'ServicePrincipalCert']), help='Specify the credential type (key or cert) is used for service p'
                   'rincipal.')
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='Specify the secret of your application registered in Azure Active Dir'
                   'ectory. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_embedded_cert', arg_type=CLIArgumentType(options_list=['--type-pr'
                   'operties-service-principal-embedded-cert'], help='Specify the base64 encoded certificate of your ap'
                   'plication registered in Azure Active Directory. Type: string (or Expression with resultType string)'
                   '.'))
        c.argument('type_properties_service_principal_embedded_cert_password', arg_type=CLIArgumentType(options_list=[
                   '--type-properties-service-principal-embedded-cert-password'], help='Specify the password of your ce'
                   'rtificate if your certificate has a password and you are using AadServicePrincipal authentication. '
                   'Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service o-data update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The UR'
                   'L of the OData service endpoint. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Anonymous', 'Windows', 'Aad'
                   'ServicePrincipal', 'ManagedServiceIdentity']), help='Type of authentication used to connect to the '
                   'OData service.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name of the OData service. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password of the OData service.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'Specify the tenant information (domain name or tenant ID) under which your application resides. Typ'
                   'e: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='Specify the application id of your application registered in Azure Acti'
                   've Directory. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_aad_resource_id', arg_type=CLIArgumentType(options_list=['--type-properties-aad-res'
                   'ource-id'], help='Specify the resource you are requesting authorization to use Directory. Type: str'
                   'ing (or Expression with resultType string).'))
        c.argument('type_properties_aad_service_principal_credential_type', arg_type=get_enum_type(['ServicePrincipalKe'
                   'y', 'ServicePrincipalCert']), help='Specify the credential type (key or cert) is used for service p'
                   'rincipal.')
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='Specify the secret of your application registered in Azure Active Dir'
                   'ectory. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_embedded_cert', arg_type=CLIArgumentType(options_list=['--type-pr'
                   'operties-service-principal-embedded-cert'], help='Specify the base64 encoded certificate of your ap'
                   'plication registered in Azure Active Directory. Type: string (or Expression with resultType string)'
                   '.'))
        c.argument('type_properties_service_principal_embedded_cert_password', arg_type=CLIArgumentType(options_list=[
                   '--type-properties-service-principal-embedded-cert-password'], help='Specify the password of your ce'
                   'rtificate if your certificate has a password and you are using AadServicePrincipal authentication. '
                   'Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service odbc create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The non-access credential portion of the connection string as well as an opti'
                   'onal encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the ODBC data store. Possible v'
                   'alues are: Anonymous and Basic. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_credential',
                   arg_type=CLIArgumentType(options_list=['--type-properties-credential'], help='The access credential '
                   'portion of the connection string specified in driver-specific property-value format.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service odbc update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The non-access credential portion of the connection string as well as an opti'
                   'onal encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.'))
        c.argument('type_properties_authentication_type', arg_type=CLIArgumentType(options_list=['--type-properties-aut'
                   'hentication-type'], help='Type of authentication used to connect to the ODBC data store. Possible v'
                   'alues are: Anonymous and Basic. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_credential',
                   arg_type=CLIArgumentType(options_list=['--type-properties-credential'], help='The access credential '
                   'portion of the connection string specified in driver-specific property-value format.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='User name for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service office365 create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_office365tenant_id', arg_type=CLIArgumentType(options_list=['--type-properties-offi'
                   'ce365tenant-id'], help='Azure tenant ID to which the Office 365 account belongs. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_service_principal_tenant_id', arg_type=CLIArgumentType(options_list=['--type-proper'
                   'ties-service-principal-tenant-id'], help='Specify the tenant information under which your Azure AD '
                   'web application resides. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='Specify the application\'s client ID. Type: string (or Expression with '
                   'resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='Specify the application\'s key.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service office365 update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_office365tenant_id', arg_type=CLIArgumentType(options_list=['--type-properties-offi'
                   'ce365tenant-id'], help='Azure tenant ID to which the Office 365 account belongs. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_service_principal_tenant_id', arg_type=CLIArgumentType(options_list=['--type-proper'
                   'ties-service-principal-tenant-id'], help='Specify the tenant information under which your Azure AD '
                   'web application resides. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='Specify the application\'s client ID. Type: string (or Expression with '
                   'resultType string).'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='Specify the application\'s key.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service oracle create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service oracle update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service oracle-service-cloud create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the Oracle Service Cloud instance.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Oracle Service Cloud server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the username key.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true. Type: '
                   'boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service oracle-service-cloud update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the Oracle Service Cloud instance.'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Oracle Service Cloud server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the username key.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true. Type: '
                   'boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service paypal create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the PayPal instance. (i.e. api.sandbox.paypal.com)'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with your PayPal application.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with your PayPal application.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service paypal update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the PayPal instance. (i.e. api.sandbox.paypal.com)'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with your PayPal application.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with your PayPal application.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service phoenix create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Phoenix server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). '
                   'The default value is hbasephoenix if using WindowsAzureHDInsightService.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'UsernameAndPassword', 
                   'WindowsAzureHDInsightService']), help='The authentication mechanism used to connect to the Phoenix '
                   'server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the Phoenix server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service phoenix update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Phoenix server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). '
                   'The default value is hbasephoenix if using WindowsAzureHDInsightService.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'UsernameAndPassword', 
                   'WindowsAzureHDInsightService']), help='The authentication mechanism used to connect to the Phoenix '
                   'server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the Phoenix server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service postgre-sql create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service postgre-sql update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service presto create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Presto server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_server_version', arg_type=CLIArgumentType(options_list=['--type-properties-server-v'
                   'ersion'], help='The version of the Presto server. (i.e. 0.148-t)'))
        c.argument('type_properties_catalog', arg_type=CLIArgumentType(options_list=['--type-properties-catalog'],
                   help='The catalog context for all request against the server.'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Presto server uses to listen for client connections. The default value is 8080.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'LDAP']), help='The auth'
                   'entication mechanism used to connect to the Presto server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the Presto server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_time_zone_id', arg_type=CLIArgumentType(options_list=['--type-properties-time-zone-'
                   'id'], help='The local time zone used by the connection. Valid values for this option are specified '
                   'in the IANA Time Zone Database. The default value is the system time zone.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service presto update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'IP address or host name of the Presto server. (i.e. 192.168.222.160)'))
        c.argument('type_properties_server_version', arg_type=CLIArgumentType(options_list=['--type-properties-server-v'
                   'ersion'], help='The version of the Presto server. (i.e. 0.148-t)'))
        c.argument('type_properties_catalog', arg_type=CLIArgumentType(options_list=['--type-properties-catalog'],
                   help='The catalog context for all request against the server.'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Presto server uses to listen for client connections. The default value is 8080.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'LDAP']), help='The auth'
                   'entication mechanism used to connect to the Presto server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the Presto server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_time_zone_id', arg_type=CLIArgumentType(options_list=['--type-properties-time-zone-'
                   'id'], help='The local time zone used by the connection. Valid values for this option are specified '
                   'in the IANA Time Zone Database. The default value is the system time zone.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service quick-books create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)'))
        c.argument('type_properties_company_id',
                   arg_type=CLIArgumentType(options_list=['--type-properties-company-id'], help='The company ID of the '
                   'QuickBooks company to authorize.'))
        c.argument('type_properties_consumer_key', arg_type=CLIArgumentType(options_list=['--type-properties-consumer-k'
                   'ey'], help='The consumer key for OAuth 1.0 authentication.'))
        c.argument('type_properties_consumer_secret', arg_type=CLIArgumentType(options_list=['--type-properties-consume'
                   'r-secret'], help='The consumer secret for OAuth 1.0 authentication.'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token for OAuth 1.0 authentication.'))
        c.argument('type_properties_access_token_secret', arg_type=CLIArgumentType(options_list=['--type-properties-acc'
                   'ess-token-secret'], help='The access token secret for OAuth 1.0 authentication.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service quick-books update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)'))
        c.argument('type_properties_company_id',
                   arg_type=CLIArgumentType(options_list=['--type-properties-company-id'], help='The company ID of the '
                   'QuickBooks company to authorize.'))
        c.argument('type_properties_consumer_key', arg_type=CLIArgumentType(options_list=['--type-properties-consumer-k'
                   'ey'], help='The consumer key for OAuth 1.0 authentication.'))
        c.argument('type_properties_consumer_secret', arg_type=CLIArgumentType(options_list=['--type-properties-consume'
                   'r-secret'], help='The consumer secret for OAuth 1.0 authentication.'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token for OAuth 1.0 authentication.'))
        c.argument('type_properties_access_token_secret', arg_type=CLIArgumentType(options_list=['--type-properties-acc'
                   'ess-token-secret'], help='The access token secret for OAuth 1.0 authentication.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service responsys create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Responsys server.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with the Responsys application. Type: string (or Expression with resu'
                   'ltType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with the Responsys application. Type: string (or Express'
                   'ion with resultType string).'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true. Type: '
                   'boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service responsys update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Responsys server.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with the Responsys application. Type: string (or Expression with resu'
                   'ltType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with the Responsys application. Type: string (or Express'
                   'ion with resultType string).'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true. Type: '
                   'boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service rest-service create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The ba'
                   'se URL of the REST service.'))
        c.argument('type_properties_enable_server_certificate_validation', arg_type=CLIArgumentType(options_list=['--ty'
                   'pe-properties-enable-server-certificate-validation'], help='Whether to validate server side SSL cer'
                   'tificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression wi'
                   'th resultType boolean).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Basic', 'AadServicePrin'
                   'cipal', 'ManagedServiceIdentity']), help='Type of authentication used to connect to the REST servic'
                   'e.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='The user name used in Basic authentication type.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password used in Basic authentication type.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The application\'s client ID used in AadServicePrincipal authentication'
                   ' type.'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The application\'s key used in AadServicePrincipal authentication typ'
                   'e.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type u'
                   'nder which your application resides.'))
        c.argument('type_properties_aad_resource_id', arg_type=CLIArgumentType(options_list=['--type-properties-aad-res'
                   'ource-id'], help='The resource you are requesting authorization to use.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service rest-service update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The ba'
                   'se URL of the REST service.'))
        c.argument('type_properties_enable_server_certificate_validation', arg_type=CLIArgumentType(options_list=['--ty'
                   'pe-properties-enable-server-certificate-validation'], help='Whether to validate server side SSL cer'
                   'tificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression wi'
                   'th resultType boolean).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Basic', 'AadServicePrin'
                   'cipal', 'ManagedServiceIdentity']), help='Type of authentication used to connect to the REST servic'
                   'e.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='The user name used in Basic authentication type.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password used in Basic authentication type.'))
        c.argument('type_properties_service_principal_id', arg_type=CLIArgumentType(options_list=['--type-properties-se'
                   'rvice-principal-id'], help='The application\'s client ID used in AadServicePrincipal authentication'
                   ' type.'))
        c.argument('type_properties_service_principal_key', arg_type=CLIArgumentType(options_list=['--type-properties-s'
                   'ervice-principal-key'], help='The application\'s key used in AadServicePrincipal authentication typ'
                   'e.'))
        c.argument('type_properties_tenant', arg_type=CLIArgumentType(options_list=['--type-properties-tenant'], help=
                   'The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type u'
                   'nder which your application resides.'))
        c.argument('type_properties_aad_resource_id', arg_type=CLIArgumentType(options_list=['--type-properties-aad-res'
                   'ource-id'], help='The resource you are requesting authorization to use.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service salesforce create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_environment_url', arg_type=CLIArgumentType(options_list=['--type-properties-environ'
                   'ment-url'], help='The URL of Salesforce instance. Default is \'https://login.salesforce.com\'. To c'
                   'opy data from sandbox, specify \'https://test.salesforce.com\'. To copy data from custom domain, sp'
                   'ecify, for example, \'https://[domain].my.salesforce.com\'. Type: string (or Expression with result'
                   'Type string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username for Basic authentication of the Salesforce instance. Type: string (or Expression '
                   'with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication of the Salesforce instance.'))
        c.argument('type_properties_security_token', arg_type=CLIArgumentType(options_list=['--type-properties-security'
                   '-token'], help='The security token is optional to remotely access Salesforce instance.'))
        c.argument('type_properties_api_version', arg_type=CLIArgumentType(options_list=['--type-properties-api-version'
                   ''], help='The Salesforce API version used in ADF. Type: string (or Expression with resultType strin'
                   'g).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service salesforce update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_environment_url', arg_type=CLIArgumentType(options_list=['--type-properties-environ'
                   'ment-url'], help='The URL of Salesforce instance. Default is \'https://login.salesforce.com\'. To c'
                   'opy data from sandbox, specify \'https://test.salesforce.com\'. To copy data from custom domain, sp'
                   'ecify, for example, \'https://[domain].my.salesforce.com\'. Type: string (or Expression with result'
                   'Type string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username for Basic authentication of the Salesforce instance. Type: string (or Expression '
                   'with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication of the Salesforce instance.'))
        c.argument('type_properties_security_token', arg_type=CLIArgumentType(options_list=['--type-properties-security'
                   '-token'], help='The security token is optional to remotely access Salesforce instance.'))
        c.argument('type_properties_api_version', arg_type=CLIArgumentType(options_list=['--type-properties-api-version'
                   ''], help='The Salesforce API version used in ADF. Type: string (or Expression with resultType strin'
                   'g).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service salesforce-marketing-cloud create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with the Salesforce Marketing Cloud application. Type: s'
                   'tring (or Expression with resultType string).'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true. Type: '
                   'boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service salesforce-marketing-cloud update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with the Salesforce Marketing Cloud application. Type: s'
                   'tring (or Expression with resultType string).'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true. Type: '
                   'boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service salesforce-service-cloud create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_environment_url', arg_type=CLIArgumentType(options_list=['--type-properties-environ'
                   'ment-url'], help='The URL of Salesforce Service Cloud instance. Default is \'https://login.salesfor'
                   'ce.com\'. To copy data from sandbox, specify \'https://test.salesforce.com\'. To copy data from cus'
                   'tom domain, specify, for example, \'https://[domain].my.salesforce.com\'. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username for Basic authentication of the Salesforce instance. Type: string (or Expression '
                   'with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication of the Salesforce instance.'))
        c.argument('type_properties_security_token', arg_type=CLIArgumentType(options_list=['--type-properties-security'
                   '-token'], help='The security token is optional to remotely access Salesforce instance.'))
        c.argument('type_properties_api_version', arg_type=CLIArgumentType(options_list=['--type-properties-api-version'
                   ''], help='The Salesforce API version used in ADF. Type: string (or Expression with resultType strin'
                   'g).'))
        c.argument('type_properties_extended_properties', arg_type=CLIArgumentType(options_list=['--type-properties-ext'
                   'ended-properties'], help='Extended properties appended to the connection string. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service salesforce-service-cloud update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_environment_url', arg_type=CLIArgumentType(options_list=['--type-properties-environ'
                   'ment-url'], help='The URL of Salesforce Service Cloud instance. Default is \'https://login.salesfor'
                   'ce.com\'. To copy data from sandbox, specify \'https://test.salesforce.com\'. To copy data from cus'
                   'tom domain, specify, for example, \'https://[domain].my.salesforce.com\'. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username for Basic authentication of the Salesforce instance. Type: string (or Expression '
                   'with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication of the Salesforce instance.'))
        c.argument('type_properties_security_token', arg_type=CLIArgumentType(options_list=['--type-properties-security'
                   '-token'], help='The security token is optional to remotely access Salesforce instance.'))
        c.argument('type_properties_api_version', arg_type=CLIArgumentType(options_list=['--type-properties-api-version'
                   ''], help='The Salesforce API version used in ADF. Type: string (or Expression with resultType strin'
                   'g).'))
        c.argument('type_properties_extended_properties', arg_type=CLIArgumentType(options_list=['--type-properties-ext'
                   'ended-properties'], help='Extended properties appended to the connection string. Type: string (or E'
                   'xpression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sap-b-w create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP BW instance. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_system_number', arg_type=CLIArgumentType(options_list=['--type-properties-system-nu'
                   'mber'], help='System number of the BW system. (Usually a two-digit decimal number represented as a '
                   'string.) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Client ID of the client on the BW system. (Usually a three-digit decimal number represented as'
                   ' a string) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP BW server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP BW server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service sap-b-w update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP BW instance. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_system_number', arg_type=CLIArgumentType(options_list=['--type-properties-system-nu'
                   'mber'], help='System number of the BW system. (Usually a two-digit decimal number represented as a '
                   'string.) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Client ID of the client on the BW system. (Usually a three-digit decimal number represented as'
                   ' a string) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP BW server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP BW server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sap-cloud-for-customer create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The UR'
                   'L of SAP Cloud for Customer OData API. For example, \'[https://[tenantname].crm.ondemand.com/sap/c4'
                   'c/odata/v1]\'. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Either encryptedCredential or username/passw'
                   'ord must be provided. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory linked-service sap-cloud-for-customer update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', arg_type=CLIArgumentType(options_list=['--type-properties-url'], help='The UR'
                   'L of SAP Cloud for Customer OData API. For example, \'[https://[tenantname].crm.ondemand.com/sap/c4'
                   'c/odata/v1]\'. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The username for Basic authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Either encryptedCredential or username/passw'
                   'ord must be provided. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sap-ecc create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', help='The URL of SAP ECC OData API. For example, \'[https://hostname:port/sap'
                   '/opu/odata/sap/servicename/]\'. Type: string (or Expression with resultType string).')
        c.argument('type_properties_username', help='The username for Basic authentication. Type: string (or Expression'
                   ' with resultType string).')
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Either encryptedCredential '
                   'or username/password must be provided. Type: string (or Expression with resultType string).')

    with self.argument_context('datafactory linked-service sap-ecc update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_url', help='The URL of SAP ECC OData API. For example, \'[https://hostname:port/sap'
                   '/opu/odata/sap/servicename/]\'. Type: string (or Expression with resultType string).')
        c.argument('type_properties_username', help='The username for Basic authentication. Type: string (or Expression'
                   ' with resultType string).')
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', help='The encrypted credential used for authentication. Cred'
                   'entials are encrypted using the integration runtime credential manager. Either encryptedCredential '
                   'or username/password must be provided. Type: string (or Expression with resultType string).')
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sap-hana create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultS'
                   'ecretReference.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP HANA server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Windows']), help='The authe'
                   'ntication type to be used to connect to the SAP HANA server.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP HANA server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP HANA server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service sap-hana update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultS'
                   'ecretReference.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP HANA server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Windows']), help='The authe'
                   'ntication type to be used to connect to the SAP HANA server.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP HANA server. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP HANA server.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sap-open-hub create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expres'
                   'sion with resultType string).'))
        c.argument('type_properties_system_number', arg_type=CLIArgumentType(options_list=['--type-properties-system-nu'
                   'mber'], help='System number of the BW system where the open hub destination is located. (Usually a '
                   'two-digit decimal number represented as a string.) Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Client ID of the client on the BW system where the open hub destination is located. (Usually a'
                   ' three-digit decimal number represented as a string) Type: string (or Expression with resultType st'
                   'ring).'))
        c.argument('type_properties_language', arg_type=CLIArgumentType(options_list=['--type-properties-language'],
                   help='Language of the BW system where the open hub destination is located. The default value is EN. '
                   'Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP BW server where the open hub destination is located. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP BW server where the open hub destination is located.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service sap-open-hub update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expres'
                   'sion with resultType string).'))
        c.argument('type_properties_system_number', arg_type=CLIArgumentType(options_list=['--type-properties-system-nu'
                   'mber'], help='System number of the BW system where the open hub destination is located. (Usually a '
                   'two-digit decimal number represented as a string.) Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Client ID of the client on the BW system where the open hub destination is located. (Usually a'
                   ' three-digit decimal number represented as a string) Type: string (or Expression with resultType st'
                   'ring).'))
        c.argument('type_properties_language', arg_type=CLIArgumentType(options_list=['--type-properties-language'],
                   help='Language of the BW system where the open hub destination is located. The default value is EN. '
                   'Type: string (or Expression with resultType string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP BW server where the open hub destination is located. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP BW server where the open hub destination is located.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sap-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP instance where the table is located. Type: string (or Expression with resultTy'
                   'pe string).'))
        c.argument('type_properties_system_number', arg_type=CLIArgumentType(options_list=['--type-properties-system-nu'
                   'mber'], help='System number of the SAP system where the table is located. (Usually a two-digit deci'
                   'mal number represented as a string.) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Client ID of the client on the SAP system where the table is located. (Usually a three-digit d'
                   'ecimal number represented as a string) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_language', arg_type=CLIArgumentType(options_list=['--type-properties-language'],
                   help='Language of the SAP system where the table is located. The default value is EN. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_system_id', arg_type=CLIArgumentType(options_list=['--type-properties-system-id'],
                   help='SystemID of the SAP system where the table is located. Type: string (or Expression with result'
                   'Type string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP server where the table is located. Type: string (or Expression with'
                   ' resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP server where the table is located.'))
        c.argument('type_properties_message_server', arg_type=CLIArgumentType(options_list=['--type-properties-message-'
                   'server'], help='The hostname of the SAP Message Server. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_message_server_service', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'message-server-service'], help='The service name or port number of the Message Server. Type: string'
                   ' (or Expression with resultType string).'))
        c.argument('type_properties_snc_mode', arg_type=CLIArgumentType(options_list=['--type-properties-snc-mode'],
                   help='SNC activation indicator to access the SAP server where the table is located. Must be either 0'
                   ' (off) or 1 (on). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_snc_my_name', arg_type=CLIArgumentType(options_list=['--type-properties-snc-my-name'
                   ''], help='Initiator\'s SNC name to access the SAP server where the table is located. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_snc_partner_name', arg_type=CLIArgumentType(options_list=['--type-properties-snc-pa'
                   'rtner-name'], help='Communication partner\'s SNC name to access the SAP server where the table is l'
                   'ocated. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_snc_library_path', arg_type=CLIArgumentType(options_list=['--type-properties-snc-li'
                   'brary-path'], help='External security product\'s library to access the SAP server where the table i'
                   's located. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_snc_qop', arg_type=CLIArgumentType(options_list=['--type-properties-snc-qop'],
                   help='SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression w'
                   'ith resultType string).'))
        c.argument('type_properties_logon_group', arg_type=CLIArgumentType(options_list=['--type-properties-logon-group'
                   ''],
                   help='The Logon Group for the SAP System. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service sap-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Host name of the SAP instance where the table is located. Type: string (or Expression with resultTy'
                   'pe string).'))
        c.argument('type_properties_system_number', arg_type=CLIArgumentType(options_list=['--type-properties-system-nu'
                   'mber'], help='System number of the SAP system where the table is located. (Usually a two-digit deci'
                   'mal number represented as a string.) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='Client ID of the client on the SAP system where the table is located. (Usually a three-digit d'
                   'ecimal number represented as a string) Type: string (or Expression with resultType string).'))
        c.argument('type_properties_language', arg_type=CLIArgumentType(options_list=['--type-properties-language'],
                   help='Language of the SAP system where the table is located. The default value is EN. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_system_id', arg_type=CLIArgumentType(options_list=['--type-properties-system-id'],
                   help='SystemID of the SAP system where the table is located. Type: string (or Expression with result'
                   'Type string).'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='Username to access the SAP server where the table is located. Type: string (or Expression with'
                   ' resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to access the SAP server where the table is located.'))
        c.argument('type_properties_message_server', arg_type=CLIArgumentType(options_list=['--type-properties-message-'
                   'server'], help='The hostname of the SAP Message Server. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_message_server_service', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'message-server-service'], help='The service name or port number of the Message Server. Type: string'
                   ' (or Expression with resultType string).'))
        c.argument('type_properties_snc_mode', arg_type=CLIArgumentType(options_list=['--type-properties-snc-mode'],
                   help='SNC activation indicator to access the SAP server where the table is located. Must be either 0'
                   ' (off) or 1 (on). Type: string (or Expression with resultType string).'))
        c.argument('type_properties_snc_my_name', arg_type=CLIArgumentType(options_list=['--type-properties-snc-my-name'
                   ''], help='Initiator\'s SNC name to access the SAP server where the table is located. Type: string ('
                   'or Expression with resultType string).'))
        c.argument('type_properties_snc_partner_name', arg_type=CLIArgumentType(options_list=['--type-properties-snc-pa'
                   'rtner-name'], help='Communication partner\'s SNC name to access the SAP server where the table is l'
                   'ocated. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_snc_library_path', arg_type=CLIArgumentType(options_list=['--type-properties-snc-li'
                   'brary-path'], help='External security product\'s library to access the SAP server where the table i'
                   's located. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_snc_qop', arg_type=CLIArgumentType(options_list=['--type-properties-snc-qop'],
                   help='SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression w'
                   'ith resultType string).'))
        c.argument('type_properties_logon_group', arg_type=CLIArgumentType(options_list=['--type-properties-logon-group'
                   ''],
                   help='The Logon Group for the SAP System. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service service-now create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the ServiceNow server. (i.e. :code:`<instance>`.service-now.com)'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'OAuth2']), help='The authen'
                   'tication type to use.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name for Basic and OAuth2 authentication.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client id for OAuth2 authentication.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret for OAuth2 authentication.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service service-now update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the ServiceNow server. (i.e. :code:`<instance>`.service-now.com)'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'OAuth2']), help='The authen'
                   'tication type to use.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name for Basic and OAuth2 authentication.'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client id for OAuth2 authentication.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret for OAuth2 authentication.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sftp create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'SFTP server host name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Ty'
                   'pe: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'SshPublicKey']), help='The '
                   'authentication type to be used to connect to the FTP server.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='The username used to log on to the SFTP server. Type: string (or Expression with resultType st'
                   'ring).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the SFTP server for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_private_key_path', arg_type=CLIArgumentType(options_list=['--type-properties-privat'
                   'e-key-path'], help='The SSH private key file path for SshPublicKey authentication. Only valid for o'
                   'n-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or Pr'
                   'ivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_private_key_content', arg_type=CLIArgumentType(options_list=['--type-properties-pri'
                   'vate-key-content'], help='Base64 encoded SSH private key content for SshPublicKey authentication. F'
                   'or on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent sh'
                   'ould be specified. SSH private key should be OpenSSH format.'))
        c.argument('type_properties_pass_phrase', arg_type=CLIArgumentType(options_list=['--type-properties-pass-phrase'
                   ''], help='The password to decrypt the SSH private key if the SSH private key is encrypted.'))
        c.argument('type_properties_skip_host_key_validation', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-skip-host-key-validation'], help='If true, skip the SSH host key validation. Default value is fal'
                   'se. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_host_key_fingerprint', arg_type=CLIArgumentType(options_list=['--type-properties-ho'
                   'st-key-fingerprint'], help='The host key finger-print of the SFTP server. When SkipHostKeyValidatio'
                   'n is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType str'
                   'ing).'))

    with self.argument_context('datafactory linked-service sftp update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'SFTP server host name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Ty'
                   'pe: integer (or Expression with resultType integer), minimum: 0.'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'SshPublicKey']), help='The '
                   'authentication type to be used to connect to the FTP server.')
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='The username used to log on to the SFTP server. Type: string (or Expression with resultType st'
                   'ring).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password to logon the SFTP server for Basic authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_private_key_path', arg_type=CLIArgumentType(options_list=['--type-properties-privat'
                   'e-key-path'], help='The SSH private key file path for SshPublicKey authentication. Only valid for o'
                   'n-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or Pr'
                   'ivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_private_key_content', arg_type=CLIArgumentType(options_list=['--type-properties-pri'
                   'vate-key-content'], help='Base64 encoded SSH private key content for SshPublicKey authentication. F'
                   'or on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent sh'
                   'ould be specified. SSH private key should be OpenSSH format.'))
        c.argument('type_properties_pass_phrase', arg_type=CLIArgumentType(options_list=['--type-properties-pass-phrase'
                   ''], help='The password to decrypt the SSH private key if the SSH private key is encrypted.'))
        c.argument('type_properties_skip_host_key_validation', arg_type=CLIArgumentType(options_list=['--type-propertie'
                   's-skip-host-key-validation'], help='If true, skip the SSH host key validation. Default value is fal'
                   'se. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_host_key_fingerprint', arg_type=CLIArgumentType(options_list=['--type-properties-ho'
                   'st-key-fingerprint'], help='The host key finger-print of the SFTP server. When SkipHostKeyValidatio'
                   'n is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType str'
                   'ing).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service shopify create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'endpoint of the Shopify server. (i.e. mystore.myshopify.com)'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The API access token that can be used to access Shopify’s data. The token won\'t expire'
                   ' if it is offline mode.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service shopify update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'endpoint of the Shopify server. (i.e. mystore.myshopify.com)'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The API access token that can be used to access Shopify’s data. The token won\'t expire'
                   ' if it is offline mode.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service snowflake create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string of snowflake. Type: string, SecureString.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service snowflake update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string of snowflake. Type: string, SecureString.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The Azure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service spark create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='IP a'
                   'ddress or host name of the Spark server'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Spark server uses to listen for client connections.'))
        c.argument('type_properties_server_type', arg_type=get_enum_type(['SharkServer', 'SharkServer2', 'SparkThriftSe'
                   'rver']), help='The type of Spark server.')
        c.argument('type_properties_thrift_transport_protocol', arg_type=get_enum_type(['Binary', 'SASL', 'HTTP ']),
                   help='The transport protocol to use in the Thrift layer.')
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Username', 'UsernameAnd'
                   'Password', 'WindowsAzureHDInsightService']), help='The authentication method used to access the Spa'
                   'rk server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Spark Server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the Username field'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the Spark server.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service spark update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='IP a'
                   'ddress or host name of the Spark server'))
        c.argument('type_properties_port', arg_type=CLIArgumentType(options_list=['--type-properties-port'], help='The '
                   'TCP port that the Spark server uses to listen for client connections.'))
        c.argument('type_properties_server_type', arg_type=get_enum_type(['SharkServer', 'SharkServer2', 'SparkThriftSe'
                   'rver']), help='The type of Spark server.')
        c.argument('type_properties_thrift_transport_protocol', arg_type=get_enum_type(['Binary', 'SASL', 'HTTP ']),
                   help='The transport protocol to use in the Thrift layer.')
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Anonymous', 'Username', 'UsernameAnd'
                   'Password', 'WindowsAzureHDInsightService']), help='The authentication method used to access the Spa'
                   'rk server.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='The user name that you use to access Spark Server.'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The password corresponding to the user name that you provided in the Username field'))
        c.argument('type_properties_http_path', arg_type=CLIArgumentType(options_list=['--type-properties-http-path'],
                   help='The partial URL corresponding to the Spark server.'))
        c.argument('type_properties_enable_ssl',
                   arg_type=CLIArgumentType(options_list=['--type-properties-enable-ssl'], help='Specifies whether the '
                   'connections to the server are encrypted using SSL. The default value is false.'))
        c.argument('type_properties_trusted_cert_path', arg_type=CLIArgumentType(options_list=['--type-properties-trust'
                   'ed-cert-path'], help='The full path of the .pem file containing trusted CA certificates for verifyi'
                   'ng the server when connecting over SSL. This property can only be set when using SSL on self-hosted'
                   ' IR. The default value is the cacerts.pem file installed with the IR.'))
        c.argument('type_properties_use_system_trust_store', arg_type=CLIArgumentType(options_list=['--type-properties-'
                   'use-system-trust-store'], help='Specifies whether to use a CA certificate from the system trust sto'
                   're or from a specified PEM file. The default value is false.'))
        c.argument('type_properties_allow_host_name_cnmismatch', arg_type=CLIArgumentType(options_list=['--type-propert'
                   'ies-allow-host-name-cnmismatch'], help='Specifies whether to require a CA-issued SSL certificate na'
                   'me to match the host name of the server when connecting over SSL. The default value is false.'))
        c.argument('type_properties_allow_self_signed_server_cert', arg_type=CLIArgumentType(options_list=['--type-prop'
                   'erties-allow-self-signed-server-cert'], help='Specifies whether to allow self-signed certificates f'
                   'rom the server. The default value is false.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sql-server create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='The on-premises Windows authentication user name. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The on-premises Windows authentication password.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service sql-server update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='The connection string. Type: string, SecureString or AzureKeyVaultSecretRefer'
                   'ence.'))
        c.argument('type_properties_user_name', arg_type=CLIArgumentType(options_list=['--type-properties-user-name'],
                   help='The on-premises Windows authentication user name. Type: string (or Expression with resultType '
                   'string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='The on-premises Windows authentication password.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service square create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the Square instance. (i.e. mystore.mysquare.com)'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with your Square application.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with your Square application.'))
        c.argument('type_properties_redirect_uri', arg_type=CLIArgumentType(options_list=['--type-properties-redirect-u'
                   'ri'], help='The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2'
                   '500)'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service square update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'URL of the Square instance. (i.e. mystore.mysquare.com)'))
        c.argument('type_properties_client_id', arg_type=CLIArgumentType(options_list=['--type-properties-client-id'],
                   help='The client ID associated with your Square application.'))
        c.argument('type_properties_client_secret', arg_type=CLIArgumentType(options_list=['--type-properties-client-se'
                   'cret'], help='The client secret associated with your Square application.'))
        c.argument('type_properties_redirect_uri', arg_type=CLIArgumentType(options_list=['--type-properties-redirect-u'
                   'ri'], help='The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2'
                   '500)'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service sybase create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Server name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='Database name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'Schema name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Windows']), help='Authentic'
                   'ationType to be used for connection.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service sybase update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Server name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='Database name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'Schema name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Windows']), help='Authentic'
                   'ationType to be used for connection.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service teradata create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultS'
                   'ecretReference.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Server name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Windows']), help='Authentic'
                   'ationType to be used for connection.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service teradata update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultS'
                   'ecretReference.'))
        c.argument('type_properties_server', arg_type=CLIArgumentType(options_list=['--type-properties-server'], help=
                   'Server name for connection. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_authentication_type', arg_type=get_enum_type(['Basic', 'Windows']), help='Authentic'
                   'ationType to be used for connection.')
        c.argument('type_properties_username', arg_type=CLIArgumentType(options_list=['--type-properties-username'],
                   help='Username for authentication. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_password', arg_type=CLIArgumentType(options_list=['--type-properties-password'],
                   help='Password for authentication.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service vertica create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service vertica update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_connection_string', arg_type=CLIArgumentType(options_list=['--type-properties-conne'
                   'ction-string'], help='An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretR'
                   'eference.'))
        c.argument('type_properties_pwd', arg_type=CLIArgumentType(options_list=['--type-properties-pwd'], help='The Az'
                   'ure key vault secret reference of password in connection string.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service web create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties', arg_type=CLIArgumentType(options_list=['--type-properties'], help='Web linked ser'
                   'vice properties.'))

    with self.argument_context('datafactory linked-service web update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties', arg_type=CLIArgumentType(options_list=['--type-properties'], help='Web linked ser'
                   'vice properties.'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service xero create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'endpoint of the Xero server. (i.e. api.xero.com)'))
        c.argument('type_properties_consumer_key', arg_type=CLIArgumentType(options_list=['--type-properties-consumer-k'
                   'ey'], help='The consumer key associated with the Xero application.'))
        c.argument('type_properties_private_key', arg_type=CLIArgumentType(options_list=['--type-properties-private-key'
                   ''], help='The private key from the .pem file that was generated for your Xero private application. '
                   'You must include all the text from the .pem file, including the Unix line endings( ).'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service xero update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_host', arg_type=CLIArgumentType(options_list=['--type-properties-host'], help='The '
                   'endpoint of the Xero server. (i.e. api.xero.com)'))
        c.argument('type_properties_consumer_key', arg_type=CLIArgumentType(options_list=['--type-properties-consumer-k'
                   'ey'], help='The consumer key associated with the Xero application.'))
        c.argument('type_properties_private_key', arg_type=CLIArgumentType(options_list=['--type-properties-private-key'
                   ''], help='The private key from the .pem file that was generated for your Xero private application. '
                   'You must include all the text from the .pem file, including the Unix line endings( ).'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service zoho create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token for Zoho authentication.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))

    with self.argument_context('datafactory linked-service zoho update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')
        c.argument('if_match', help='ETag of the linkedService entity.  Should only be specified for update, for which '
                   'it should match existing entity or can be * for unconditional update.')
        c.argument('connect_via', arg_type=CLIArgumentType(options_list=['--connect-via'], help='The integration runtim'
                   'e reference.'))
        c.argument('description', help='Linked service description.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters for linked se'
                   'rvice.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the linked service.'))
        c.argument('type_properties_endpoint', arg_type=CLIArgumentType(options_list=['--type-properties-endpoint'],
                   help='The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)'))
        c.argument('type_properties_access_token', arg_type=CLIArgumentType(options_list=['--type-properties-access-tok'
                   'en'], help='The access token for Zoho authentication.'))
        c.argument('type_properties_use_encrypted_endpoints', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-use-encrypted-endpoints'], help='Specifies whether the data source endpoints are encrypted using H'
                   'TTPS. The default value is true.'))
        c.argument('type_properties_use_host_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-host-verification'], help='Specifies whether to require the host name in the server\'s certifica'
                   'te to match the host name of the server when connecting over SSL. The default value is true.'))
        c.argument('type_properties_use_peer_verification', arg_type=CLIArgumentType(options_list=['--type-properties-u'
                   'se-peer-verification'], help='Specifies whether to verify the identity of the server when connectin'
                   'g over SSL. The default value is true.'))
        c.argument('type_properties_encrypted_credential', arg_type=CLIArgumentType(options_list=['--type-properties-en'
                   'crypted-credential'], help='The encrypted credential used for authentication. Credentials are encry'
                   'pted using the integration runtime credential manager. Type: string (or Expression with resultType '
                   'string).'))
        c.ignore('properties')

    with self.argument_context('datafactory linked-service delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('linked_service_name', help='The linked service name.')

    with self.argument_context('datafactory dataset list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory dataset show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_none_match', help='ETag of the dataset entity. Should only be specified for get. If the ETag mat'
                   'ches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory dataset amazon-m-w-s-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset amazon-m-w-s-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset amazon-redshift-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e Amazon Redshift table name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The Amazon Redshift schema name. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset amazon-redshift-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e Amazon Redshift table name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The Amazon Redshift schema name. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset amazon-s3-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_bucket_name', arg_type=CLIArgumentType(options_list=['--type-properties-bucket-name'
                   ''],
                   help='The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_key', arg_type=CLIArgumentType(options_list=['--type-properties-key'], help='The ke'
                   'y of the Amazon S3 object. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_prefix', arg_type=CLIArgumentType(options_list=['--type-properties-prefix'], help=
                   'The prefix filter for the S3 object name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_version', arg_type=CLIArgumentType(options_list=['--type-properties-version'],
                   help='The version for the S3 object. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_modified_datetime_start', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-modified-datetime-start'], help='The start of S3 object\'s modified datetime. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_modified_datetime_end', arg_type=CLIArgumentType(options_list=['--type-properties-m'
                   'odified-datetime-end'], help='The end of S3 object\'s modified datetime. Type: string (or Expressio'
                   'n with resultType string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of files.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset amazon-s3-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_bucket_name', arg_type=CLIArgumentType(options_list=['--type-properties-bucket-name'
                   ''],
                   help='The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_key', arg_type=CLIArgumentType(options_list=['--type-properties-key'], help='The ke'
                   'y of the Amazon S3 object. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_prefix', arg_type=CLIArgumentType(options_list=['--type-properties-prefix'], help=
                   'The prefix filter for the S3 object name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_version', arg_type=CLIArgumentType(options_list=['--type-properties-version'],
                   help='The version for the S3 object. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_modified_datetime_start', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-modified-datetime-start'], help='The start of S3 object\'s modified datetime. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_modified_datetime_end', arg_type=CLIArgumentType(options_list=['--type-properties-m'
                   'odified-datetime-end'], help='The end of S3 object\'s modified datetime. Type: string (or Expressio'
                   'n with resultType string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of files.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset avro create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the avro storage.'))
        c.argument('type_properties_avro_compression_codec', arg_type=get_enum_type(['none', 'deflate', 'snappy', 'xz',
                    'bzip2']), help='')
        c.argument('type_properties_avro_compression_level', help='')

    with self.argument_context('datafactory dataset avro update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the avro storage.'))
        c.argument('type_properties_avro_compression_codec', arg_type=get_enum_type(['none', 'deflate', 'snappy', 'xz',
                    'bzip2']), help='')
        c.argument('type_properties_avro_compression_level', help='')
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-blob create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''],
                   help='The path of the Azure Blob storage. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table_root_location', arg_type=CLIArgumentType(options_list=['--type-properties-tab'
                   'le-root-location'], help='The root of blob path. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the Azure Blob. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_modified_datetime_start', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-modified-datetime-start'], help='The start of Azure Blob\'s modified datetime. Type: string (or Ex'
                   'pression with resultType string).'))
        c.argument('type_properties_modified_datetime_end', arg_type=CLIArgumentType(options_list=['--type-properties-m'
                   'odified-datetime-end'], help='The end of Azure Blob\'s modified datetime. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the Azure Blob storage.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset azure-blob update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''],
                   help='The path of the Azure Blob storage. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table_root_location', arg_type=CLIArgumentType(options_list=['--type-properties-tab'
                   'le-root-location'], help='The root of blob path. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the Azure Blob. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_modified_datetime_start', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-modified-datetime-start'], help='The start of Azure Blob\'s modified datetime. Type: string (or Ex'
                   'pression with resultType string).'))
        c.argument('type_properties_modified_datetime_end', arg_type=CLIArgumentType(options_list=['--type-properties-m'
                   'odified-datetime-end'], help='The end of Azure Blob\'s modified datetime. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the Azure Blob storage.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-blob-f-s-file create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''], help='The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with re'
                   'sultType string).'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the Azure Data Lake Storage Gen2 storage.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset azure-blob-f-s-file update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''], help='The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with re'
                   'sultType string).'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the Azure Data Lake Storage Gen2 storage.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-data-explorer-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure Data Explorer database. Type: string (or Expression with resultType strin'
                   'g).'))

    with self.argument_context('datafactory dataset azure-data-explorer-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure Data Explorer database. Type: string (or Expression with resultType strin'
                   'g).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-data-lake-store-file create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''], help='Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultT'
                   'ype string).'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the Data Lake Store.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset azure-data-lake-store-file update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''], help='Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultT'
                   'ype string).'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType'
                   ' string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the Data Lake Store.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-maria-d-b-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset azure-maria-d-b-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-my-sql-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Azure MySQL databa'
                   'se table name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e name of Azure MySQL database table. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset azure-my-sql-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Azure MySQL databa'
                   'se table name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e name of Azure MySQL database table. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-postgre-sql-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name of the '
                   'Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with re'
                   'sultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).'
                   ''))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure PostgreSQL database. Type: string (or Expression with resultType strin'
                   'g).'))

    with self.argument_context('datafactory dataset azure-postgre-sql-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name of the '
                   'Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with re'
                   'sultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).'
                   ''))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure PostgreSQL database. Type: string (or Expression with resultType strin'
                   'g).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-search-index create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_index_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-index-name'], help='The name of the Azure '
                   'Search Index. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset azure-search-index update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_index_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-index-name'], help='The name of the Azure '
                   'Search Index. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-sql-d-w-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset azure-sql-d-w-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string'
                   ').'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-sql-m-i-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure SQL Managed Instance. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType'
                   ' string).'))

    with self.argument_context('datafactory dataset azure-sql-m-i-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure SQL Managed Instance. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType'
                   ' string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-sql-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure SQL database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure SQL database. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset azure-sql-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Azure SQL database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Azure SQL database. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset azure-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name of the '
                   'Azure Table storage. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset azure-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name of the '
                   'Azure Table storage. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset binary create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the Binary storage.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset binary update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the Binary storage.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset cassandra-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name of the '
                   'Cassandra database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_keyspace', arg_type=CLIArgumentType(options_list=['--type-properties-keyspace'],
                   help='The keyspace of the Cassandra database. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset cassandra-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name of the '
                   'Cassandra database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_keyspace', arg_type=CLIArgumentType(options_list=['--type-properties-keyspace'],
                   help='The keyspace of the Cassandra database. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset common-data-service-for-apps-entity create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_entity_name', arg_type=CLIArgumentType(options_list=['--type-properties-entity-name'
                   ''], help='The logical name of the entity. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset common-data-service-for-apps-entity update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_entity_name', arg_type=CLIArgumentType(options_list=['--type-properties-entity-name'
                   ''], help='The logical name of the entity. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset concur-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset concur-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset cosmos-db-mongo-db-api-collection create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection',
                   arg_type=CLIArgumentType(options_list=['--type-properties-collection'], help='The collection name of'
                   ' the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset cosmos-db-mongo-db-api-collection update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection',
                   arg_type=CLIArgumentType(options_list=['--type-properties-collection'], help='The collection name of'
                   ' the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset cosmos-db-sql-api-collection create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('properties', arg_type=CLIArgumentType(options_list=['--properties'], help='Dataset properties.'))

    with self.argument_context('datafactory dataset cosmos-db-sql-api-collection update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('properties', arg_type=CLIArgumentType(options_list=['--properties'], help='Dataset properties.'))

    with self.argument_context('datafactory dataset couchbase-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset couchbase-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset custom-dataset create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties', arg_type=CLIArgumentType(options_list=['--type-properties'], help='Custom dataset'
                   ' properties.'))

    with self.argument_context('datafactory dataset custom-dataset update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties', arg_type=CLIArgumentType(options_list=['--type-properties'], help='Custom dataset'
                   ' properties.'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset db2-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The Db2 schema name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e Db2 table name. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset db2-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The Db2 schema name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e Db2 table name. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset delimited-text create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the delimited text storage.'))
        c.argument('type_properties_column_delimiter', arg_type=CLIArgumentType(options_list=['--type-properties-column'
                   '-delimiter'], help='The column delimiter. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_row_delimiter', arg_type=CLIArgumentType(options_list=['--type-properties-row-delim'
                   'iter'], help='The row delimiter. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encoding_name', arg_type=CLIArgumentType(options_list=['--type-properties-encoding-'
                   'name'], help='The code page name of the preferred encoding. If miss, the default value is UTF-8, un'
                   'less BOM denotes another Unicode encoding. Refer to the name column of the table in the following l'
                   'ink to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: st'
                   'ring (or Expression with resultType string).'))
        c.argument('type_properties_compression_codec', arg_type=get_enum_type(['none', 'gzip', 'snappy', 'lzo', 'bzip2'
                   '', 'deflate', 'zipDeflate', 'lz4']), help='')
        c.argument('type_properties_compression_level', arg_type=get_enum_type(['Optimal', 'Fastest']), help='The data '
                   'compression method used for DelimitedText.')
        c.argument('type_properties_quote_char',
                   arg_type=CLIArgumentType(options_list=['--type-properties-quote-char'], help='The quote character. T'
                   'ype: string (or Expression with resultType string).'))
        c.argument('type_properties_escape_char', arg_type=CLIArgumentType(options_list=['--type-properties-escape-char'
                   ''], help='The escape character. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_first_row_as_header', arg_type=CLIArgumentType(options_list=['--type-properties-fir'
                   'st-row-as-header'], help='When used as input, treat the first row of data as headers. When used as '
                   'output,write the headers into the output as the first row of data. The default value is false. Type'
                   ': boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_null_value',
                   arg_type=CLIArgumentType(options_list=['--type-properties-null-value'], help='The null value string.'
                   ' Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset delimited-text update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the delimited text storage.'))
        c.argument('type_properties_column_delimiter', arg_type=CLIArgumentType(options_list=['--type-properties-column'
                   '-delimiter'], help='The column delimiter. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_row_delimiter', arg_type=CLIArgumentType(options_list=['--type-properties-row-delim'
                   'iter'], help='The row delimiter. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_encoding_name', arg_type=CLIArgumentType(options_list=['--type-properties-encoding-'
                   'name'], help='The code page name of the preferred encoding. If miss, the default value is UTF-8, un'
                   'less BOM denotes another Unicode encoding. Refer to the name column of the table in the following l'
                   'ink to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: st'
                   'ring (or Expression with resultType string).'))
        c.argument('type_properties_compression_codec', arg_type=get_enum_type(['none', 'gzip', 'snappy', 'lzo', 'bzip2'
                   '', 'deflate', 'zipDeflate', 'lz4']), help='')
        c.argument('type_properties_compression_level', arg_type=get_enum_type(['Optimal', 'Fastest']), help='The data '
                   'compression method used for DelimitedText.')
        c.argument('type_properties_quote_char',
                   arg_type=CLIArgumentType(options_list=['--type-properties-quote-char'], help='The quote character. T'
                   'ype: string (or Expression with resultType string).'))
        c.argument('type_properties_escape_char', arg_type=CLIArgumentType(options_list=['--type-properties-escape-char'
                   ''], help='The escape character. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_first_row_as_header', arg_type=CLIArgumentType(options_list=['--type-properties-fir'
                   'st-row-as-header'], help='When used as input, treat the first row of data as headers. When used as '
                   'output,write the headers into the output as the first row of data. The default value is false. Type'
                   ': boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_null_value',
                   arg_type=CLIArgumentType(options_list=['--type-properties-null-value'], help='The null value string.'
                   ' Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset document-db-collection create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection_name', arg_type=CLIArgumentType(options_list=['--type-properties-collect'
                   'ion-name'], help='Document Database collection name. Type: string (or Expression with resultType st'
                   'ring).'))

    with self.argument_context('datafactory dataset document-db-collection update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection_name', arg_type=CLIArgumentType(options_list=['--type-properties-collect'
                   'ion-name'], help='Document Database collection name. Type: string (or Expression with resultType st'
                   'ring).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset drill-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Drill. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Drill. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset drill-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Drill. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Drill. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset dynamics-a-x-resource create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset dynamics-a-x-resource update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset dynamics-crm-entity create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_entity_name', arg_type=CLIArgumentType(options_list=['--type-properties-entity-name'
                   ''], help='The logical name of the entity. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset dynamics-crm-entity update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_entity_name', arg_type=CLIArgumentType(options_list=['--type-properties-entity-name'
                   ''], help='The logical name of the entity. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset dynamics-entity create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_entity_name', arg_type=CLIArgumentType(options_list=['--type-properties-entity-name'
                   ''], help='The logical name of the entity. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset dynamics-entity update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_entity_name', arg_type=CLIArgumentType(options_list=['--type-properties-entity-name'
                   ''], help='The logical name of the entity. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset eloqua-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset eloqua-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset file-share create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''], help='The path of the on-premises file system. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the on-premises file system. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_modified_datetime_start', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-modified-datetime-start'], help='The start of file\'s modified datetime. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_modified_datetime_end', arg_type=CLIArgumentType(options_list=['--type-properties-m'
                   'odified-datetime-end'], help='The end of file\'s modified datetime. Type: string (or Expression wit'
                   'h resultType string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the files.'))
        c.argument('type_properties_file_filter', arg_type=CLIArgumentType(options_list=['--type-properties-file-filter'
                   ''], help='Specify a filter to be used to select a subset of files in the folderPath rather than all'
                   ' files. Type: string (or Expression with resultType string).'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset file-share update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_folder_path', arg_type=CLIArgumentType(options_list=['--type-properties-folder-path'
                   ''], help='The path of the on-premises file system. Type: string (or Expression with resultType stri'
                   'ng).'))
        c.argument('type_properties_file_name', arg_type=CLIArgumentType(options_list=['--type-properties-file-name'],
                   help='The name of the on-premises file system. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_modified_datetime_start', arg_type=CLIArgumentType(options_list=['--type-properties'
                   '-modified-datetime-start'], help='The start of file\'s modified datetime. Type: string (or Expressi'
                   'on with resultType string).'))
        c.argument('type_properties_modified_datetime_end', arg_type=CLIArgumentType(options_list=['--type-properties-m'
                   'odified-datetime-end'], help='The end of file\'s modified datetime. Type: string (or Expression wit'
                   'h resultType string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of the files.'))
        c.argument('type_properties_file_filter', arg_type=CLIArgumentType(options_list=['--type-properties-file-filter'
                   ''], help='Specify a filter to be used to select a subset of files in the folderPath rather than all'
                   ' files. Type: string (or Expression with resultType string).'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset google-ad-words-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset google-ad-words-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset google-big-query-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using database + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Google BigQuery. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_dataset', arg_type=CLIArgumentType(options_list=['--type-properties-dataset'],
                   help='The database name of the Google BigQuery. Type: string (or Expression with resultType string).'
                   ''))

    with self.argument_context('datafactory dataset google-big-query-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using database + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Google BigQuery. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_dataset', arg_type=CLIArgumentType(options_list=['--type-properties-dataset'],
                   help='The database name of the Google BigQuery. Type: string (or Expression with resultType string).'
                   ''))
        c.ignore('properties')

    with self.argument_context('datafactory dataset greenplum-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of Greenplum. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of Greenplum. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset greenplum-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of Greenplum. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of Greenplum. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset h-base-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset h-base-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset hive-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Hive. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Hive. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset hive-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Hive. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Hive. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset http-file create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_relative_url', arg_type=CLIArgumentType(options_list=['--type-properties-relative-u'
                   'rl'], help='The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type:'
                   ' string (or Expression with resultType string).'))
        c.argument('type_properties_request_method', arg_type=CLIArgumentType(options_list=['--type-properties-request-'
                   'method'], help='The HTTP method for the HTTP request. Type: string (or Expression with resultType s'
                   'tring).'))
        c.argument('type_properties_request_body', arg_type=CLIArgumentType(options_list=['--type-properties-request-bo'
                   'dy'], help='The body for the HTTP request. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_additional_headers', arg_type=CLIArgumentType(options_list=['--type-properties-addi'
                   'tional-headers'], help='The headers for the HTTP Request. e.g. request-header-name-1:request-header'
                   '-value-1 ... request-header-name-n:request-header-value-n Type: string (or Expression with resultTy'
                   'pe string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of files.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset http-file update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_relative_url', arg_type=CLIArgumentType(options_list=['--type-properties-relative-u'
                   'rl'], help='The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type:'
                   ' string (or Expression with resultType string).'))
        c.argument('type_properties_request_method', arg_type=CLIArgumentType(options_list=['--type-properties-request-'
                   'method'], help='The HTTP method for the HTTP request. Type: string (or Expression with resultType s'
                   'tring).'))
        c.argument('type_properties_request_body', arg_type=CLIArgumentType(options_list=['--type-properties-request-bo'
                   'dy'], help='The body for the HTTP request. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_additional_headers', arg_type=CLIArgumentType(options_list=['--type-properties-addi'
                   'tional-headers'], help='The headers for the HTTP Request. e.g. request-header-name-1:request-header'
                   '-value-1 ... request-header-name-n:request-header-value-n Type: string (or Expression with resultTy'
                   'pe string).'))
        c.argument('type_properties_format', arg_type=CLIArgumentType(options_list=['--type-properties-format'], help=
                   'The format of files.'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset hubspot-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset hubspot-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset impala-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Impala. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Impala. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset impala-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Impala. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Impala. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset informix-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Informix table nam'
                   'e. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset informix-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Informix table nam'
                   'e. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset jira-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset jira-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset json create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the json data storage.'))
        c.argument('type_properties_encoding_name', arg_type=CLIArgumentType(options_list=['--type-properties-encoding-'
                   'name'], help='The code page name of the preferred encoding. If not specified, the default value is '
                   'UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the fo'
                   'llowing link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx.'
                   ' Type: string (or Expression with resultType string).'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')

    with self.argument_context('datafactory dataset json update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the json data storage.'))
        c.argument('type_properties_encoding_name', arg_type=CLIArgumentType(options_list=['--type-properties-encoding-'
                   'name'], help='The code page name of the preferred encoding. If not specified, the default value is '
                   'UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the fo'
                   'llowing link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx.'
                   ' Type: string (or Expression with resultType string).'))
        c.argument('dataset_b_zip2_compression', action=AddDatasetBZip2Compression, nargs='+', help='The BZip2 compress'
                   'ion method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_g_zip_compression', action=AddDatasetGZipCompression, nargs='+', help='The GZip compression'
                   ' method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_deflate_compression', action=AddDatasetDeflateCompression, nargs='+', help='The Deflate com'
                   'pression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.argument('dataset_zip_deflate_compression', action=AddDatasetZipDeflateCompression, nargs='+', help='The ZipD'
                   'eflate compression method used on a dataset.', arg_group='TypePropertiesCompression')
        c.ignore('properties')

    with self.argument_context('datafactory dataset magento-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset magento-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset maria-d-b-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset maria-d-b-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset marketo-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset marketo-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset microsoft-access-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Microsoft Access t'
                   'able name. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset microsoft-access-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Microsoft Access t'
                   'able name. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset mongo-db-collection create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection_name', arg_type=CLIArgumentType(options_list=['--type-properties-collect'
                   'ion-name'], help='The table name of the MongoDB database. Type: string (or Expression with resultTy'
                   'pe string).'))

    with self.argument_context('datafactory dataset mongo-db-collection update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection_name', arg_type=CLIArgumentType(options_list=['--type-properties-collect'
                   'ion-name'], help='The table name of the MongoDB database. Type: string (or Expression with resultTy'
                   'pe string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset mongo-db-v2-collection create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection',
                   arg_type=CLIArgumentType(options_list=['--type-properties-collection'], help='The collection name of'
                   ' the MongoDB database. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset mongo-db-v2-collection update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_collection',
                   arg_type=CLIArgumentType(options_list=['--type-properties-collection'], help='The collection name of'
                   ' the MongoDB database. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset my-sql-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The MySQL table name. '
                   'Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset my-sql-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The MySQL table name. '
                   'Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset netezza-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Netezza. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Netezza. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset netezza-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Netezza. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Netezza. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset o-data-resource create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'OData resource path. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset o-data-resource update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'OData resource path. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset odbc-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The ODBC table name. T'
                   'ype: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset odbc-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The ODBC table name. T'
                   'ype: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset office365-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='Name of the dataset to'
                   ' extract from Office 365. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_predicate', arg_type=CLIArgumentType(options_list=['--type-properties-predicate'],
                   help='A predicate expression that can be used to filter the specific rows to extract from Office 365'
                   '. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset office365-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='Name of the dataset to'
                   ' extract from Office 365. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_predicate', arg_type=CLIArgumentType(options_list=['--type-properties-predicate'],
                   help='A predicate expression that can be used to filter the specific rows to extract from Office 365'
                   '. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset oracle-service-cloud-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset oracle-service-cloud-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset oracle-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the on-premises Oracle database. Type: string (or Expression with resultType str'
                   'ing).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the on-premises Oracle database. Type: string (or Expression with resultType string'
                   ').'))

    with self.argument_context('datafactory dataset oracle-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the on-premises Oracle database. Type: string (or Expression with resultType str'
                   'ing).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the on-premises Oracle database. Type: string (or Expression with resultType string'
                   ').'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset orc create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the ORC data storage.'))
        c.argument('type_properties_orc_compression_codec', arg_type=get_enum_type(['none', 'zlib', 'snappy']),
                   help='')

    with self.argument_context('datafactory dataset orc update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the ORC data storage.'))
        c.argument('type_properties_orc_compression_codec', arg_type=get_enum_type(['none', 'zlib', 'snappy']),
                   help='')
        c.ignore('properties')

    with self.argument_context('datafactory dataset parquet create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the parquet storage.'))
        c.argument('type_properties_compression_codec', arg_type=get_enum_type(['none', 'gzip', 'snappy', 'lzo', 'bzip2'
                   '', 'deflate', 'zipDeflate', 'lz4']), help='')

    with self.argument_context('datafactory dataset parquet update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_location', arg_type=CLIArgumentType(options_list=['--type-properties-location'],
                   help='The location of the parquet storage.'))
        c.argument('type_properties_compression_codec', arg_type=get_enum_type(['none', 'gzip', 'snappy', 'lzo', 'bzip2'
                   '', 'deflate', 'zipDeflate', 'lz4']), help='')
        c.ignore('properties')

    with self.argument_context('datafactory dataset paypal-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset paypal-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset phoenix-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Phoenix. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Phoenix. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset phoenix-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Phoenix. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Phoenix. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset postgre-sql-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e PostgreSQL table name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The PostgreSQL schema name. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset postgre-sql-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e PostgreSQL table name. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The PostgreSQL schema name. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset presto-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Presto. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Presto. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset presto-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Presto. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Presto. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset quick-books-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset quick-books-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset relational-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The relational table n'
                   'ame. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset relational-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The relational table n'
                   'ame. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset responsys-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset responsys-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset rest-resource create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_relative_url', arg_type=CLIArgumentType(options_list=['--type-properties-relative-u'
                   'rl'], help='The relative URL to the resource that the RESTful API provides. Type: string (or Expres'
                   'sion with resultType string).'))
        c.argument('type_properties_request_method', arg_type=CLIArgumentType(options_list=['--type-properties-request-'
                   'method'], help='The HTTP method used to call the RESTful API. The default is GET. Type: string (or '
                   'Expression with resultType string).'))
        c.argument('type_properties_request_body', arg_type=CLIArgumentType(options_list=['--type-properties-request-bo'
                   'dy'], help='The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_additional_headers', arg_type=CLIArgumentType(options_list=['--type-properties-addi'
                   'tional-headers'], help='The additional HTTP headers in the request to the RESTful API. Type: string'
                   ' (or Expression with resultType string).'))
        c.argument('type_properties_pagination_rules', arg_type=CLIArgumentType(options_list=['--type-properties-pagina'
                   'tion-rules'], help='The pagination rules to compose next page requests. Type: string (or Expression'
                   ' with resultType string).'))

    with self.argument_context('datafactory dataset rest-resource update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_relative_url', arg_type=CLIArgumentType(options_list=['--type-properties-relative-u'
                   'rl'], help='The relative URL to the resource that the RESTful API provides. Type: string (or Expres'
                   'sion with resultType string).'))
        c.argument('type_properties_request_method', arg_type=CLIArgumentType(options_list=['--type-properties-request-'
                   'method'], help='The HTTP method used to call the RESTful API. The default is GET. Type: string (or '
                   'Expression with resultType string).'))
        c.argument('type_properties_request_body', arg_type=CLIArgumentType(options_list=['--type-properties-request-bo'
                   'dy'], help='The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Exp'
                   'ression with resultType string).'))
        c.argument('type_properties_additional_headers', arg_type=CLIArgumentType(options_list=['--type-properties-addi'
                   'tional-headers'], help='The additional HTTP headers in the request to the RESTful API. Type: string'
                   ' (or Expression with resultType string).'))
        c.argument('type_properties_pagination_rules', arg_type=CLIArgumentType(options_list=['--type-properties-pagina'
                   'tion-rules'], help='The pagination rules to compose next page requests. Type: string (or Expression'
                   ' with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset salesforce-marketing-cloud-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset salesforce-marketing-cloud-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset salesforce-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_object_api_name', arg_type=CLIArgumentType(options_list=['--type-properties-object-'
                   'api-name'], help='The Salesforce object API name. Type: string (or Expression with resultType strin'
                   'g).'))

    with self.argument_context('datafactory dataset salesforce-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_object_api_name', arg_type=CLIArgumentType(options_list=['--type-properties-object-'
                   'api-name'], help='The Salesforce object API name. Type: string (or Expression with resultType strin'
                   'g).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset salesforce-service-cloud-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_object_api_name', arg_type=CLIArgumentType(options_list=['--type-properties-object-'
                   'api-name'], help='The Salesforce Service Cloud object API name. Type: string (or Expression with re'
                   'sultType string).'))

    with self.argument_context('datafactory dataset salesforce-service-cloud-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_object_api_name', arg_type=CLIArgumentType(options_list=['--type-properties-object-'
                   'api-name'], help='The Salesforce Service Cloud object API name. Type: string (or Expression with re'
                   'sultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sap-bw-cube create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')

    with self.argument_context('datafactory dataset sap-bw-cube update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.ignore('properties')

    with self.argument_context('datafactory dataset sap-cloud-for-customer-resource create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string'
                   ').'))

    with self.argument_context('datafactory dataset sap-cloud-for-customer-resource update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string'
                   ').'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sap-ecc-resource create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'path of the SAP ECC OData entity. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset sap-ecc-resource update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'path of the SAP ECC OData entity. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sap-hana-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of SAP HANA. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of SAP HANA. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset sap-hana-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of SAP HANA. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of SAP HANA. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sap-open-hub-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_open_hub_destination_name', arg_type=CLIArgumentType(options_list=['--type-properti'
                   'es-open-hub-destination-name'], help='The name of the Open Hub Destination with destination type as'
                   ' Database Table. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_exclude_last_request', arg_type=CLIArgumentType(options_list=['--type-properties-ex'
                   'clude-last-request'], help='Whether to exclude the records of the last request. The default value i'
                   's true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_base_request_id', arg_type=CLIArgumentType(options_list=['--type-properties-base-re'
                   'quest-id'], help='The ID of request for delta loading. Once it is set, only data with requestId lar'
                   'ger than the value of this property will be retrieved. The default value is 0. Type: integer (or Ex'
                   'pression with resultType integer ).'))

    with self.argument_context('datafactory dataset sap-open-hub-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_open_hub_destination_name', arg_type=CLIArgumentType(options_list=['--type-properti'
                   'es-open-hub-destination-name'], help='The name of the Open Hub Destination with destination type as'
                   ' Database Table. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_exclude_last_request', arg_type=CLIArgumentType(options_list=['--type-properties-ex'
                   'clude-last-request'], help='Whether to exclude the records of the last request. The default value i'
                   's true. Type: boolean (or Expression with resultType boolean).'))
        c.argument('type_properties_base_request_id', arg_type=CLIArgumentType(options_list=['--type-properties-base-re'
                   'quest-id'], help='The ID of request for delta loading. Once it is set, only data with requestId lar'
                   'ger than the value of this property will be retrieved. The default value is 0. Type: integer (or Ex'
                   'pression with resultType integer ).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sap-table-resource create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The name of the SAP Ta'
                   'ble. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset sap-table-resource update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The name of the SAP Ta'
                   'ble. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset service-now-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset service-now-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset shopify-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset shopify-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset snowflake-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Snowflake database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Snowflake database. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset snowflake-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Snowflake database. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Snowflake database. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset spark-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Spark. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Spark. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset spark-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Spark. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Spark. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sql-server-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the SQL Server dataset. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the SQL Server dataset. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset sql-server-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the SQL Server dataset. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the SQL Server dataset. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset square-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset square-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset sybase-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Sybase table name.'
                   ' Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset sybase-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The Sybase table name.'
                   ' Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset teradata-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The database name of Teradata. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of Teradata. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset teradata-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_database', arg_type=CLIArgumentType(options_list=['--type-properties-database'],
                   help='The database name of Teradata. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of Teradata. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset vertica-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Vertica. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Vertica. Type: string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset vertica-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='This property will be '
                   'retired. Please consider using schema + table properties instead.'))
        c.argument('type_properties_table', arg_type=CLIArgumentType(options_list=['--type-properties-table'], help='Th'
                   'e table name of the Vertica. Type: string (or Expression with resultType string).'))
        c.argument('type_properties_schema', arg_type=CLIArgumentType(options_list=['--type-properties-schema'], help=
                   'The schema name of the Vertica. Type: string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset web-table create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_index', arg_type=CLIArgumentType(options_list=['--type-properties-index'], help='Th'
                   'e zero-based index of the table in the web page. Type: integer (or Expression with resultType integ'
                   'er), minimum: 0.'))
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'relative URL to the web page from the linked service URL. Type: string (or Expression with resultTy'
                   'pe string).'))

    with self.argument_context('datafactory dataset web-table update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_index', arg_type=CLIArgumentType(options_list=['--type-properties-index'], help='Th'
                   'e zero-based index of the table in the web page. Type: integer (or Expression with resultType integ'
                   'er), minimum: 0.'))
        c.argument('type_properties_path', arg_type=CLIArgumentType(options_list=['--type-properties-path'], help='The '
                   'relative URL to the web page from the linked service URL. Type: string (or Expression with resultTy'
                   'pe string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset xero-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset xero-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset zoho-object create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))

    with self.argument_context('datafactory dataset zoho-object update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')
        c.argument('if_match', help='ETag of the dataset entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('description', help='Dataset description.')
        c.argument('structure', arg_type=CLIArgumentType(options_list=['--structure'], help='Columns that define the st'
                   'ructure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataEle'
                   'ment.'))
        c.argument('schema', arg_type=CLIArgumentType(options_list=['--schema'], help='Columns that define the physical'
                   ' type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSc'
                   'hemaDataElement.'))
        c.argument('linked_service_name', arg_type=CLIArgumentType(options_list=['--linked-service-name'], help='Linked'
                   ' service reference.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'],
                   help='Parameters for dataset.'))
        c.argument('annotations', arg_type=CLIArgumentType(options_list=['--annotations'], help='List of tags that can '
                   'be used for describing the Dataset.'))
        c.argument('folder', action=AddFolder, nargs='+', help='The folder that this Dataset is in. If not specified, D'
                   'ataset will appear at the root level.')
        c.argument('type_properties_table_name',
                   arg_type=CLIArgumentType(options_list=['--type-properties-table-name'], help='The table name. Type: '
                   'string (or Expression with resultType string).'))
        c.ignore('properties')

    with self.argument_context('datafactory dataset delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('dataset_name', help='The dataset name.')

    with self.argument_context('datafactory pipeline list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory pipeline show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('pipeline_name', help='The pipeline name.')
        c.argument('if_none_match', help='ETag of the pipeline entity. Should only be specified for get. If the ETag ma'
                   'tches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory pipeline create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('pipeline_name', help='The pipeline name.')
        c.argument('if_match', help='ETag of the pipeline entity.  Should only be specified for update, for which it sh'
                   'ould match existing entity or can be * for unconditional update.')
        c.argument('pipeline', arg_type=CLIArgumentType(options_list=['--pipeline'], help='Pipeline resource definition'
                   '.'))

    with self.argument_context('datafactory pipeline update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('pipeline_name', help='The pipeline name.')
        c.argument('if_match', help='ETag of the pipeline entity.  Should only be specified for update, for which it sh'
                   'ould match existing entity or can be * for unconditional update.')
        c.argument('pipeline', arg_type=CLIArgumentType(options_list=['--pipeline'], help='Pipeline resource definition'
                   '.'))

    with self.argument_context('datafactory pipeline delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('pipeline_name', help='The pipeline name.')

    with self.argument_context('datafactory pipeline create-run') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('pipeline_name', help='The pipeline name.')
        c.argument('reference_pipeline_run_id', help='The pipeline run identifier. If run ID is specified the parameter'
                   's of the specified run will be used to create a new run.')
        c.argument('is_recovery', arg_type=get_three_state_flag(), help='Recovery mode flag. If recovery mode is set to'
                   ' true, the specified referenced pipeline run and the new run will be grouped under the same groupId'
                   '.')
        c.argument('start_activity_name', help='In recovery mode, the rerun will start from this activity. If not speci'
                   'fied, all activities will run.')
        c.argument('start_from_failure', arg_type=get_three_state_flag(), help='In recovery mode, if set to true, the r'
                   'erun will start from failed activities. The property will be used only if startActivityName is not '
                   'specified.')
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Parameters of the pipeli'
                   'ne run. These parameters will be used only if the runId is not specified.'))

    with self.argument_context('datafactory pipeline-run show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('run_id', help='The pipeline run identifier.')

    with self.argument_context('datafactory pipeline-run cancel') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('run_id', help='The pipeline run identifier.')
        c.argument('is_recursive', arg_type=get_three_state_flag(), help='If true, cancel all the Child pipelines that '
                   'are triggered by the current pipeline.')

    with self.argument_context('datafactory pipeline-run query-by-factory') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('continuation_token', help='The continuation token for getting the next page of results. Null for fi'
                   'rst page.')
        c.argument('last_updated_after', help='The time at or after which the run event was updated in \'ISO 8601\' for'
                   'mat.')
        c.argument('last_updated_before', help='The time at or before which the run event was updated in \'ISO 8601\' f'
                   'ormat.')
        c.argument('filters', action=AddFilters, nargs='+', help='List of filters.')
        c.argument('order_by', action=AddOrderBy, nargs='+', help='List of OrderBy option.')

    with self.argument_context('datafactory activity-run query-by-pipeline-run') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('run_id', help='The pipeline run identifier.')
        c.argument('continuation_token', help='The continuation token for getting the next page of results. Null for fi'
                   'rst page.')
        c.argument('last_updated_after', help='The time at or after which the run event was updated in \'ISO 8601\' for'
                   'mat.')
        c.argument('last_updated_before', help='The time at or before which the run event was updated in \'ISO 8601\' f'
                   'ormat.')
        c.argument('filters', action=AddFilters, nargs='+', help='List of filters.')
        c.argument('order_by', action=AddOrderBy, nargs='+', help='List of OrderBy option.')

    with self.argument_context('datafactory trigger list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory trigger show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')
        c.argument('if_none_match', help='ETag of the trigger entity. Should only be specified for get. If the ETag mat'
                   'ches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory trigger create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')
        c.argument('if_match', help='ETag of the trigger entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('properties', arg_type=CLIArgumentType(options_list=['--properties'], help='Properties of the trigge'
                   'r.'))

    with self.argument_context('datafactory trigger update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')
        c.argument('if_match', help='ETag of the trigger entity.  Should only be specified for update, for which it sho'
                   'uld match existing entity or can be * for unconditional update.')
        c.argument('properties', arg_type=CLIArgumentType(options_list=['--properties'], help='Properties of the trigge'
                   'r.'))

    with self.argument_context('datafactory trigger delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')

    with self.argument_context('datafactory trigger get-event-subscription-status') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')

    with self.argument_context('datafactory trigger query-by-factory') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('continuation_token', help='The continuation token for getting the next page of results. Null for fi'
                   'rst page.')
        c.argument('parent_trigger_name', help='The name of the parent TumblingWindowTrigger to get the child rerun tri'
                   'ggers')

    with self.argument_context('datafactory trigger start') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')

    with self.argument_context('datafactory trigger stop') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')

    with self.argument_context('datafactory trigger subscribe-to-event') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')

    with self.argument_context('datafactory trigger unsubscribe-from-event') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')

    with self.argument_context('datafactory trigger-run query-by-factory') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('continuation_token', help='The continuation token for getting the next page of results. Null for fi'
                   'rst page.')
        c.argument('last_updated_after', help='The time at or after which the run event was updated in \'ISO 8601\' for'
                   'mat.')
        c.argument('last_updated_before', help='The time at or before which the run event was updated in \'ISO 8601\' f'
                   'ormat.')
        c.argument('filters', action=AddFilters, nargs='+', help='List of filters.')
        c.argument('order_by', action=AddOrderBy, nargs='+', help='List of OrderBy option.')

    with self.argument_context('datafactory trigger-run rerun') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('trigger_name', help='The trigger name.')
        c.argument('run_id', help='The pipeline run identifier.')

    with self.argument_context('datafactory data-flow list') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')

    with self.argument_context('datafactory data-flow show') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('data_flow_name', help='The data flow name.')
        c.argument('if_none_match', help='ETag of the data flow entity. Should only be specified for get. If the ETag m'
                   'atches the existing entity tag, or if * was provided, then no content will be returned.')

    with self.argument_context('datafactory data-flow create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('data_flow_name', help='The data flow name.')
        c.argument('if_match', help='ETag of the data flow entity. Should only be specified for update, for which it sh'
                   'ould match existing entity or can be * for unconditional update.')
        c.argument('properties', arg_type=CLIArgumentType(options_list=['--properties'],
                   help='Data flow properties.'))

    with self.argument_context('datafactory data-flow update') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('data_flow_name', help='The data flow name.')
        c.argument('if_match', help='ETag of the data flow entity. Should only be specified for update, for which it sh'
                   'ould match existing entity or can be * for unconditional update.')
        c.argument('properties', arg_type=CLIArgumentType(options_list=['--properties'],
                   help='Data flow properties.'))

    with self.argument_context('datafactory data-flow delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('data_flow_name', help='The data flow name.')

    with self.argument_context('datafactory data-flow-debug-session create') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('compute_type', help='Compute type of the cluster. The value will be overwritten by the same setting'
                   ' in integration runtime if provided.')
        c.argument('core_count', help='Core count of the cluster. The value will be overwritten by the same setting in '
                   'integration runtime if provided.')
        c.argument('time_to_live', help='Time to live setting of the cluster in minutes.')
        c.argument('integration_runtime', arg_type=CLIArgumentType(options_list=['--integration-runtime'], help='Set to'
                   ' use integration runtime setting for data flow debug session.'))

    with self.argument_context('datafactory data-flow-debug-session delete') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('session_id', help='The ID of data flow debug session.')

    with self.argument_context('datafactory data-flow-debug-session add-data-flow') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('session_id', help='The ID of data flow debug session.')
        c.argument('data_flow', arg_type=CLIArgumentType(options_list=['--data-flow'], help='Data flow instance.'))
        c.argument('datasets', arg_type=CLIArgumentType(options_list=['--datasets'], help='List of datasets.'))
        c.argument('linked_services', arg_type=CLIArgumentType(options_list=['--linked-services'], help='List of linked'
                   ' services.'))
        c.argument('staging', arg_type=CLIArgumentType(options_list=['--staging'], help='Staging info for debug session'
                   '.'))
        c.argument('debug_settings', arg_type=CLIArgumentType(options_list=['--debug-settings'], help='Data flow debug '
                   'settings.'))

    with self.argument_context('datafactory data-flow-debug-session execute-command') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
        c.argument('session_id', help='The ID of data flow debug session.')
        c.argument('command', arg_type=get_enum_type(['executePreviewQuery', 'executeStatisticsQuery', 'executeExpressi'
                   'onQuery']), help='The command type.')
        c.argument('command_payload', action=AddCommandPayload, nargs='+', help='The command payload object.')

    with self.argument_context('datafactory data-flow-debug-session query-by-factory') as c:
        c.argument('resource_group_name', resource_group_name_type, help='The resource group name.')
        c.argument('factory_name', help='The factory name.')
