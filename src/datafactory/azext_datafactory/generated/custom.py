# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines

import json
from knack.util import CLIError


def datafactory_factory_list(cmd, client,
                             resource_group_name=None):
    if resource_group_name is not None:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def datafactory_factory_show(cmd, client,
                             resource_group_name,
                             factory_name,
                             if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      if_none_match=if_none_match)


def datafactory_factory_create(cmd, client,
                               resource_group_name,
                               factory_name,
                               location,
                               if_match=None,
                               tags=None,
                               identity=None,
                               factory_vsts_configuration=None,
                               factory_git_hub_configuration=None):
    all_repo_configuration = []
    if factory_vsts_configuration is not None:
        all_repo_configuration.append(factory_vsts_configuration)
    if factory_git_hub_configuration is not None:
        all_repo_configuration.append(factory_git_hub_configuration)
    if len(all_repo_configuration) > 1:
        raise CLIError('at most one of  factory_vsts_configuration, factory_git_hub_configuration is needed for repo_co'
                       'nfiguration!')
    repo_configuration = all_repo_configuration[0] if len(all_repo_configuration) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   if_match=if_match,
                                   location=location,
                                   tags=tags,
                                   identity=identity,
                                   repo_configuration=repo_configuration)


def datafactory_factory_update(cmd, client,
                               resource_group_name,
                               factory_name,
                               tags=None,
                               identity=None):
    return client.update(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         tags=tags,
                         identity=identity)


def datafactory_factory_delete(cmd, client,
                               resource_group_name,
                               factory_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name)


def datafactory_factory_configure_factory_repo(cmd, client,
                                               location_id,
                                               factory_resource_id=None,
                                               factory_vsts_configuration=None,
                                               factory_git_hub_configuration=None):
    all_repo_configuration = []
    if factory_vsts_configuration is not None:
        all_repo_configuration.append(factory_vsts_configuration)
    if factory_git_hub_configuration is not None:
        all_repo_configuration.append(factory_git_hub_configuration)
    if len(all_repo_configuration) > 1:
        raise CLIError('at most one of  factory_vsts_configuration, factory_git_hub_configuration is needed for repo_co'
                       'nfiguration!')
    repo_configuration = all_repo_configuration[0] if len(all_repo_configuration) == 1 else None
    return client.configure_factory_repo(location_id=location_id,
                                         factory_resource_id=factory_resource_id,
                                         repo_configuration=repo_configuration)


def datafactory_factory_get_data_plane_access(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              permissions=None,
                                              access_resource_path=None,
                                              profile_name=None,
                                              start_time=None,
                                              expire_time=None):
    return client.get_data_plane_access(resource_group_name=resource_group_name,
                                        factory_name=factory_name,
                                        permissions=permissions,
                                        access_resource_path=access_resource_path,
                                        profile_name=profile_name,
                                        start_time=start_time,
                                        expire_time=expire_time)


def datafactory_factory_get_git_hub_access_token(cmd, client,
                                                 resource_group_name,
                                                 factory_name,
                                                 git_hub_access_code,
                                                 git_hub_access_token_base_url,
                                                 git_hub_client_id=None):
    return client.get_git_hub_access_token(resource_group_name=resource_group_name,
                                           factory_name=factory_name,
                                           git_hub_access_code=git_hub_access_code,
                                           git_hub_client_id=git_hub_client_id,
                                           git_hub_access_token_base_url=git_hub_access_token_base_url)


def datafactory_exposure_control_get_feature_value(cmd, client,
                                                   location_id,
                                                   feature_name=None,
                                                   feature_type=None):
    return client.get_feature_value(location_id=location_id,
                                    feature_name=feature_name,
                                    feature_type=feature_type)


def datafactory_exposure_control_get_feature_value_by_factory(cmd, client,
                                                              resource_group_name,
                                                              factory_name,
                                                              feature_name=None,
                                                              feature_type=None):
    return client.get_feature_value_by_factory(resource_group_name=resource_group_name,
                                               factory_name=factory_name,
                                               feature_name=feature_name,
                                               feature_type=feature_type)


def datafactory_integration_runtime_list(cmd, client,
                                         resource_group_name,
                                         factory_name):
    return client.list_by_factory(resource_group_name=resource_group_name,
                                  factory_name=factory_name)


def datafactory_integration_runtime_show(cmd, client,
                                         resource_group_name,
                                         factory_name,
                                         integration_runtime_name,
                                         if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      integration_runtime_name=integration_runtime_name,
                      if_none_match=if_none_match)


def datafactory_integration_runtime_managed_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   integration_runtime_name,
                                                   if_match=None,
                                                   description=None,
                                                   type_properties_compute_properties=None,
                                                   type_properties_ssis_properties=None):
    if isinstance(type_properties_compute_properties, str):
        type_properties_compute_properties = json.loads(type_properties_compute_properties)
    if isinstance(type_properties_ssis_properties, str):
        type_properties_ssis_properties = json.loads(type_properties_ssis_properties)
    properties = {}
    properties['type'] = 'Managed'
    properties['description'] = description
    properties['compute_properties'] = type_properties_compute_properties
    properties['ssis_properties'] = type_properties_ssis_properties
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   integration_runtime_name=integration_runtime_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_integration_runtime_self_hosted_create(cmd, client,
                                                       resource_group_name,
                                                       factory_name,
                                                       integration_runtime_name,
                                                       if_match=None,
                                                       description=None,
                                                       type_properties_linked_info=None):
    if isinstance(type_properties_linked_info, str):
        type_properties_linked_info = json.loads(type_properties_linked_info)
    properties = {}
    properties['type'] = 'SelfHosted'
    properties['description'] = description
    properties['linked_info'] = type_properties_linked_info
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   integration_runtime_name=integration_runtime_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_integration_runtime_update(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           integration_runtime_name,
                                           auto_update=None,
                                           update_delay_offset=None):
    return client.update(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         integration_runtime_name=integration_runtime_name,
                         auto_update=auto_update,
                         update_delay_offset=update_delay_offset)


def datafactory_integration_runtime_delete(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           integration_runtime_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_create_linked_integration_runtime(cmd, client,
                                                                      resource_group_name,
                                                                      factory_name,
                                                                      integration_runtime_name,
                                                                      name=None,
                                                                      subscription_id=None,
                                                                      data_factory_name=None,
                                                                      data_factory_location=None):
    return client.create_linked_integration_runtime(resource_group_name=resource_group_name,
                                                    factory_name=factory_name,
                                                    integration_runtime_name=integration_runtime_name,
                                                    name=name,
                                                    subscription_id=subscription_id,
                                                    data_factory_name=data_factory_name,
                                                    data_factory_location=data_factory_location)


def datafactory_integration_runtime_get_connection_info(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        integration_runtime_name):
    return client.get_connection_info(resource_group_name=resource_group_name,
                                      factory_name=factory_name,
                                      integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_get_monitoring_data(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        integration_runtime_name):
    return client.get_monitoring_data(resource_group_name=resource_group_name,
                                      factory_name=factory_name,
                                      integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_get_status(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               integration_runtime_name):
    return client.get_status(resource_group_name=resource_group_name,
                             factory_name=factory_name,
                             integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_list_auth_key(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  integration_runtime_name):
    return client.list_auth_key(resource_group_name=resource_group_name,
                                factory_name=factory_name,
                                integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_regenerate_auth_key(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        integration_runtime_name,
                                                        key_name=None):
    return client.regenerate_auth_key(resource_group_name=resource_group_name,
                                      factory_name=factory_name,
                                      integration_runtime_name=integration_runtime_name,
                                      key_name=key_name)


def datafactory_integration_runtime_remove_link(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                integration_runtime_name,
                                                linked_factory_name):
    return client.remove_link(resource_group_name=resource_group_name,
                              factory_name=factory_name,
                              integration_runtime_name=integration_runtime_name,
                              linked_factory_name=linked_factory_name)


def datafactory_integration_runtime_start(cmd, client,
                                          resource_group_name,
                                          factory_name,
                                          integration_runtime_name):
    return client.begin_start(resource_group_name=resource_group_name,
                              factory_name=factory_name,
                              integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_stop(cmd, client,
                                         resource_group_name,
                                         factory_name,
                                         integration_runtime_name):
    return client.begin_stop(resource_group_name=resource_group_name,
                             factory_name=factory_name,
                             integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_sync_credentials(cmd, client,
                                                     resource_group_name,
                                                     factory_name,
                                                     integration_runtime_name):
    return client.sync_credentials(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_upgrade(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            integration_runtime_name):
    return client.upgrade(resource_group_name=resource_group_name,
                          factory_name=factory_name,
                          integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_object_metadata_get(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        integration_runtime_name,
                                                        metadata_path=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      integration_runtime_name=integration_runtime_name,
                      metadata_path=metadata_path)


def datafactory_integration_runtime_object_metadata_refresh(cmd, client,
                                                            resource_group_name,
                                                            factory_name,
                                                            integration_runtime_name):
    return client.begin_refresh(resource_group_name=resource_group_name,
                                factory_name=factory_name,
                                integration_runtime_name=integration_runtime_name)


def datafactory_integration_runtime_node_show(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              integration_runtime_name,
                                              node_name):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      integration_runtime_name=integration_runtime_name,
                      node_name=node_name)


def datafactory_integration_runtime_node_update(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                integration_runtime_name,
                                                node_name,
                                                concurrent_jobs_limit=None):
    return client.update(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         integration_runtime_name=integration_runtime_name,
                         node_name=node_name,
                         concurrent_jobs_limit=concurrent_jobs_limit)


def datafactory_integration_runtime_node_delete(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                integration_runtime_name,
                                                node_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         integration_runtime_name=integration_runtime_name,
                         node_name=node_name)


def datafactory_integration_runtime_node_get_ip_address(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        integration_runtime_name,
                                                        node_name):
    return client.get_ip_address(resource_group_name=resource_group_name,
                                 factory_name=factory_name,
                                 integration_runtime_name=integration_runtime_name,
                                 node_name=node_name)


def datafactory_linked_service_list(cmd, client,
                                    resource_group_name,
                                    factory_name):
    return client.list_by_factory(resource_group_name=resource_group_name,
                                  factory_name=factory_name)


def datafactory_linked_service_show(cmd, client,
                                    resource_group_name,
                                    factory_name,
                                    linked_service_name,
                                    if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      linked_service_name=linked_service_name,
                      if_none_match=if_none_match)


def datafactory_linked_service_amazon_m_w_s_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_endpoint,
                                                   type_properties_marketplace_id,
                                                   type_properties_seller_id,
                                                   type_properties_access_key_id,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_mws_auth_token=None,
                                                   type_properties_secret_key=None,
                                                   type_properties_use_encrypted_endpoints=None,
                                                   type_properties_use_host_verification=None,
                                                   type_properties_use_peer_verification=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_marketplace_id, str):
        type_properties_marketplace_id = json.loads(type_properties_marketplace_id)
    if isinstance(type_properties_seller_id, str):
        type_properties_seller_id = json.loads(type_properties_seller_id)
    if isinstance(type_properties_mws_auth_token, str):
        type_properties_mws_auth_token = json.loads(type_properties_mws_auth_token)
    if isinstance(type_properties_access_key_id, str):
        type_properties_access_key_id = json.loads(type_properties_access_key_id)
    if isinstance(type_properties_secret_key, str):
        type_properties_secret_key = json.loads(type_properties_secret_key)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AmazonMWS'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['marketplace_id'] = type_properties_marketplace_id
    properties['seller_id'] = type_properties_seller_id
    properties['mws_auth_token'] = type_properties_mws_auth_token
    properties['access_key_id'] = type_properties_access_key_id
    properties['secret_key'] = type_properties_secret_key
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_amazon_m_w_s_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_endpoint,
                                                   type_properties_marketplace_id,
                                                   type_properties_seller_id,
                                                   type_properties_access_key_id,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_mws_auth_token=None,
                                                   type_properties_secret_key=None,
                                                   type_properties_use_encrypted_endpoints=None,
                                                   type_properties_use_host_verification=None,
                                                   type_properties_use_peer_verification=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_marketplace_id, str):
        type_properties_marketplace_id = json.loads(type_properties_marketplace_id)
    if isinstance(type_properties_seller_id, str):
        type_properties_seller_id = json.loads(type_properties_seller_id)
    if isinstance(type_properties_mws_auth_token, str):
        type_properties_mws_auth_token = json.loads(type_properties_mws_auth_token)
    if isinstance(type_properties_access_key_id, str):
        type_properties_access_key_id = json.loads(type_properties_access_key_id)
    if isinstance(type_properties_secret_key, str):
        type_properties_secret_key = json.loads(type_properties_secret_key)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AmazonMWS'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.marketplace_id = type_properties_marketplace_id
    instance.seller_id = type_properties_seller_id
    instance.mws_auth_token = type_properties_mws_auth_token
    instance.access_key_id = type_properties_access_key_id
    instance.secret_key = type_properties_secret_key
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_amazon_redshift_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      type_properties_server,
                                                      type_properties_database,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      type_properties_username=None,
                                                      type_properties_password=None,
                                                      type_properties_port=None,
                                                      type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AmazonRedshift'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['server'] = type_properties_server
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['database'] = type_properties_database
    properties['port'] = type_properties_port
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_amazon_redshift_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      type_properties_server,
                                                      type_properties_database,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      type_properties_username=None,
                                                      type_properties_password=None,
                                                      type_properties_port=None,
                                                      type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AmazonRedshift'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.server = type_properties_server
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.database = type_properties_database
    instance.port = type_properties_port
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_amazon_s3_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_access_key_id=None,
                                                type_properties_secret_access_key=None,
                                                type_properties_service_url=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_access_key_id, str):
        type_properties_access_key_id = json.loads(type_properties_access_key_id)
    if isinstance(type_properties_secret_access_key, str):
        type_properties_secret_access_key = json.loads(type_properties_secret_access_key)
    if isinstance(type_properties_service_url, str):
        type_properties_service_url = json.loads(type_properties_service_url)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AmazonS3'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['access_key_id'] = type_properties_access_key_id
    properties['secret_access_key'] = type_properties_secret_access_key
    properties['service_url'] = type_properties_service_url
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_amazon_s3_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_access_key_id=None,
                                                type_properties_secret_access_key=None,
                                                type_properties_service_url=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_access_key_id, str):
        type_properties_access_key_id = json.loads(type_properties_access_key_id)
    if isinstance(type_properties_secret_access_key, str):
        type_properties_secret_access_key = json.loads(type_properties_secret_access_key)
    if isinstance(type_properties_service_url, str):
        type_properties_service_url = json.loads(type_properties_service_url)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AmazonS3'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.access_key_id = type_properties_access_key_id
    instance.secret_access_key = type_properties_secret_access_key
    instance.service_url = type_properties_service_url
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_batch_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_account_name,
                                                  type_properties_batch_uri,
                                                  type_properties_pool_name,
                                                  type_properties_linked_service_name,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_access_key=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_account_name, str):
        type_properties_account_name = json.loads(type_properties_account_name)
    if isinstance(type_properties_access_key, str):
        type_properties_access_key = json.loads(type_properties_access_key)
    if isinstance(type_properties_batch_uri, str):
        type_properties_batch_uri = json.loads(type_properties_batch_uri)
    if isinstance(type_properties_pool_name, str):
        type_properties_pool_name = json.loads(type_properties_pool_name)
    if isinstance(type_properties_linked_service_name, str):
        type_properties_linked_service_name = json.loads(type_properties_linked_service_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureBatch'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['account_name'] = type_properties_account_name
    properties['access_key'] = type_properties_access_key
    properties['batch_uri'] = type_properties_batch_uri
    properties['pool_name'] = type_properties_pool_name
    properties['linked_service_name'] = type_properties_linked_service_name
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_batch_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_account_name,
                                                  type_properties_batch_uri,
                                                  type_properties_pool_name,
                                                  type_properties_linked_service_name,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_access_key=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_account_name, str):
        type_properties_account_name = json.loads(type_properties_account_name)
    if isinstance(type_properties_access_key, str):
        type_properties_access_key = json.loads(type_properties_access_key)
    if isinstance(type_properties_batch_uri, str):
        type_properties_batch_uri = json.loads(type_properties_batch_uri)
    if isinstance(type_properties_pool_name, str):
        type_properties_pool_name = json.loads(type_properties_pool_name)
    if isinstance(type_properties_linked_service_name, str):
        type_properties_linked_service_name = json.loads(type_properties_linked_service_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureBatch'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.account_name = type_properties_account_name
    instance.access_key = type_properties_access_key
    instance.batch_uri = type_properties_batch_uri
    instance.pool_name = type_properties_pool_name
    instance.linked_service_name = type_properties_linked_service_name
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_blob_f_s_create(cmd, client,
                                                     resource_group_name,
                                                     factory_name,
                                                     linked_service_name,
                                                     type_properties_url,
                                                     if_match=None,
                                                     connect_via=None,
                                                     description=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     type_properties_account_key=None,
                                                     type_properties_service_principal_id=None,
                                                     type_properties_service_principal_key=None,
                                                     type_properties_tenant=None,
                                                     type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureBlobFS'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['account_key'] = type_properties_account_key
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_blob_f_s_update(instance, cmd,
                                                     resource_group_name,
                                                     factory_name,
                                                     linked_service_name,
                                                     type_properties_url,
                                                     if_match=None,
                                                     connect_via=None,
                                                     description=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     type_properties_account_key=None,
                                                     type_properties_service_principal_id=None,
                                                     type_properties_service_principal_key=None,
                                                     type_properties_tenant=None,
                                                     type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureBlobFS'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.account_key = type_properties_account_key
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_blob_storage_create(cmd, client,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         type_properties_connection_string=None,
                                                         type_properties_account_key=None,
                                                         type_properties_sas_uri=None,
                                                         type_properties_sas_token=None,
                                                         type_properties_service_endpoint=None,
                                                         type_properties_service_principal_id=None,
                                                         type_properties_service_principal_key=None,
                                                         type_properties_tenant=None,
                                                         type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_sas_uri, str):
        type_properties_sas_uri = json.loads(type_properties_sas_uri)
    if isinstance(type_properties_sas_token, str):
        type_properties_sas_token = json.loads(type_properties_sas_token)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    properties = {}
    properties['type'] = 'AzureBlobStorage'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['account_key'] = type_properties_account_key
    properties['sas_uri'] = type_properties_sas_uri
    properties['sas_token'] = type_properties_sas_token
    properties['service_endpoint'] = type_properties_service_endpoint
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_blob_storage_update(instance, cmd,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         type_properties_connection_string=None,
                                                         type_properties_account_key=None,
                                                         type_properties_sas_uri=None,
                                                         type_properties_sas_token=None,
                                                         type_properties_service_endpoint=None,
                                                         type_properties_service_principal_id=None,
                                                         type_properties_service_principal_key=None,
                                                         type_properties_tenant=None,
                                                         type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_sas_uri, str):
        type_properties_sas_uri = json.loads(type_properties_sas_uri)
    if isinstance(type_properties_sas_token, str):
        type_properties_sas_token = json.loads(type_properties_sas_token)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    instance.type = 'AzureBlobStorage'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.account_key = type_properties_account_key
    instance.sas_uri = type_properties_sas_uri
    instance.sas_token = type_properties_sas_token
    instance.service_endpoint = type_properties_service_endpoint
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_data_explorer_create(cmd, client,
                                                          resource_group_name,
                                                          factory_name,
                                                          linked_service_name,
                                                          type_properties_endpoint,
                                                          type_properties_service_principal_id,
                                                          type_properties_service_principal_key,
                                                          type_properties_database,
                                                          type_properties_tenant,
                                                          if_match=None,
                                                          connect_via=None,
                                                          description=None,
                                                          parameters=None,
                                                          annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    properties = {}
    properties['type'] = 'AzureDataExplorer'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['database'] = type_properties_database
    properties['tenant'] = type_properties_tenant
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_data_explorer_update(instance, cmd,
                                                          resource_group_name,
                                                          factory_name,
                                                          linked_service_name,
                                                          type_properties_endpoint,
                                                          type_properties_service_principal_id,
                                                          type_properties_service_principal_key,
                                                          type_properties_database,
                                                          type_properties_tenant,
                                                          if_match=None,
                                                          connect_via=None,
                                                          description=None,
                                                          parameters=None,
                                                          annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    instance.type = 'AzureDataExplorer'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.database = type_properties_database
    instance.tenant = type_properties_tenant
    return instance


def datafactory_linked_service_azure_data_lake_analytics_create(cmd, client,
                                                                resource_group_name,
                                                                factory_name,
                                                                linked_service_name,
                                                                type_properties_account_name,
                                                                type_properties_tenant,
                                                                if_match=None,
                                                                connect_via=None,
                                                                description=None,
                                                                parameters=None,
                                                                annotations=None,
                                                                type_properties_service_principal_id=None,
                                                                type_properties_service_principal_key=None,
                                                                type_properties_subscription_id=None,
                                                                type_properties_resource_group_name=None,
                                                                type_properties_data_lake_analytics_uri=None,
                                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_account_name, str):
        type_properties_account_name = json.loads(type_properties_account_name)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_subscription_id, str):
        type_properties_subscription_id = json.loads(type_properties_subscription_id)
    if isinstance(type_properties_resource_group_name, str):
        type_properties_resource_group_name = json.loads(type_properties_resource_group_name)
    if isinstance(type_properties_data_lake_analytics_uri, str):
        type_properties_data_lake_analytics_uri = json.loads(type_properties_data_lake_analytics_uri)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureDataLakeAnalytics'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['account_name'] = type_properties_account_name
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['subscription_id'] = type_properties_subscription_id
    properties['resource_group_name'] = type_properties_resource_group_name
    properties['data_lake_analytics_uri'] = type_properties_data_lake_analytics_uri
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_data_lake_analytics_update(instance, cmd,
                                                                resource_group_name,
                                                                factory_name,
                                                                linked_service_name,
                                                                type_properties_account_name,
                                                                type_properties_tenant,
                                                                if_match=None,
                                                                connect_via=None,
                                                                description=None,
                                                                parameters=None,
                                                                annotations=None,
                                                                type_properties_service_principal_id=None,
                                                                type_properties_service_principal_key=None,
                                                                type_properties_subscription_id=None,
                                                                type_properties_resource_group_name=None,
                                                                type_properties_data_lake_analytics_uri=None,
                                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_account_name, str):
        type_properties_account_name = json.loads(type_properties_account_name)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_subscription_id, str):
        type_properties_subscription_id = json.loads(type_properties_subscription_id)
    if isinstance(type_properties_resource_group_name, str):
        type_properties_resource_group_name = json.loads(type_properties_resource_group_name)
    if isinstance(type_properties_data_lake_analytics_uri, str):
        type_properties_data_lake_analytics_uri = json.loads(type_properties_data_lake_analytics_uri)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureDataLakeAnalytics'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.account_name = type_properties_account_name
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.subscription_id = type_properties_subscription_id
    instance.resource_group_name = type_properties_resource_group_name
    instance.data_lake_analytics_uri = type_properties_data_lake_analytics_uri
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_data_lake_store_create(cmd, client,
                                                            resource_group_name,
                                                            factory_name,
                                                            linked_service_name,
                                                            type_properties_data_lake_store_uri,
                                                            if_match=None,
                                                            connect_via=None,
                                                            description=None,
                                                            parameters=None,
                                                            annotations=None,
                                                            type_properties_service_principal_id=None,
                                                            type_properties_service_principal_key=None,
                                                            type_properties_tenant=None,
                                                            type_properties_account_name=None,
                                                            type_properties_subscription_id=None,
                                                            type_properties_resource_group_name=None,
                                                            type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_data_lake_store_uri, str):
        type_properties_data_lake_store_uri = json.loads(type_properties_data_lake_store_uri)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_account_name, str):
        type_properties_account_name = json.loads(type_properties_account_name)
    if isinstance(type_properties_subscription_id, str):
        type_properties_subscription_id = json.loads(type_properties_subscription_id)
    if isinstance(type_properties_resource_group_name, str):
        type_properties_resource_group_name = json.loads(type_properties_resource_group_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureDataLakeStore'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['data_lake_store_uri'] = type_properties_data_lake_store_uri
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['account_name'] = type_properties_account_name
    properties['subscription_id'] = type_properties_subscription_id
    properties['resource_group_name'] = type_properties_resource_group_name
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_data_lake_store_update(instance, cmd,
                                                            resource_group_name,
                                                            factory_name,
                                                            linked_service_name,
                                                            type_properties_data_lake_store_uri,
                                                            if_match=None,
                                                            connect_via=None,
                                                            description=None,
                                                            parameters=None,
                                                            annotations=None,
                                                            type_properties_service_principal_id=None,
                                                            type_properties_service_principal_key=None,
                                                            type_properties_tenant=None,
                                                            type_properties_account_name=None,
                                                            type_properties_subscription_id=None,
                                                            type_properties_resource_group_name=None,
                                                            type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_data_lake_store_uri, str):
        type_properties_data_lake_store_uri = json.loads(type_properties_data_lake_store_uri)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_account_name, str):
        type_properties_account_name = json.loads(type_properties_account_name)
    if isinstance(type_properties_subscription_id, str):
        type_properties_subscription_id = json.loads(type_properties_subscription_id)
    if isinstance(type_properties_resource_group_name, str):
        type_properties_resource_group_name = json.loads(type_properties_resource_group_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureDataLakeStore'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.data_lake_store_uri = type_properties_data_lake_store_uri
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.account_name = type_properties_account_name
    instance.subscription_id = type_properties_subscription_id
    instance.resource_group_name = type_properties_resource_group_name
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_databricks_create(cmd, client,
                                                       resource_group_name,
                                                       factory_name,
                                                       linked_service_name,
                                                       type_properties_domain,
                                                       type_properties_access_token,
                                                       if_match=None,
                                                       connect_via=None,
                                                       description=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       type_properties_existing_cluster_id=None,
                                                       type_properties_instance_pool_id=None,
                                                       type_properties_new_cluster_version=None,
                                                       type_properties_new_cluster_num_of_worker=None,
                                                       type_properties_new_cluster_node_type=None,
                                                       type_properties_new_cluster_spark_conf=None,
                                                       type_properties_new_cluster_spark_env_vars=None,
                                                       type_properties_new_cluster_custom_tags=None,
                                                       type_properties_new_cluster_driver_node_type=None,
                                                       type_properties_new_cluster_init_scripts=None,
                                                       type_properties_new_cluster_enable_elastic_disk=None,
                                                       type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_domain, str):
        type_properties_domain = json.loads(type_properties_domain)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_existing_cluster_id, str):
        type_properties_existing_cluster_id = json.loads(type_properties_existing_cluster_id)
    if isinstance(type_properties_instance_pool_id, str):
        type_properties_instance_pool_id = json.loads(type_properties_instance_pool_id)
    if isinstance(type_properties_new_cluster_version, str):
        type_properties_new_cluster_version = json.loads(type_properties_new_cluster_version)
    if isinstance(type_properties_new_cluster_num_of_worker, str):
        type_properties_new_cluster_num_of_worker = json.loads(type_properties_new_cluster_num_of_worker)
    if isinstance(type_properties_new_cluster_node_type, str):
        type_properties_new_cluster_node_type = json.loads(type_properties_new_cluster_node_type)
    if isinstance(type_properties_new_cluster_spark_conf, str):
        type_properties_new_cluster_spark_conf = json.loads(type_properties_new_cluster_spark_conf)
    if isinstance(type_properties_new_cluster_spark_env_vars, str):
        type_properties_new_cluster_spark_env_vars = json.loads(type_properties_new_cluster_spark_env_vars)
    if isinstance(type_properties_new_cluster_custom_tags, str):
        type_properties_new_cluster_custom_tags = json.loads(type_properties_new_cluster_custom_tags)
    if isinstance(type_properties_new_cluster_driver_node_type, str):
        type_properties_new_cluster_driver_node_type = json.loads(type_properties_new_cluster_driver_node_type)
    if isinstance(type_properties_new_cluster_init_scripts, str):
        type_properties_new_cluster_init_scripts = json.loads(type_properties_new_cluster_init_scripts)
    if isinstance(type_properties_new_cluster_enable_elastic_disk, str):
        type_properties_new_cluster_enable_elastic_disk = json.loads(type_properties_new_cluster_enable_elastic_disk)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureDatabricks'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['domain'] = type_properties_domain
    properties['access_token'] = type_properties_access_token
    properties['existing_cluster_id'] = type_properties_existing_cluster_id
    properties['instance_pool_id'] = type_properties_instance_pool_id
    properties['new_cluster_version'] = type_properties_new_cluster_version
    properties['new_cluster_num_of_worker'] = type_properties_new_cluster_num_of_worker
    properties['new_cluster_node_type'] = type_properties_new_cluster_node_type
    properties['new_cluster_spark_conf'] = type_properties_new_cluster_spark_conf
    properties['new_cluster_spark_env_vars'] = type_properties_new_cluster_spark_env_vars
    properties['new_cluster_custom_tags'] = type_properties_new_cluster_custom_tags
    properties['new_cluster_driver_node_type'] = type_properties_new_cluster_driver_node_type
    properties['new_cluster_init_scripts'] = type_properties_new_cluster_init_scripts
    properties['new_cluster_enable_elastic_disk'] = type_properties_new_cluster_enable_elastic_disk
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_databricks_update(instance, cmd,
                                                       resource_group_name,
                                                       factory_name,
                                                       linked_service_name,
                                                       type_properties_domain,
                                                       type_properties_access_token,
                                                       if_match=None,
                                                       connect_via=None,
                                                       description=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       type_properties_existing_cluster_id=None,
                                                       type_properties_instance_pool_id=None,
                                                       type_properties_new_cluster_version=None,
                                                       type_properties_new_cluster_num_of_worker=None,
                                                       type_properties_new_cluster_node_type=None,
                                                       type_properties_new_cluster_spark_conf=None,
                                                       type_properties_new_cluster_spark_env_vars=None,
                                                       type_properties_new_cluster_custom_tags=None,
                                                       type_properties_new_cluster_driver_node_type=None,
                                                       type_properties_new_cluster_init_scripts=None,
                                                       type_properties_new_cluster_enable_elastic_disk=None,
                                                       type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_domain, str):
        type_properties_domain = json.loads(type_properties_domain)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_existing_cluster_id, str):
        type_properties_existing_cluster_id = json.loads(type_properties_existing_cluster_id)
    if isinstance(type_properties_instance_pool_id, str):
        type_properties_instance_pool_id = json.loads(type_properties_instance_pool_id)
    if isinstance(type_properties_new_cluster_version, str):
        type_properties_new_cluster_version = json.loads(type_properties_new_cluster_version)
    if isinstance(type_properties_new_cluster_num_of_worker, str):
        type_properties_new_cluster_num_of_worker = json.loads(type_properties_new_cluster_num_of_worker)
    if isinstance(type_properties_new_cluster_node_type, str):
        type_properties_new_cluster_node_type = json.loads(type_properties_new_cluster_node_type)
    if isinstance(type_properties_new_cluster_spark_conf, str):
        type_properties_new_cluster_spark_conf = json.loads(type_properties_new_cluster_spark_conf)
    if isinstance(type_properties_new_cluster_spark_env_vars, str):
        type_properties_new_cluster_spark_env_vars = json.loads(type_properties_new_cluster_spark_env_vars)
    if isinstance(type_properties_new_cluster_custom_tags, str):
        type_properties_new_cluster_custom_tags = json.loads(type_properties_new_cluster_custom_tags)
    if isinstance(type_properties_new_cluster_driver_node_type, str):
        type_properties_new_cluster_driver_node_type = json.loads(type_properties_new_cluster_driver_node_type)
    if isinstance(type_properties_new_cluster_init_scripts, str):
        type_properties_new_cluster_init_scripts = json.loads(type_properties_new_cluster_init_scripts)
    if isinstance(type_properties_new_cluster_enable_elastic_disk, str):
        type_properties_new_cluster_enable_elastic_disk = json.loads(type_properties_new_cluster_enable_elastic_disk)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureDatabricks'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.domain = type_properties_domain
    instance.access_token = type_properties_access_token
    instance.existing_cluster_id = type_properties_existing_cluster_id
    instance.instance_pool_id = type_properties_instance_pool_id
    instance.new_cluster_version = type_properties_new_cluster_version
    instance.new_cluster_num_of_worker = type_properties_new_cluster_num_of_worker
    instance.new_cluster_node_type = type_properties_new_cluster_node_type
    instance.new_cluster_spark_conf = type_properties_new_cluster_spark_conf
    instance.new_cluster_spark_env_vars = type_properties_new_cluster_spark_env_vars
    instance.new_cluster_custom_tags = type_properties_new_cluster_custom_tags
    instance.new_cluster_driver_node_type = type_properties_new_cluster_driver_node_type
    instance.new_cluster_init_scripts = type_properties_new_cluster_init_scripts
    instance.new_cluster_enable_elastic_disk = type_properties_new_cluster_enable_elastic_disk
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_file_storage_create(cmd, client,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         type_properties_host,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         type_properties_user_id=None,
                                                         type_properties_password=None,
                                                         type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_user_id, str):
        type_properties_user_id = json.loads(type_properties_user_id)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureFileStorage'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['user_id'] = type_properties_user_id
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_file_storage_update(instance, cmd,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         type_properties_host,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         type_properties_user_id=None,
                                                         type_properties_password=None,
                                                         type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_user_id, str):
        type_properties_user_id = json.loads(type_properties_user_id)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureFileStorage'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.user_id = type_properties_user_id
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_function_create(cmd, client,
                                                     resource_group_name,
                                                     factory_name,
                                                     linked_service_name,
                                                     type_properties_function_app_url,
                                                     if_match=None,
                                                     connect_via=None,
                                                     description=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     type_properties_function_key=None,
                                                     type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_function_app_url, str):
        type_properties_function_app_url = json.loads(type_properties_function_app_url)
    if isinstance(type_properties_function_key, str):
        type_properties_function_key = json.loads(type_properties_function_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureFunction'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['function_app_url'] = type_properties_function_app_url
    properties['function_key'] = type_properties_function_key
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_function_update(instance, cmd,
                                                     resource_group_name,
                                                     factory_name,
                                                     linked_service_name,
                                                     type_properties_function_app_url,
                                                     if_match=None,
                                                     connect_via=None,
                                                     description=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     type_properties_function_key=None,
                                                     type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_function_app_url, str):
        type_properties_function_app_url = json.loads(type_properties_function_app_url)
    if isinstance(type_properties_function_key, str):
        type_properties_function_key = json.loads(type_properties_function_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureFunction'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.function_app_url = type_properties_function_app_url
    instance.function_key = type_properties_function_key
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_key_vault_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      type_properties_base_url,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_base_url, str):
        type_properties_base_url = json.loads(type_properties_base_url)
    properties = {}
    properties['type'] = 'AzureKeyVault'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['base_url'] = type_properties_base_url
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_key_vault_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      type_properties_base_url,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_base_url, str):
        type_properties_base_url = json.loads(type_properties_base_url)
    instance.type = 'AzureKeyVault'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.base_url = type_properties_base_url
    return instance


def datafactory_linked_service_azure_m_l_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_ml_endpoint,
                                                type_properties_api_key,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_update_resource_endpoint=None,
                                                type_properties_service_principal_id=None,
                                                type_properties_service_principal_key=None,
                                                type_properties_tenant=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_ml_endpoint, str):
        type_properties_ml_endpoint = json.loads(type_properties_ml_endpoint)
    if isinstance(type_properties_api_key, str):
        type_properties_api_key = json.loads(type_properties_api_key)
    if isinstance(type_properties_update_resource_endpoint, str):
        type_properties_update_resource_endpoint = json.loads(type_properties_update_resource_endpoint)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureML'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['ml_endpoint'] = type_properties_ml_endpoint
    properties['api_key'] = type_properties_api_key
    properties['update_resource_endpoint'] = type_properties_update_resource_endpoint
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_m_l_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_ml_endpoint,
                                                type_properties_api_key,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_update_resource_endpoint=None,
                                                type_properties_service_principal_id=None,
                                                type_properties_service_principal_key=None,
                                                type_properties_tenant=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_ml_endpoint, str):
        type_properties_ml_endpoint = json.loads(type_properties_ml_endpoint)
    if isinstance(type_properties_api_key, str):
        type_properties_api_key = json.loads(type_properties_api_key)
    if isinstance(type_properties_update_resource_endpoint, str):
        type_properties_update_resource_endpoint = json.loads(type_properties_update_resource_endpoint)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureML'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.ml_endpoint = type_properties_ml_endpoint
    instance.api_key = type_properties_api_key
    instance.update_resource_endpoint = type_properties_update_resource_endpoint
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_m_l_service_create(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        linked_service_name,
                                                        type_properties_subscription_id,
                                                        type_properties_resource_group_name,
                                                        type_properties_ml_workspace_name,
                                                        if_match=None,
                                                        connect_via=None,
                                                        description=None,
                                                        parameters=None,
                                                        annotations=None,
                                                        type_properties_service_principal_id=None,
                                                        type_properties_service_principal_key=None,
                                                        type_properties_tenant=None,
                                                        type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_subscription_id, str):
        type_properties_subscription_id = json.loads(type_properties_subscription_id)
    if isinstance(type_properties_resource_group_name, str):
        type_properties_resource_group_name = json.loads(type_properties_resource_group_name)
    if isinstance(type_properties_ml_workspace_name, str):
        type_properties_ml_workspace_name = json.loads(type_properties_ml_workspace_name)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureMLService'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['subscription_id'] = type_properties_subscription_id
    properties['resource_group_name'] = type_properties_resource_group_name
    properties['ml_workspace_name'] = type_properties_ml_workspace_name
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_m_l_service_update(instance, cmd,
                                                        resource_group_name,
                                                        factory_name,
                                                        linked_service_name,
                                                        type_properties_subscription_id,
                                                        type_properties_resource_group_name,
                                                        type_properties_ml_workspace_name,
                                                        if_match=None,
                                                        connect_via=None,
                                                        description=None,
                                                        parameters=None,
                                                        annotations=None,
                                                        type_properties_service_principal_id=None,
                                                        type_properties_service_principal_key=None,
                                                        type_properties_tenant=None,
                                                        type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_subscription_id, str):
        type_properties_subscription_id = json.loads(type_properties_subscription_id)
    if isinstance(type_properties_resource_group_name, str):
        type_properties_resource_group_name = json.loads(type_properties_resource_group_name)
    if isinstance(type_properties_ml_workspace_name, str):
        type_properties_ml_workspace_name = json.loads(type_properties_ml_workspace_name)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureMLService'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.subscription_id = type_properties_subscription_id
    instance.resource_group_name = type_properties_resource_group_name
    instance.ml_workspace_name = type_properties_ml_workspace_name
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_maria_d_b_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      type_properties_connection_string=None,
                                                      type_properties_pwd=None,
                                                      type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureMariaDB'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['pwd'] = type_properties_pwd
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_maria_d_b_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      type_properties_connection_string=None,
                                                      type_properties_pwd=None,
                                                      type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureMariaDB'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.pwd = type_properties_pwd
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_my_sql_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_connection_string,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_password=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureMySql'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_my_sql_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_connection_string,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_password=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureMySql'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_postgre_sql_create(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        linked_service_name,
                                                        if_match=None,
                                                        connect_via=None,
                                                        description=None,
                                                        parameters=None,
                                                        annotations=None,
                                                        type_properties_connection_string=None,
                                                        type_properties_password=None,
                                                        type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzurePostgreSql'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_postgre_sql_update(instance, cmd,
                                                        resource_group_name,
                                                        factory_name,
                                                        linked_service_name,
                                                        if_match=None,
                                                        connect_via=None,
                                                        description=None,
                                                        parameters=None,
                                                        annotations=None,
                                                        type_properties_connection_string=None,
                                                        type_properties_password=None,
                                                        type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzurePostgreSql'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_search_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_url,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_key=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_key, str):
        type_properties_key = json.loads(type_properties_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureSearch'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['key'] = type_properties_key
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_search_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_url,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_key=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_key, str):
        type_properties_key = json.loads(type_properties_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureSearch'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.key = type_properties_key
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_sql_d_w_create(cmd, client,
                                                    resource_group_name,
                                                    factory_name,
                                                    linked_service_name,
                                                    type_properties_connection_string,
                                                    if_match=None,
                                                    connect_via=None,
                                                    description=None,
                                                    parameters=None,
                                                    annotations=None,
                                                    type_properties_password=None,
                                                    type_properties_service_principal_id=None,
                                                    type_properties_service_principal_key=None,
                                                    type_properties_tenant=None,
                                                    type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureSqlDW'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_sql_d_w_update(instance, cmd,
                                                    resource_group_name,
                                                    factory_name,
                                                    linked_service_name,
                                                    type_properties_connection_string,
                                                    if_match=None,
                                                    connect_via=None,
                                                    description=None,
                                                    parameters=None,
                                                    annotations=None,
                                                    type_properties_password=None,
                                                    type_properties_service_principal_id=None,
                                                    type_properties_service_principal_key=None,
                                                    type_properties_tenant=None,
                                                    type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureSqlDW'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_sql_database_create(cmd, client,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         type_properties_connection_string,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         type_properties_password=None,
                                                         type_properties_service_principal_id=None,
                                                         type_properties_service_principal_key=None,
                                                         type_properties_tenant=None,
                                                         type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureSqlDatabase'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_sql_database_update(instance, cmd,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         type_properties_connection_string,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         type_properties_password=None,
                                                         type_properties_service_principal_id=None,
                                                         type_properties_service_principal_key=None,
                                                         type_properties_tenant=None,
                                                         type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureSqlDatabase'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_sql_m_i_create(cmd, client,
                                                    resource_group_name,
                                                    factory_name,
                                                    linked_service_name,
                                                    type_properties_connection_string,
                                                    if_match=None,
                                                    connect_via=None,
                                                    description=None,
                                                    parameters=None,
                                                    annotations=None,
                                                    type_properties_password=None,
                                                    type_properties_service_principal_id=None,
                                                    type_properties_service_principal_key=None,
                                                    type_properties_tenant=None,
                                                    type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'AzureSqlMI'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_sql_m_i_update(instance, cmd,
                                                    resource_group_name,
                                                    factory_name,
                                                    linked_service_name,
                                                    type_properties_connection_string,
                                                    if_match=None,
                                                    connect_via=None,
                                                    description=None,
                                                    parameters=None,
                                                    annotations=None,
                                                    type_properties_password=None,
                                                    type_properties_service_principal_id=None,
                                                    type_properties_service_principal_key=None,
                                                    type_properties_tenant=None,
                                                    type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'AzureSqlMI'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_storage_create(cmd, client,
                                                    resource_group_name,
                                                    factory_name,
                                                    linked_service_name,
                                                    if_match=None,
                                                    connect_via=None,
                                                    description=None,
                                                    parameters=None,
                                                    annotations=None,
                                                    type_properties_connection_string=None,
                                                    type_properties_account_key=None,
                                                    type_properties_sas_uri=None,
                                                    type_properties_sas_token=None,
                                                    type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_sas_uri, str):
        type_properties_sas_uri = json.loads(type_properties_sas_uri)
    if isinstance(type_properties_sas_token, str):
        type_properties_sas_token = json.loads(type_properties_sas_token)
    properties = {}
    properties['type'] = 'AzureStorage'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['account_key'] = type_properties_account_key
    properties['sas_uri'] = type_properties_sas_uri
    properties['sas_token'] = type_properties_sas_token
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_storage_update(instance, cmd,
                                                    resource_group_name,
                                                    factory_name,
                                                    linked_service_name,
                                                    if_match=None,
                                                    connect_via=None,
                                                    description=None,
                                                    parameters=None,
                                                    annotations=None,
                                                    type_properties_connection_string=None,
                                                    type_properties_account_key=None,
                                                    type_properties_sas_uri=None,
                                                    type_properties_sas_token=None,
                                                    type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_sas_uri, str):
        type_properties_sas_uri = json.loads(type_properties_sas_uri)
    if isinstance(type_properties_sas_token, str):
        type_properties_sas_token = json.loads(type_properties_sas_token)
    instance.type = 'AzureStorage'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.account_key = type_properties_account_key
    instance.sas_uri = type_properties_sas_uri
    instance.sas_token = type_properties_sas_token
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_azure_table_storage_create(cmd, client,
                                                          resource_group_name,
                                                          factory_name,
                                                          linked_service_name,
                                                          if_match=None,
                                                          connect_via=None,
                                                          description=None,
                                                          parameters=None,
                                                          annotations=None,
                                                          type_properties_connection_string=None,
                                                          type_properties_account_key=None,
                                                          type_properties_sas_uri=None,
                                                          type_properties_sas_token=None,
                                                          type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_sas_uri, str):
        type_properties_sas_uri = json.loads(type_properties_sas_uri)
    if isinstance(type_properties_sas_token, str):
        type_properties_sas_token = json.loads(type_properties_sas_token)
    properties = {}
    properties['type'] = 'AzureTableStorage'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['account_key'] = type_properties_account_key
    properties['sas_uri'] = type_properties_sas_uri
    properties['sas_token'] = type_properties_sas_token
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_azure_table_storage_update(instance, cmd,
                                                          resource_group_name,
                                                          factory_name,
                                                          linked_service_name,
                                                          if_match=None,
                                                          connect_via=None,
                                                          description=None,
                                                          parameters=None,
                                                          annotations=None,
                                                          type_properties_connection_string=None,
                                                          type_properties_account_key=None,
                                                          type_properties_sas_uri=None,
                                                          type_properties_sas_token=None,
                                                          type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_sas_uri, str):
        type_properties_sas_uri = json.loads(type_properties_sas_uri)
    if isinstance(type_properties_sas_token, str):
        type_properties_sas_token = json.loads(type_properties_sas_token)
    instance.type = 'AzureTableStorage'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.account_key = type_properties_account_key
    instance.sas_uri = type_properties_sas_uri
    instance.sas_token = type_properties_sas_token
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_cassandra_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_host,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_authentication_type=None,
                                                type_properties_port=None,
                                                type_properties_username=None,
                                                type_properties_password=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Cassandra'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['authentication_type'] = type_properties_authentication_type
    properties['port'] = type_properties_port
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_cassandra_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_host,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_authentication_type=None,
                                                type_properties_port=None,
                                                type_properties_username=None,
                                                type_properties_password=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Cassandra'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.authentication_type = type_properties_authentication_type
    instance.port = type_properties_port
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_common_data_service_for_apps_create(cmd, client,
                                                                   resource_group_name,
                                                                   factory_name,
                                                                   linked_service_name,
                                                                   type_properties_deployment_type,
                                                                   type_properties_authentication_type,
                                                                   if_match=None,
                                                                   connect_via=None,
                                                                   description=None,
                                                                   parameters=None,
                                                                   annotations=None,
                                                                   type_properties_host_name=None,
                                                                   type_properties_port=None,
                                                                   type_properties_service_uri=None,
                                                                   type_properties_organization_name=None,
                                                                   type_properties_username=None,
                                                                   type_properties_password=None,
                                                                   type_properties_service_principal_id=None,
                                                                   type_properties_service_principal_credential_type=None,
                                                                   type_properties_service_principal_credential=None,
                                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host_name, str):
        type_properties_host_name = json.loads(type_properties_host_name)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_uri, str):
        type_properties_service_uri = json.loads(type_properties_service_uri)
    if isinstance(type_properties_organization_name, str):
        type_properties_organization_name = json.loads(type_properties_organization_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_credential, str):
        type_properties_service_principal_credential = json.loads(type_properties_service_principal_credential)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'CommonDataServiceForApps'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['deployment_type'] = type_properties_deployment_type
    properties['host_name'] = type_properties_host_name
    properties['port'] = type_properties_port
    properties['service_uri'] = type_properties_service_uri
    properties['organization_name'] = type_properties_organization_name
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_credential_type'] = type_properties_service_principal_credential_type
    properties['service_principal_credential'] = type_properties_service_principal_credential
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_common_data_service_for_apps_update(instance, cmd,
                                                                   resource_group_name,
                                                                   factory_name,
                                                                   linked_service_name,
                                                                   type_properties_deployment_type,
                                                                   type_properties_authentication_type,
                                                                   if_match=None,
                                                                   connect_via=None,
                                                                   description=None,
                                                                   parameters=None,
                                                                   annotations=None,
                                                                   type_properties_host_name=None,
                                                                   type_properties_port=None,
                                                                   type_properties_service_uri=None,
                                                                   type_properties_organization_name=None,
                                                                   type_properties_username=None,
                                                                   type_properties_password=None,
                                                                   type_properties_service_principal_id=None,
                                                                   type_properties_service_principal_credential_type=None,
                                                                   type_properties_service_principal_credential=None,
                                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host_name, str):
        type_properties_host_name = json.loads(type_properties_host_name)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_uri, str):
        type_properties_service_uri = json.loads(type_properties_service_uri)
    if isinstance(type_properties_organization_name, str):
        type_properties_organization_name = json.loads(type_properties_organization_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_credential, str):
        type_properties_service_principal_credential = json.loads(type_properties_service_principal_credential)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'CommonDataServiceForApps'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.deployment_type = type_properties_deployment_type
    instance.host_name = type_properties_host_name
    instance.port = type_properties_port
    instance.service_uri = type_properties_service_uri
    instance.organization_name = type_properties_organization_name
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_credential_type = type_properties_service_principal_credential_type
    instance.service_principal_credential = type_properties_service_principal_credential
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_concur_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_client_id,
                                             type_properties_username,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Concur'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['client_id'] = type_properties_client_id
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_concur_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_client_id,
                                             type_properties_username,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Concur'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.client_id = type_properties_client_id
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_cosmos_db_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_account_endpoint=None,
                                                type_properties_database=None,
                                                type_properties_account_key=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_endpoint, str):
        type_properties_account_endpoint = json.loads(type_properties_account_endpoint)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'CosmosDb'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['account_endpoint'] = type_properties_account_endpoint
    properties['database'] = type_properties_database
    properties['account_key'] = type_properties_account_key
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_cosmos_db_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_account_endpoint=None,
                                                type_properties_database=None,
                                                type_properties_account_key=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_account_endpoint, str):
        type_properties_account_endpoint = json.loads(type_properties_account_endpoint)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_account_key, str):
        type_properties_account_key = json.loads(type_properties_account_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'CosmosDb'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.account_endpoint = type_properties_account_endpoint
    instance.database = type_properties_database
    instance.account_key = type_properties_account_key
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_cosmos_db_mongo_db_api_create(cmd, client,
                                                             resource_group_name,
                                                             factory_name,
                                                             linked_service_name,
                                                             type_properties_connection_string,
                                                             type_properties_database,
                                                             if_match=None,
                                                             connect_via=None,
                                                             description=None,
                                                             parameters=None,
                                                             annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    properties = {}
    properties['type'] = 'CosmosDbMongoDbApi'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['database'] = type_properties_database
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_cosmos_db_mongo_db_api_update(instance, cmd,
                                                             resource_group_name,
                                                             factory_name,
                                                             linked_service_name,
                                                             type_properties_connection_string,
                                                             type_properties_database,
                                                             if_match=None,
                                                             connect_via=None,
                                                             description=None,
                                                             parameters=None,
                                                             annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    instance.type = 'CosmosDbMongoDbApi'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.database = type_properties_database
    return instance


def datafactory_linked_service_couchbase_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_cred_string=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_cred_string, str):
        type_properties_cred_string = json.loads(type_properties_cred_string)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Couchbase'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['cred_string'] = type_properties_cred_string
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_couchbase_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_cred_string=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_cred_string, str):
        type_properties_cred_string = json.loads(type_properties_cred_string)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Couchbase'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.cred_string = type_properties_cred_string
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_custom_data_source_create(cmd, client,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         type_properties,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties, str):
        type_properties = json.loads(type_properties)
    properties = {}
    properties['type'] = 'CustomDataSource'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['type_properties'] = type_properties
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_custom_data_source_update(instance, cmd,
                                                         resource_group_name,
                                                         factory_name,
                                                         linked_service_name,
                                                         type_properties,
                                                         if_match=None,
                                                         connect_via=None,
                                                         description=None,
                                                         parameters=None,
                                                         annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties, str):
        type_properties = json.loads(type_properties)
    instance.type = 'CustomDataSource'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.type_properties = type_properties
    return instance


def datafactory_linked_service_db2_create(cmd, client,
                                          resource_group_name,
                                          factory_name,
                                          linked_service_name,
                                          if_match=None,
                                          connect_via=None,
                                          description=None,
                                          parameters=None,
                                          annotations=None,
                                          type_properties_connection_string=None,
                                          type_properties_server=None,
                                          type_properties_database=None,
                                          type_properties_username=None,
                                          type_properties_password=None,
                                          type_properties_package_collection=None,
                                          type_properties_certificate_common_name=None,
                                          type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_package_collection, str):
        type_properties_package_collection = json.loads(type_properties_package_collection)
    if isinstance(type_properties_certificate_common_name, str):
        type_properties_certificate_common_name = json.loads(type_properties_certificate_common_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Db2'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['server'] = type_properties_server
    properties['database'] = type_properties_database
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['package_collection'] = type_properties_package_collection
    properties['certificate_common_name'] = type_properties_certificate_common_name
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_db2_update(instance, cmd,
                                          resource_group_name,
                                          factory_name,
                                          linked_service_name,
                                          if_match=None,
                                          connect_via=None,
                                          description=None,
                                          parameters=None,
                                          annotations=None,
                                          type_properties_connection_string=None,
                                          type_properties_server=None,
                                          type_properties_database=None,
                                          type_properties_username=None,
                                          type_properties_password=None,
                                          type_properties_package_collection=None,
                                          type_properties_certificate_common_name=None,
                                          type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_package_collection, str):
        type_properties_package_collection = json.loads(type_properties_package_collection)
    if isinstance(type_properties_certificate_common_name, str):
        type_properties_certificate_common_name = json.loads(type_properties_certificate_common_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Db2'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.server = type_properties_server
    instance.database = type_properties_database
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.package_collection = type_properties_package_collection
    instance.certificate_common_name = type_properties_certificate_common_name
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_drill_create(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            linked_service_name,
                                            if_match=None,
                                            connect_via=None,
                                            description=None,
                                            parameters=None,
                                            annotations=None,
                                            type_properties_connection_string=None,
                                            type_properties_pwd=None,
                                            type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Drill'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['pwd'] = type_properties_pwd
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_drill_update(instance, cmd,
                                            resource_group_name,
                                            factory_name,
                                            linked_service_name,
                                            if_match=None,
                                            connect_via=None,
                                            description=None,
                                            parameters=None,
                                            annotations=None,
                                            type_properties_connection_string=None,
                                            type_properties_pwd=None,
                                            type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Drill'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.pwd = type_properties_pwd
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_dynamics_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               type_properties_deployment_type,
                                               type_properties_authentication_type,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_host_name=None,
                                               type_properties_port=None,
                                               type_properties_service_uri=None,
                                               type_properties_organization_name=None,
                                               type_properties_username=None,
                                               type_properties_password=None,
                                               type_properties_service_principal_id=None,
                                               type_properties_service_principal_credential_type=None,
                                               type_properties_service_principal_credential=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host_name, str):
        type_properties_host_name = json.loads(type_properties_host_name)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_uri, str):
        type_properties_service_uri = json.loads(type_properties_service_uri)
    if isinstance(type_properties_organization_name, str):
        type_properties_organization_name = json.loads(type_properties_organization_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_credential, str):
        type_properties_service_principal_credential = json.loads(type_properties_service_principal_credential)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Dynamics'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['deployment_type'] = type_properties_deployment_type
    properties['host_name'] = type_properties_host_name
    properties['port'] = type_properties_port
    properties['service_uri'] = type_properties_service_uri
    properties['organization_name'] = type_properties_organization_name
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_credential_type'] = type_properties_service_principal_credential_type
    properties['service_principal_credential'] = type_properties_service_principal_credential
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_dynamics_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               type_properties_deployment_type,
                                               type_properties_authentication_type,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_host_name=None,
                                               type_properties_port=None,
                                               type_properties_service_uri=None,
                                               type_properties_organization_name=None,
                                               type_properties_username=None,
                                               type_properties_password=None,
                                               type_properties_service_principal_id=None,
                                               type_properties_service_principal_credential_type=None,
                                               type_properties_service_principal_credential=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host_name, str):
        type_properties_host_name = json.loads(type_properties_host_name)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_uri, str):
        type_properties_service_uri = json.loads(type_properties_service_uri)
    if isinstance(type_properties_organization_name, str):
        type_properties_organization_name = json.loads(type_properties_organization_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_credential, str):
        type_properties_service_principal_credential = json.loads(type_properties_service_principal_credential)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Dynamics'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.deployment_type = type_properties_deployment_type
    instance.host_name = type_properties_host_name
    instance.port = type_properties_port
    instance.service_uri = type_properties_service_uri
    instance.organization_name = type_properties_organization_name
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_credential_type = type_properties_service_principal_credential_type
    instance.service_principal_credential = type_properties_service_principal_credential
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_dynamics_a_x_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_url,
                                                   type_properties_service_principal_id,
                                                   type_properties_service_principal_key,
                                                   type_properties_tenant,
                                                   type_properties_aad_resource_id,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_aad_resource_id, str):
        type_properties_aad_resource_id = json.loads(type_properties_aad_resource_id)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'DynamicsAX'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['aad_resource_id'] = type_properties_aad_resource_id
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_dynamics_a_x_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_url,
                                                   type_properties_service_principal_id,
                                                   type_properties_service_principal_key,
                                                   type_properties_tenant,
                                                   type_properties_aad_resource_id,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_aad_resource_id, str):
        type_properties_aad_resource_id = json.loads(type_properties_aad_resource_id)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'DynamicsAX'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.aad_resource_id = type_properties_aad_resource_id
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_dynamics_crm_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_deployment_type,
                                                   type_properties_authentication_type,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_host_name=None,
                                                   type_properties_port=None,
                                                   type_properties_service_uri=None,
                                                   type_properties_organization_name=None,
                                                   type_properties_username=None,
                                                   type_properties_password=None,
                                                   type_properties_service_principal_id=None,
                                                   type_properties_service_principal_credential_type=None,
                                                   type_properties_service_principal_credential=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host_name, str):
        type_properties_host_name = json.loads(type_properties_host_name)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_uri, str):
        type_properties_service_uri = json.loads(type_properties_service_uri)
    if isinstance(type_properties_organization_name, str):
        type_properties_organization_name = json.loads(type_properties_organization_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_credential, str):
        type_properties_service_principal_credential = json.loads(type_properties_service_principal_credential)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'DynamicsCrm'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['deployment_type'] = type_properties_deployment_type
    properties['host_name'] = type_properties_host_name
    properties['port'] = type_properties_port
    properties['service_uri'] = type_properties_service_uri
    properties['organization_name'] = type_properties_organization_name
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_credential_type'] = type_properties_service_principal_credential_type
    properties['service_principal_credential'] = type_properties_service_principal_credential
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_dynamics_crm_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_deployment_type,
                                                   type_properties_authentication_type,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_host_name=None,
                                                   type_properties_port=None,
                                                   type_properties_service_uri=None,
                                                   type_properties_organization_name=None,
                                                   type_properties_username=None,
                                                   type_properties_password=None,
                                                   type_properties_service_principal_id=None,
                                                   type_properties_service_principal_credential_type=None,
                                                   type_properties_service_principal_credential=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host_name, str):
        type_properties_host_name = json.loads(type_properties_host_name)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_uri, str):
        type_properties_service_uri = json.loads(type_properties_service_uri)
    if isinstance(type_properties_organization_name, str):
        type_properties_organization_name = json.loads(type_properties_organization_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_credential, str):
        type_properties_service_principal_credential = json.loads(type_properties_service_principal_credential)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'DynamicsCrm'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.deployment_type = type_properties_deployment_type
    instance.host_name = type_properties_host_name
    instance.port = type_properties_port
    instance.service_uri = type_properties_service_uri
    instance.organization_name = type_properties_organization_name
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_credential_type = type_properties_service_principal_credential_type
    instance.service_principal_credential = type_properties_service_principal_credential
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_eloqua_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_endpoint,
                                             type_properties_username,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Eloqua'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_eloqua_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_endpoint,
                                             type_properties_username,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Eloqua'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_file_server_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_host,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_user_id=None,
                                                  type_properties_password=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_user_id, str):
        type_properties_user_id = json.loads(type_properties_user_id)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'FileServer'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['user_id'] = type_properties_user_id
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_file_server_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_host,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_user_id=None,
                                                  type_properties_password=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_user_id, str):
        type_properties_user_id = json.loads(type_properties_user_id)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'FileServer'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.user_id = type_properties_user_id
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_ftp_server_create(cmd, client,
                                                 resource_group_name,
                                                 factory_name,
                                                 linked_service_name,
                                                 type_properties_host,
                                                 if_match=None,
                                                 connect_via=None,
                                                 description=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 type_properties_port=None,
                                                 type_properties_authentication_type=None,
                                                 type_properties_user_name=None,
                                                 type_properties_password=None,
                                                 type_properties_encrypted_credential=None,
                                                 type_properties_enable_ssl=None,
                                                 type_properties_enable_server_certificate_validation=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_enable_server_certificate_validation, str):
        type_properties_enable_server_certificate_validation = json.loads(type_properties_enable_server_certificate_validation)
    properties = {}
    properties['type'] = 'FtpServer'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['authentication_type'] = type_properties_authentication_type
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['enable_server_certificate_validation'] = type_properties_enable_server_certificate_validation
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_ftp_server_update(instance, cmd,
                                                 resource_group_name,
                                                 factory_name,
                                                 linked_service_name,
                                                 type_properties_host,
                                                 if_match=None,
                                                 connect_via=None,
                                                 description=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 type_properties_port=None,
                                                 type_properties_authentication_type=None,
                                                 type_properties_user_name=None,
                                                 type_properties_password=None,
                                                 type_properties_encrypted_credential=None,
                                                 type_properties_enable_ssl=None,
                                                 type_properties_enable_server_certificate_validation=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_enable_server_certificate_validation, str):
        type_properties_enable_server_certificate_validation = json.loads(type_properties_enable_server_certificate_validation)
    instance.type = 'FtpServer'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.authentication_type = type_properties_authentication_type
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    instance.enable_ssl = type_properties_enable_ssl
    instance.enable_server_certificate_validation = type_properties_enable_server_certificate_validation
    return instance


def datafactory_linked_service_google_ad_words_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      type_properties_client_customer_id,
                                                      type_properties_developer_token,
                                                      type_properties_authentication_type,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      type_properties_refresh_token=None,
                                                      type_properties_client_id=None,
                                                      type_properties_client_secret=None,
                                                      type_properties_email=None,
                                                      type_properties_key_file_path=None,
                                                      type_properties_trusted_cert_path=None,
                                                      type_properties_use_system_trust_store=None,
                                                      type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_customer_id, str):
        type_properties_client_customer_id = json.loads(type_properties_client_customer_id)
    if isinstance(type_properties_developer_token, str):
        type_properties_developer_token = json.loads(type_properties_developer_token)
    if isinstance(type_properties_refresh_token, str):
        type_properties_refresh_token = json.loads(type_properties_refresh_token)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_email, str):
        type_properties_email = json.loads(type_properties_email)
    if isinstance(type_properties_key_file_path, str):
        type_properties_key_file_path = json.loads(type_properties_key_file_path)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'GoogleAdWords'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['client_customer_id'] = type_properties_client_customer_id
    properties['developer_token'] = type_properties_developer_token
    properties['authentication_type'] = type_properties_authentication_type
    properties['refresh_token'] = type_properties_refresh_token
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['email'] = type_properties_email
    properties['key_file_path'] = type_properties_key_file_path
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_google_ad_words_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      linked_service_name,
                                                      type_properties_client_customer_id,
                                                      type_properties_developer_token,
                                                      type_properties_authentication_type,
                                                      if_match=None,
                                                      connect_via=None,
                                                      description=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      type_properties_refresh_token=None,
                                                      type_properties_client_id=None,
                                                      type_properties_client_secret=None,
                                                      type_properties_email=None,
                                                      type_properties_key_file_path=None,
                                                      type_properties_trusted_cert_path=None,
                                                      type_properties_use_system_trust_store=None,
                                                      type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_customer_id, str):
        type_properties_client_customer_id = json.loads(type_properties_client_customer_id)
    if isinstance(type_properties_developer_token, str):
        type_properties_developer_token = json.loads(type_properties_developer_token)
    if isinstance(type_properties_refresh_token, str):
        type_properties_refresh_token = json.loads(type_properties_refresh_token)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_email, str):
        type_properties_email = json.loads(type_properties_email)
    if isinstance(type_properties_key_file_path, str):
        type_properties_key_file_path = json.loads(type_properties_key_file_path)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'GoogleAdWords'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.client_customer_id = type_properties_client_customer_id
    instance.developer_token = type_properties_developer_token
    instance.authentication_type = type_properties_authentication_type
    instance.refresh_token = type_properties_refresh_token
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.email = type_properties_email
    instance.key_file_path = type_properties_key_file_path
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_google_big_query_create(cmd, client,
                                                       resource_group_name,
                                                       factory_name,
                                                       linked_service_name,
                                                       type_properties_project,
                                                       type_properties_authentication_type,
                                                       if_match=None,
                                                       connect_via=None,
                                                       description=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       type_properties_additional_projects=None,
                                                       type_properties_request_google_drive_scope=None,
                                                       type_properties_refresh_token=None,
                                                       type_properties_client_id=None,
                                                       type_properties_client_secret=None,
                                                       type_properties_email=None,
                                                       type_properties_key_file_path=None,
                                                       type_properties_trusted_cert_path=None,
                                                       type_properties_use_system_trust_store=None,
                                                       type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_project, str):
        type_properties_project = json.loads(type_properties_project)
    if isinstance(type_properties_additional_projects, str):
        type_properties_additional_projects = json.loads(type_properties_additional_projects)
    if isinstance(type_properties_request_google_drive_scope, str):
        type_properties_request_google_drive_scope = json.loads(type_properties_request_google_drive_scope)
    if isinstance(type_properties_refresh_token, str):
        type_properties_refresh_token = json.loads(type_properties_refresh_token)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_email, str):
        type_properties_email = json.loads(type_properties_email)
    if isinstance(type_properties_key_file_path, str):
        type_properties_key_file_path = json.loads(type_properties_key_file_path)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'GoogleBigQuery'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['project'] = type_properties_project
    properties['additional_projects'] = type_properties_additional_projects
    properties['request_google_drive_scope'] = type_properties_request_google_drive_scope
    properties['authentication_type'] = type_properties_authentication_type
    properties['refresh_token'] = type_properties_refresh_token
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['email'] = type_properties_email
    properties['key_file_path'] = type_properties_key_file_path
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_google_big_query_update(instance, cmd,
                                                       resource_group_name,
                                                       factory_name,
                                                       linked_service_name,
                                                       type_properties_project,
                                                       type_properties_authentication_type,
                                                       if_match=None,
                                                       connect_via=None,
                                                       description=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       type_properties_additional_projects=None,
                                                       type_properties_request_google_drive_scope=None,
                                                       type_properties_refresh_token=None,
                                                       type_properties_client_id=None,
                                                       type_properties_client_secret=None,
                                                       type_properties_email=None,
                                                       type_properties_key_file_path=None,
                                                       type_properties_trusted_cert_path=None,
                                                       type_properties_use_system_trust_store=None,
                                                       type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_project, str):
        type_properties_project = json.loads(type_properties_project)
    if isinstance(type_properties_additional_projects, str):
        type_properties_additional_projects = json.loads(type_properties_additional_projects)
    if isinstance(type_properties_request_google_drive_scope, str):
        type_properties_request_google_drive_scope = json.loads(type_properties_request_google_drive_scope)
    if isinstance(type_properties_refresh_token, str):
        type_properties_refresh_token = json.loads(type_properties_refresh_token)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_email, str):
        type_properties_email = json.loads(type_properties_email)
    if isinstance(type_properties_key_file_path, str):
        type_properties_key_file_path = json.loads(type_properties_key_file_path)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'GoogleBigQuery'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.project = type_properties_project
    instance.additional_projects = type_properties_additional_projects
    instance.request_google_drive_scope = type_properties_request_google_drive_scope
    instance.authentication_type = type_properties_authentication_type
    instance.refresh_token = type_properties_refresh_token
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.email = type_properties_email
    instance.key_file_path = type_properties_key_file_path
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_google_cloud_storage_create(cmd, client,
                                                           resource_group_name,
                                                           factory_name,
                                                           linked_service_name,
                                                           if_match=None,
                                                           connect_via=None,
                                                           description=None,
                                                           parameters=None,
                                                           annotations=None,
                                                           type_properties_access_key_id=None,
                                                           type_properties_secret_access_key=None,
                                                           type_properties_service_url=None,
                                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_access_key_id, str):
        type_properties_access_key_id = json.loads(type_properties_access_key_id)
    if isinstance(type_properties_secret_access_key, str):
        type_properties_secret_access_key = json.loads(type_properties_secret_access_key)
    if isinstance(type_properties_service_url, str):
        type_properties_service_url = json.loads(type_properties_service_url)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'GoogleCloudStorage'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['access_key_id'] = type_properties_access_key_id
    properties['secret_access_key'] = type_properties_secret_access_key
    properties['service_url'] = type_properties_service_url
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_google_cloud_storage_update(instance, cmd,
                                                           resource_group_name,
                                                           factory_name,
                                                           linked_service_name,
                                                           if_match=None,
                                                           connect_via=None,
                                                           description=None,
                                                           parameters=None,
                                                           annotations=None,
                                                           type_properties_access_key_id=None,
                                                           type_properties_secret_access_key=None,
                                                           type_properties_service_url=None,
                                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_access_key_id, str):
        type_properties_access_key_id = json.loads(type_properties_access_key_id)
    if isinstance(type_properties_secret_access_key, str):
        type_properties_secret_access_key = json.loads(type_properties_secret_access_key)
    if isinstance(type_properties_service_url, str):
        type_properties_service_url = json.loads(type_properties_service_url)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'GoogleCloudStorage'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.access_key_id = type_properties_access_key_id
    instance.secret_access_key = type_properties_secret_access_key
    instance.service_url = type_properties_service_url
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_greenplum_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_pwd=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Greenplum'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['pwd'] = type_properties_pwd
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_greenplum_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_pwd=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Greenplum'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.pwd = type_properties_pwd
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_h_base_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_authentication_type,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_port=None,
                                             type_properties_http_path=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_enable_ssl=None,
                                             type_properties_trusted_cert_path=None,
                                             type_properties_allow_host_name_cnmismatch=None,
                                             type_properties_allow_self_signed_server_cert=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'HBase'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['http_path'] = type_properties_http_path
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['allow_host_name_cn_mismatch'] = type_properties_allow_host_name_cnmismatch
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_h_base_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_authentication_type,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_port=None,
                                             type_properties_http_path=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_enable_ssl=None,
                                             type_properties_trusted_cert_path=None,
                                             type_properties_allow_host_name_cnmismatch=None,
                                             type_properties_allow_self_signed_server_cert=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'HBase'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.http_path = type_properties_http_path
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.enable_ssl = type_properties_enable_ssl
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.allow_host_name_cn_mismatch = type_properties_allow_host_name_cnmismatch
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_h_d_insight_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_cluster_uri,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_user_name=None,
                                                  type_properties_password=None,
                                                  type_properties_linked_service_name=None,
                                                  type_properties_hcatalog_linked_service_name=None,
                                                  type_properties_encrypted_credential=None,
                                                  type_properties_is_esp_enabled=None,
                                                  type_properties_file_system=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_cluster_uri, str):
        type_properties_cluster_uri = json.loads(type_properties_cluster_uri)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_linked_service_name, str):
        type_properties_linked_service_name = json.loads(type_properties_linked_service_name)
    if isinstance(type_properties_hcatalog_linked_service_name, str):
        type_properties_hcatalog_linked_service_name = json.loads(type_properties_hcatalog_linked_service_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_is_esp_enabled, str):
        type_properties_is_esp_enabled = json.loads(type_properties_is_esp_enabled)
    if isinstance(type_properties_file_system, str):
        type_properties_file_system = json.loads(type_properties_file_system)
    properties = {}
    properties['type'] = 'HDInsight'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['cluster_uri'] = type_properties_cluster_uri
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['linked_service_name'] = type_properties_linked_service_name
    properties['hcatalog_linked_service_name'] = type_properties_hcatalog_linked_service_name
    properties['encrypted_credential'] = type_properties_encrypted_credential
    properties['is_esp_enabled'] = type_properties_is_esp_enabled
    properties['file_system'] = type_properties_file_system
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_h_d_insight_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_cluster_uri,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_user_name=None,
                                                  type_properties_password=None,
                                                  type_properties_linked_service_name=None,
                                                  type_properties_hcatalog_linked_service_name=None,
                                                  type_properties_encrypted_credential=None,
                                                  type_properties_is_esp_enabled=None,
                                                  type_properties_file_system=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_cluster_uri, str):
        type_properties_cluster_uri = json.loads(type_properties_cluster_uri)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_linked_service_name, str):
        type_properties_linked_service_name = json.loads(type_properties_linked_service_name)
    if isinstance(type_properties_hcatalog_linked_service_name, str):
        type_properties_hcatalog_linked_service_name = json.loads(type_properties_hcatalog_linked_service_name)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_is_esp_enabled, str):
        type_properties_is_esp_enabled = json.loads(type_properties_is_esp_enabled)
    if isinstance(type_properties_file_system, str):
        type_properties_file_system = json.loads(type_properties_file_system)
    instance.type = 'HDInsight'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.cluster_uri = type_properties_cluster_uri
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.linked_service_name = type_properties_linked_service_name
    instance.hcatalog_linked_service_name = type_properties_hcatalog_linked_service_name
    instance.encrypted_credential = type_properties_encrypted_credential
    instance.is_esp_enabled = type_properties_is_esp_enabled
    instance.file_system = type_properties_file_system
    return instance


def datafactory_linked_service_h_d_insight_on_demand_create(cmd, client,
                                                            resource_group_name,
                                                            factory_name,
                                                            linked_service_name,
                                                            type_properties_cluster_size,
                                                            type_properties_time_to_live,
                                                            type_properties_version,
                                                            type_properties_linked_service_name,
                                                            type_properties_host_subscription_id,
                                                            type_properties_tenant,
                                                            type_properties_cluster_resource_group,
                                                            if_match=None,
                                                            connect_via=None,
                                                            description=None,
                                                            parameters=None,
                                                            annotations=None,
                                                            type_properties_service_principal_id=None,
                                                            type_properties_service_principal_key=None,
                                                            type_properties_cluster_name_prefix=None,
                                                            type_properties_cluster_user_name=None,
                                                            type_properties_cluster_password=None,
                                                            type_properties_cluster_ssh_user_name=None,
                                                            type_properties_cluster_ssh_password=None,
                                                            type_properties_additional_linked_service_names=None,
                                                            type_properties_hcatalog_linked_service_name=None,
                                                            type_properties_cluster_type=None,
                                                            type_properties_spark_version=None,
                                                            type_properties_core_configuration=None,
                                                            type_properties_h_base_configuration=None,
                                                            type_properties_hdfs_configuration=None,
                                                            type_properties_hive_configuration=None,
                                                            type_properties_map_reduce_configuration=None,
                                                            type_properties_oozie_configuration=None,
                                                            type_properties_storm_configuration=None,
                                                            type_properties_yarn_configuration=None,
                                                            type_properties_encrypted_credential=None,
                                                            type_properties_head_node_size=None,
                                                            type_properties_data_node_size=None,
                                                            type_properties_zookeeper_node_size=None,
                                                            type_properties_script_actions=None,
                                                            type_properties_virtual_network_id=None,
                                                            type_properties_subnet_name=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_cluster_size, str):
        type_properties_cluster_size = json.loads(type_properties_cluster_size)
    if isinstance(type_properties_time_to_live, str):
        type_properties_time_to_live = json.loads(type_properties_time_to_live)
    if isinstance(type_properties_version, str):
        type_properties_version = json.loads(type_properties_version)
    if isinstance(type_properties_linked_service_name, str):
        type_properties_linked_service_name = json.loads(type_properties_linked_service_name)
    if isinstance(type_properties_host_subscription_id, str):
        type_properties_host_subscription_id = json.loads(type_properties_host_subscription_id)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_cluster_resource_group, str):
        type_properties_cluster_resource_group = json.loads(type_properties_cluster_resource_group)
    if isinstance(type_properties_cluster_name_prefix, str):
        type_properties_cluster_name_prefix = json.loads(type_properties_cluster_name_prefix)
    if isinstance(type_properties_cluster_user_name, str):
        type_properties_cluster_user_name = json.loads(type_properties_cluster_user_name)
    if isinstance(type_properties_cluster_password, str):
        type_properties_cluster_password = json.loads(type_properties_cluster_password)
    if isinstance(type_properties_cluster_ssh_user_name, str):
        type_properties_cluster_ssh_user_name = json.loads(type_properties_cluster_ssh_user_name)
    if isinstance(type_properties_cluster_ssh_password, str):
        type_properties_cluster_ssh_password = json.loads(type_properties_cluster_ssh_password)
    if isinstance(type_properties_additional_linked_service_names, str):
        type_properties_additional_linked_service_names = json.loads(type_properties_additional_linked_service_names)
    if isinstance(type_properties_hcatalog_linked_service_name, str):
        type_properties_hcatalog_linked_service_name = json.loads(type_properties_hcatalog_linked_service_name)
    if isinstance(type_properties_cluster_type, str):
        type_properties_cluster_type = json.loads(type_properties_cluster_type)
    if isinstance(type_properties_spark_version, str):
        type_properties_spark_version = json.loads(type_properties_spark_version)
    if isinstance(type_properties_core_configuration, str):
        type_properties_core_configuration = json.loads(type_properties_core_configuration)
    if isinstance(type_properties_h_base_configuration, str):
        type_properties_h_base_configuration = json.loads(type_properties_h_base_configuration)
    if isinstance(type_properties_hdfs_configuration, str):
        type_properties_hdfs_configuration = json.loads(type_properties_hdfs_configuration)
    if isinstance(type_properties_hive_configuration, str):
        type_properties_hive_configuration = json.loads(type_properties_hive_configuration)
    if isinstance(type_properties_map_reduce_configuration, str):
        type_properties_map_reduce_configuration = json.loads(type_properties_map_reduce_configuration)
    if isinstance(type_properties_oozie_configuration, str):
        type_properties_oozie_configuration = json.loads(type_properties_oozie_configuration)
    if isinstance(type_properties_storm_configuration, str):
        type_properties_storm_configuration = json.loads(type_properties_storm_configuration)
    if isinstance(type_properties_yarn_configuration, str):
        type_properties_yarn_configuration = json.loads(type_properties_yarn_configuration)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_head_node_size, str):
        type_properties_head_node_size = json.loads(type_properties_head_node_size)
    if isinstance(type_properties_data_node_size, str):
        type_properties_data_node_size = json.loads(type_properties_data_node_size)
    if isinstance(type_properties_zookeeper_node_size, str):
        type_properties_zookeeper_node_size = json.loads(type_properties_zookeeper_node_size)
    if isinstance(type_properties_virtual_network_id, str):
        type_properties_virtual_network_id = json.loads(type_properties_virtual_network_id)
    if isinstance(type_properties_subnet_name, str):
        type_properties_subnet_name = json.loads(type_properties_subnet_name)
    properties = {}
    properties['type'] = 'HDInsightOnDemand'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['cluster_size'] = type_properties_cluster_size
    properties['time_to_live'] = type_properties_time_to_live
    properties['version'] = type_properties_version
    properties['linked_service_name'] = type_properties_linked_service_name
    properties['host_subscription_id'] = type_properties_host_subscription_id
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['cluster_resource_group'] = type_properties_cluster_resource_group
    properties['cluster_name_prefix'] = type_properties_cluster_name_prefix
    properties['cluster_user_name'] = type_properties_cluster_user_name
    properties['cluster_password'] = type_properties_cluster_password
    properties['cluster_ssh_user_name'] = type_properties_cluster_ssh_user_name
    properties['cluster_ssh_password'] = type_properties_cluster_ssh_password
    properties['additional_linked_service_names'] = type_properties_additional_linked_service_names
    properties['hcatalog_linked_service_name'] = type_properties_hcatalog_linked_service_name
    properties['cluster_type'] = type_properties_cluster_type
    properties['spark_version'] = type_properties_spark_version
    properties['core_configuration'] = type_properties_core_configuration
    properties['h_base_configuration'] = type_properties_h_base_configuration
    properties['hdfs_configuration'] = type_properties_hdfs_configuration
    properties['hive_configuration'] = type_properties_hive_configuration
    properties['map_reduce_configuration'] = type_properties_map_reduce_configuration
    properties['oozie_configuration'] = type_properties_oozie_configuration
    properties['storm_configuration'] = type_properties_storm_configuration
    properties['yarn_configuration'] = type_properties_yarn_configuration
    properties['encrypted_credential'] = type_properties_encrypted_credential
    properties['head_node_size'] = type_properties_head_node_size
    properties['data_node_size'] = type_properties_data_node_size
    properties['zookeeper_node_size'] = type_properties_zookeeper_node_size
    properties['script_actions'] = type_properties_script_actions
    properties['virtual_network_id'] = type_properties_virtual_network_id
    properties['subnet_name'] = type_properties_subnet_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_h_d_insight_on_demand_update(instance, cmd,
                                                            resource_group_name,
                                                            factory_name,
                                                            linked_service_name,
                                                            type_properties_cluster_size,
                                                            type_properties_time_to_live,
                                                            type_properties_version,
                                                            type_properties_linked_service_name,
                                                            type_properties_host_subscription_id,
                                                            type_properties_tenant,
                                                            type_properties_cluster_resource_group,
                                                            if_match=None,
                                                            connect_via=None,
                                                            description=None,
                                                            parameters=None,
                                                            annotations=None,
                                                            type_properties_service_principal_id=None,
                                                            type_properties_service_principal_key=None,
                                                            type_properties_cluster_name_prefix=None,
                                                            type_properties_cluster_user_name=None,
                                                            type_properties_cluster_password=None,
                                                            type_properties_cluster_ssh_user_name=None,
                                                            type_properties_cluster_ssh_password=None,
                                                            type_properties_additional_linked_service_names=None,
                                                            type_properties_hcatalog_linked_service_name=None,
                                                            type_properties_cluster_type=None,
                                                            type_properties_spark_version=None,
                                                            type_properties_core_configuration=None,
                                                            type_properties_h_base_configuration=None,
                                                            type_properties_hdfs_configuration=None,
                                                            type_properties_hive_configuration=None,
                                                            type_properties_map_reduce_configuration=None,
                                                            type_properties_oozie_configuration=None,
                                                            type_properties_storm_configuration=None,
                                                            type_properties_yarn_configuration=None,
                                                            type_properties_encrypted_credential=None,
                                                            type_properties_head_node_size=None,
                                                            type_properties_data_node_size=None,
                                                            type_properties_zookeeper_node_size=None,
                                                            type_properties_script_actions=None,
                                                            type_properties_virtual_network_id=None,
                                                            type_properties_subnet_name=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_cluster_size, str):
        type_properties_cluster_size = json.loads(type_properties_cluster_size)
    if isinstance(type_properties_time_to_live, str):
        type_properties_time_to_live = json.loads(type_properties_time_to_live)
    if isinstance(type_properties_version, str):
        type_properties_version = json.loads(type_properties_version)
    if isinstance(type_properties_linked_service_name, str):
        type_properties_linked_service_name = json.loads(type_properties_linked_service_name)
    if isinstance(type_properties_host_subscription_id, str):
        type_properties_host_subscription_id = json.loads(type_properties_host_subscription_id)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_cluster_resource_group, str):
        type_properties_cluster_resource_group = json.loads(type_properties_cluster_resource_group)
    if isinstance(type_properties_cluster_name_prefix, str):
        type_properties_cluster_name_prefix = json.loads(type_properties_cluster_name_prefix)
    if isinstance(type_properties_cluster_user_name, str):
        type_properties_cluster_user_name = json.loads(type_properties_cluster_user_name)
    if isinstance(type_properties_cluster_password, str):
        type_properties_cluster_password = json.loads(type_properties_cluster_password)
    if isinstance(type_properties_cluster_ssh_user_name, str):
        type_properties_cluster_ssh_user_name = json.loads(type_properties_cluster_ssh_user_name)
    if isinstance(type_properties_cluster_ssh_password, str):
        type_properties_cluster_ssh_password = json.loads(type_properties_cluster_ssh_password)
    if isinstance(type_properties_additional_linked_service_names, str):
        type_properties_additional_linked_service_names = json.loads(type_properties_additional_linked_service_names)
    if isinstance(type_properties_hcatalog_linked_service_name, str):
        type_properties_hcatalog_linked_service_name = json.loads(type_properties_hcatalog_linked_service_name)
    if isinstance(type_properties_cluster_type, str):
        type_properties_cluster_type = json.loads(type_properties_cluster_type)
    if isinstance(type_properties_spark_version, str):
        type_properties_spark_version = json.loads(type_properties_spark_version)
    if isinstance(type_properties_core_configuration, str):
        type_properties_core_configuration = json.loads(type_properties_core_configuration)
    if isinstance(type_properties_h_base_configuration, str):
        type_properties_h_base_configuration = json.loads(type_properties_h_base_configuration)
    if isinstance(type_properties_hdfs_configuration, str):
        type_properties_hdfs_configuration = json.loads(type_properties_hdfs_configuration)
    if isinstance(type_properties_hive_configuration, str):
        type_properties_hive_configuration = json.loads(type_properties_hive_configuration)
    if isinstance(type_properties_map_reduce_configuration, str):
        type_properties_map_reduce_configuration = json.loads(type_properties_map_reduce_configuration)
    if isinstance(type_properties_oozie_configuration, str):
        type_properties_oozie_configuration = json.loads(type_properties_oozie_configuration)
    if isinstance(type_properties_storm_configuration, str):
        type_properties_storm_configuration = json.loads(type_properties_storm_configuration)
    if isinstance(type_properties_yarn_configuration, str):
        type_properties_yarn_configuration = json.loads(type_properties_yarn_configuration)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_head_node_size, str):
        type_properties_head_node_size = json.loads(type_properties_head_node_size)
    if isinstance(type_properties_data_node_size, str):
        type_properties_data_node_size = json.loads(type_properties_data_node_size)
    if isinstance(type_properties_zookeeper_node_size, str):
        type_properties_zookeeper_node_size = json.loads(type_properties_zookeeper_node_size)
    if isinstance(type_properties_virtual_network_id, str):
        type_properties_virtual_network_id = json.loads(type_properties_virtual_network_id)
    if isinstance(type_properties_subnet_name, str):
        type_properties_subnet_name = json.loads(type_properties_subnet_name)
    instance.type = 'HDInsightOnDemand'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.cluster_size = type_properties_cluster_size
    instance.time_to_live = type_properties_time_to_live
    instance.version = type_properties_version
    instance.linked_service_name = type_properties_linked_service_name
    instance.host_subscription_id = type_properties_host_subscription_id
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.cluster_resource_group = type_properties_cluster_resource_group
    instance.cluster_name_prefix = type_properties_cluster_name_prefix
    instance.cluster_user_name = type_properties_cluster_user_name
    instance.cluster_password = type_properties_cluster_password
    instance.cluster_ssh_user_name = type_properties_cluster_ssh_user_name
    instance.cluster_ssh_password = type_properties_cluster_ssh_password
    instance.additional_linked_service_names = type_properties_additional_linked_service_names
    instance.hcatalog_linked_service_name = type_properties_hcatalog_linked_service_name
    instance.cluster_type = type_properties_cluster_type
    instance.spark_version = type_properties_spark_version
    instance.core_configuration = type_properties_core_configuration
    instance.h_base_configuration = type_properties_h_base_configuration
    instance.hdfs_configuration = type_properties_hdfs_configuration
    instance.hive_configuration = type_properties_hive_configuration
    instance.map_reduce_configuration = type_properties_map_reduce_configuration
    instance.oozie_configuration = type_properties_oozie_configuration
    instance.storm_configuration = type_properties_storm_configuration
    instance.yarn_configuration = type_properties_yarn_configuration
    instance.encrypted_credential = type_properties_encrypted_credential
    instance.head_node_size = type_properties_head_node_size
    instance.data_node_size = type_properties_data_node_size
    instance.zookeeper_node_size = type_properties_zookeeper_node_size
    instance.script_actions = type_properties_script_actions
    instance.virtual_network_id = type_properties_virtual_network_id
    instance.subnet_name = type_properties_subnet_name
    return instance


def datafactory_linked_service_hdfs_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_url,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_authentication_type=None,
                                           type_properties_encrypted_credential=None,
                                           type_properties_user_name=None,
                                           type_properties_password=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    properties = {}
    properties['type'] = 'Hdfs'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['authentication_type'] = type_properties_authentication_type
    properties['encrypted_credential'] = type_properties_encrypted_credential
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_hdfs_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_url,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_authentication_type=None,
                                           type_properties_encrypted_credential=None,
                                           type_properties_user_name=None,
                                           type_properties_password=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    instance.type = 'Hdfs'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.authentication_type = type_properties_authentication_type
    instance.encrypted_credential = type_properties_encrypted_credential
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    return instance


def datafactory_linked_service_hive_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           type_properties_authentication_type,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_port=None,
                                           type_properties_server_type=None,
                                           type_properties_thrift_transport_protocol=None,
                                           type_properties_service_discovery_mode=None,
                                           type_properties_zoo_keeper_name_space=None,
                                           type_properties_use_native_query=None,
                                           type_properties_username=None,
                                           type_properties_password=None,
                                           type_properties_http_path=None,
                                           type_properties_enable_ssl=None,
                                           type_properties_trusted_cert_path=None,
                                           type_properties_use_system_trust_store=None,
                                           type_properties_allow_host_name_cnmismatch=None,
                                           type_properties_allow_self_signed_server_cert=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_discovery_mode, str):
        type_properties_service_discovery_mode = json.loads(type_properties_service_discovery_mode)
    if isinstance(type_properties_zoo_keeper_name_space, str):
        type_properties_zoo_keeper_name_space = json.loads(type_properties_zoo_keeper_name_space)
    if isinstance(type_properties_use_native_query, str):
        type_properties_use_native_query = json.loads(type_properties_use_native_query)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Hive'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['server_type'] = type_properties_server_type
    properties['thrift_transport_protocol'] = type_properties_thrift_transport_protocol
    properties['authentication_type'] = type_properties_authentication_type
    properties['service_discovery_mode'] = type_properties_service_discovery_mode
    properties['zoo_keeper_name_space'] = type_properties_zoo_keeper_name_space
    properties['use_native_query'] = type_properties_use_native_query
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['http_path'] = type_properties_http_path
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['allow_host_name_cn_mismatch'] = type_properties_allow_host_name_cnmismatch
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_hive_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           type_properties_authentication_type,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_port=None,
                                           type_properties_server_type=None,
                                           type_properties_thrift_transport_protocol=None,
                                           type_properties_service_discovery_mode=None,
                                           type_properties_zoo_keeper_name_space=None,
                                           type_properties_use_native_query=None,
                                           type_properties_username=None,
                                           type_properties_password=None,
                                           type_properties_http_path=None,
                                           type_properties_enable_ssl=None,
                                           type_properties_trusted_cert_path=None,
                                           type_properties_use_system_trust_store=None,
                                           type_properties_allow_host_name_cnmismatch=None,
                                           type_properties_allow_self_signed_server_cert=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_service_discovery_mode, str):
        type_properties_service_discovery_mode = json.loads(type_properties_service_discovery_mode)
    if isinstance(type_properties_zoo_keeper_name_space, str):
        type_properties_zoo_keeper_name_space = json.loads(type_properties_zoo_keeper_name_space)
    if isinstance(type_properties_use_native_query, str):
        type_properties_use_native_query = json.loads(type_properties_use_native_query)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Hive'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.server_type = type_properties_server_type
    instance.thrift_transport_protocol = type_properties_thrift_transport_protocol
    instance.authentication_type = type_properties_authentication_type
    instance.service_discovery_mode = type_properties_service_discovery_mode
    instance.zoo_keeper_name_space = type_properties_zoo_keeper_name_space
    instance.use_native_query = type_properties_use_native_query
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.http_path = type_properties_http_path
    instance.enable_ssl = type_properties_enable_ssl
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.allow_host_name_cn_mismatch = type_properties_allow_host_name_cnmismatch
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_http_server_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_url,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_authentication_type=None,
                                                  type_properties_user_name=None,
                                                  type_properties_password=None,
                                                  type_properties_embedded_cert_data=None,
                                                  type_properties_cert_thumbprint=None,
                                                  type_properties_encrypted_credential=None,
                                                  type_properties_enable_server_certificate_validation=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_embedded_cert_data, str):
        type_properties_embedded_cert_data = json.loads(type_properties_embedded_cert_data)
    if isinstance(type_properties_cert_thumbprint, str):
        type_properties_cert_thumbprint = json.loads(type_properties_cert_thumbprint)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_enable_server_certificate_validation, str):
        type_properties_enable_server_certificate_validation = json.loads(type_properties_enable_server_certificate_validation)
    properties = {}
    properties['type'] = 'HttpServer'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['authentication_type'] = type_properties_authentication_type
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['embedded_cert_data'] = type_properties_embedded_cert_data
    properties['cert_thumbprint'] = type_properties_cert_thumbprint
    properties['encrypted_credential'] = type_properties_encrypted_credential
    properties['enable_server_certificate_validation'] = type_properties_enable_server_certificate_validation
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_http_server_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_url,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_authentication_type=None,
                                                  type_properties_user_name=None,
                                                  type_properties_password=None,
                                                  type_properties_embedded_cert_data=None,
                                                  type_properties_cert_thumbprint=None,
                                                  type_properties_encrypted_credential=None,
                                                  type_properties_enable_server_certificate_validation=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_embedded_cert_data, str):
        type_properties_embedded_cert_data = json.loads(type_properties_embedded_cert_data)
    if isinstance(type_properties_cert_thumbprint, str):
        type_properties_cert_thumbprint = json.loads(type_properties_cert_thumbprint)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_enable_server_certificate_validation, str):
        type_properties_enable_server_certificate_validation = json.loads(type_properties_enable_server_certificate_validation)
    instance.type = 'HttpServer'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.authentication_type = type_properties_authentication_type
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.embedded_cert_data = type_properties_embedded_cert_data
    instance.cert_thumbprint = type_properties_cert_thumbprint
    instance.encrypted_credential = type_properties_encrypted_credential
    instance.enable_server_certificate_validation = type_properties_enable_server_certificate_validation
    return instance


def datafactory_linked_service_hubspot_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_client_id,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_client_secret=None,
                                              type_properties_access_token=None,
                                              type_properties_refresh_token=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_refresh_token, str):
        type_properties_refresh_token = json.loads(type_properties_refresh_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Hubspot'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['access_token'] = type_properties_access_token
    properties['refresh_token'] = type_properties_refresh_token
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_hubspot_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_client_id,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_client_secret=None,
                                              type_properties_access_token=None,
                                              type_properties_refresh_token=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_refresh_token, str):
        type_properties_refresh_token = json.loads(type_properties_refresh_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Hubspot'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.access_token = type_properties_access_token
    instance.refresh_token = type_properties_refresh_token
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_impala_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_authentication_type,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_port=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_enable_ssl=None,
                                             type_properties_trusted_cert_path=None,
                                             type_properties_use_system_trust_store=None,
                                             type_properties_allow_host_name_cnmismatch=None,
                                             type_properties_allow_self_signed_server_cert=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Impala'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['allow_host_name_cn_mismatch'] = type_properties_allow_host_name_cnmismatch
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_impala_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_authentication_type,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_port=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_enable_ssl=None,
                                             type_properties_trusted_cert_path=None,
                                             type_properties_use_system_trust_store=None,
                                             type_properties_allow_host_name_cnmismatch=None,
                                             type_properties_allow_self_signed_server_cert=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Impala'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.enable_ssl = type_properties_enable_ssl
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.allow_host_name_cn_mismatch = type_properties_allow_host_name_cnmismatch
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_informix_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               type_properties_connection_string,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_authentication_type=None,
                                               type_properties_credential=None,
                                               type_properties_user_name=None,
                                               type_properties_password=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_credential, str):
        type_properties_credential = json.loads(type_properties_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Informix'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['authentication_type'] = type_properties_authentication_type
    properties['credential'] = type_properties_credential
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_informix_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               type_properties_connection_string,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_authentication_type=None,
                                               type_properties_credential=None,
                                               type_properties_user_name=None,
                                               type_properties_password=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_credential, str):
        type_properties_credential = json.loads(type_properties_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Informix'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.authentication_type = type_properties_authentication_type
    instance.credential = type_properties_credential
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_jira_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           type_properties_username,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_port=None,
                                           type_properties_password=None,
                                           type_properties_use_encrypted_endpoints=None,
                                           type_properties_use_host_verification=None,
                                           type_properties_use_peer_verification=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Jira'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_jira_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           type_properties_username,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_port=None,
                                           type_properties_password=None,
                                           type_properties_use_encrypted_endpoints=None,
                                           type_properties_use_host_verification=None,
                                           type_properties_use_peer_verification=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Jira'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_magento_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_host,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_access_token=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Magento'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['access_token'] = type_properties_access_token
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_magento_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_host,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_access_token=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Magento'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.access_token = type_properties_access_token
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_maria_d_b_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_pwd=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'MariaDB'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['pwd'] = type_properties_pwd
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_maria_d_b_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_connection_string=None,
                                                type_properties_pwd=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'MariaDB'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.pwd = type_properties_pwd
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_marketo_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_endpoint,
                                              type_properties_client_id,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_client_secret=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Marketo'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_marketo_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_endpoint,
                                              type_properties_client_id,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_client_secret=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Marketo'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_microsoft_access_create(cmd, client,
                                                       resource_group_name,
                                                       factory_name,
                                                       linked_service_name,
                                                       type_properties_connection_string,
                                                       if_match=None,
                                                       connect_via=None,
                                                       description=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       type_properties_authentication_type=None,
                                                       type_properties_credential=None,
                                                       type_properties_user_name=None,
                                                       type_properties_password=None,
                                                       type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_credential, str):
        type_properties_credential = json.loads(type_properties_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'MicrosoftAccess'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['authentication_type'] = type_properties_authentication_type
    properties['credential'] = type_properties_credential
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_microsoft_access_update(instance, cmd,
                                                       resource_group_name,
                                                       factory_name,
                                                       linked_service_name,
                                                       type_properties_connection_string,
                                                       if_match=None,
                                                       connect_via=None,
                                                       description=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       type_properties_authentication_type=None,
                                                       type_properties_credential=None,
                                                       type_properties_user_name=None,
                                                       type_properties_password=None,
                                                       type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_credential, str):
        type_properties_credential = json.loads(type_properties_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'MicrosoftAccess'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.authentication_type = type_properties_authentication_type
    instance.credential = type_properties_credential
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_mongo_db_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               type_properties_server,
                                               type_properties_database_name,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_authentication_type=None,
                                               type_properties_username=None,
                                               type_properties_password=None,
                                               type_properties_auth_source=None,
                                               type_properties_port=None,
                                               type_properties_enable_ssl=None,
                                               type_properties_allow_self_signed_server_cert=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_database_name, str):
        type_properties_database_name = json.loads(type_properties_database_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_auth_source, str):
        type_properties_auth_source = json.loads(type_properties_auth_source)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'MongoDb'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['server'] = type_properties_server
    properties['authentication_type'] = type_properties_authentication_type
    properties['database_name'] = type_properties_database_name
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['auth_source'] = type_properties_auth_source
    properties['port'] = type_properties_port
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_mongo_db_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               type_properties_server,
                                               type_properties_database_name,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_authentication_type=None,
                                               type_properties_username=None,
                                               type_properties_password=None,
                                               type_properties_auth_source=None,
                                               type_properties_port=None,
                                               type_properties_enable_ssl=None,
                                               type_properties_allow_self_signed_server_cert=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_database_name, str):
        type_properties_database_name = json.loads(type_properties_database_name)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_auth_source, str):
        type_properties_auth_source = json.loads(type_properties_auth_source)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'MongoDb'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.server = type_properties_server
    instance.authentication_type = type_properties_authentication_type
    instance.database_name = type_properties_database_name
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.auth_source = type_properties_auth_source
    instance.port = type_properties_port
    instance.enable_ssl = type_properties_enable_ssl
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_mongo_db_v2_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_connection_string,
                                                  type_properties_database,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    properties = {}
    properties['type'] = 'MongoDbV2'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['database'] = type_properties_database
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_mongo_db_v2_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_connection_string,
                                                  type_properties_database,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    instance.type = 'MongoDbV2'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.database = type_properties_database
    return instance


def datafactory_linked_service_my_sql_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_connection_string,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'MySql'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_my_sql_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_connection_string,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'MySql'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_netezza_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_connection_string=None,
                                              type_properties_pwd=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Netezza'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['pwd'] = type_properties_pwd
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_netezza_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_connection_string=None,
                                              type_properties_pwd=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Netezza'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.pwd = type_properties_pwd
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_o_data_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_url,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_authentication_type=None,
                                             type_properties_user_name=None,
                                             type_properties_password=None,
                                             type_properties_tenant=None,
                                             type_properties_service_principal_id=None,
                                             type_properties_aad_resource_id=None,
                                             type_properties_aad_service_principal_credential_type=None,
                                             type_properties_service_principal_key=None,
                                             type_properties_service_principal_embedded_cert=None,
                                             type_properties_service_principal_embedded_cert_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_aad_resource_id, str):
        type_properties_aad_resource_id = json.loads(type_properties_aad_resource_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_service_principal_embedded_cert, str):
        type_properties_service_principal_embedded_cert = json.loads(type_properties_service_principal_embedded_cert)
    if isinstance(type_properties_service_principal_embedded_cert_password, str):
        type_properties_service_principal_embedded_cert_password = json.loads(type_properties_service_principal_embedded_cert_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'OData'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['authentication_type'] = type_properties_authentication_type
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['tenant'] = type_properties_tenant
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['aad_resource_id'] = type_properties_aad_resource_id
    properties['aad_service_principal_credential_type'] = type_properties_aad_service_principal_credential_type
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['service_principal_embedded_cert'] = type_properties_service_principal_embedded_cert
    properties['service_principal_embedded_cert_password'] = type_properties_service_principal_embedded_cert_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_o_data_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_url,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_authentication_type=None,
                                             type_properties_user_name=None,
                                             type_properties_password=None,
                                             type_properties_tenant=None,
                                             type_properties_service_principal_id=None,
                                             type_properties_aad_resource_id=None,
                                             type_properties_aad_service_principal_credential_type=None,
                                             type_properties_service_principal_key=None,
                                             type_properties_service_principal_embedded_cert=None,
                                             type_properties_service_principal_embedded_cert_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_aad_resource_id, str):
        type_properties_aad_resource_id = json.loads(type_properties_aad_resource_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_service_principal_embedded_cert, str):
        type_properties_service_principal_embedded_cert = json.loads(type_properties_service_principal_embedded_cert)
    if isinstance(type_properties_service_principal_embedded_cert_password, str):
        type_properties_service_principal_embedded_cert_password = json.loads(type_properties_service_principal_embedded_cert_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'OData'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.authentication_type = type_properties_authentication_type
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.tenant = type_properties_tenant
    instance.service_principal_id = type_properties_service_principal_id
    instance.aad_resource_id = type_properties_aad_resource_id
    instance.aad_service_principal_credential_type = type_properties_aad_service_principal_credential_type
    instance.service_principal_key = type_properties_service_principal_key
    instance.service_principal_embedded_cert = type_properties_service_principal_embedded_cert
    instance.service_principal_embedded_cert_password = type_properties_service_principal_embedded_cert_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_odbc_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_connection_string,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_authentication_type=None,
                                           type_properties_credential=None,
                                           type_properties_user_name=None,
                                           type_properties_password=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_credential, str):
        type_properties_credential = json.loads(type_properties_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Odbc'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['authentication_type'] = type_properties_authentication_type
    properties['credential'] = type_properties_credential
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_odbc_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_connection_string,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_authentication_type=None,
                                           type_properties_credential=None,
                                           type_properties_user_name=None,
                                           type_properties_password=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_authentication_type, str):
        type_properties_authentication_type = json.loads(type_properties_authentication_type)
    if isinstance(type_properties_credential, str):
        type_properties_credential = json.loads(type_properties_credential)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Odbc'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.authentication_type = type_properties_authentication_type
    instance.credential = type_properties_credential
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_office365_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_office365tenant_id,
                                                type_properties_service_principal_tenant_id,
                                                type_properties_service_principal_id,
                                                type_properties_service_principal_key,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_office365tenant_id, str):
        type_properties_office365tenant_id = json.loads(type_properties_office365tenant_id)
    if isinstance(type_properties_service_principal_tenant_id, str):
        type_properties_service_principal_tenant_id = json.loads(type_properties_service_principal_tenant_id)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Office365'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['office365_tenant_id'] = type_properties_office365tenant_id
    properties['service_principal_tenant_id'] = type_properties_service_principal_tenant_id
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_office365_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_office365tenant_id,
                                                type_properties_service_principal_tenant_id,
                                                type_properties_service_principal_id,
                                                type_properties_service_principal_key,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_office365tenant_id, str):
        type_properties_office365tenant_id = json.loads(type_properties_office365tenant_id)
    if isinstance(type_properties_service_principal_tenant_id, str):
        type_properties_service_principal_tenant_id = json.loads(type_properties_service_principal_tenant_id)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Office365'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.office365_tenant_id = type_properties_office365tenant_id
    instance.service_principal_tenant_id = type_properties_service_principal_tenant_id
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_oracle_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_connection_string,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Oracle'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_oracle_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_connection_string,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Oracle'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_oracle_service_cloud_create(cmd, client,
                                                           resource_group_name,
                                                           factory_name,
                                                           linked_service_name,
                                                           type_properties_host,
                                                           type_properties_username,
                                                           type_properties_password,
                                                           if_match=None,
                                                           connect_via=None,
                                                           description=None,
                                                           parameters=None,
                                                           annotations=None,
                                                           type_properties_use_encrypted_endpoints=None,
                                                           type_properties_use_host_verification=None,
                                                           type_properties_use_peer_verification=None,
                                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'OracleServiceCloud'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_oracle_service_cloud_update(instance, cmd,
                                                           resource_group_name,
                                                           factory_name,
                                                           linked_service_name,
                                                           type_properties_host,
                                                           type_properties_username,
                                                           type_properties_password,
                                                           if_match=None,
                                                           connect_via=None,
                                                           description=None,
                                                           parameters=None,
                                                           annotations=None,
                                                           type_properties_use_encrypted_endpoints=None,
                                                           type_properties_use_host_verification=None,
                                                           type_properties_use_peer_verification=None,
                                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'OracleServiceCloud'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_paypal_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_client_id,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_client_secret=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Paypal'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_paypal_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_client_id,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_client_secret=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Paypal'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_phoenix_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_host,
                                              type_properties_authentication_type,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_port=None,
                                              type_properties_http_path=None,
                                              type_properties_username=None,
                                              type_properties_password=None,
                                              type_properties_enable_ssl=None,
                                              type_properties_trusted_cert_path=None,
                                              type_properties_use_system_trust_store=None,
                                              type_properties_allow_host_name_cnmismatch=None,
                                              type_properties_allow_self_signed_server_cert=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Phoenix'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['http_path'] = type_properties_http_path
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['allow_host_name_cn_mismatch'] = type_properties_allow_host_name_cnmismatch
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_phoenix_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_host,
                                              type_properties_authentication_type,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_port=None,
                                              type_properties_http_path=None,
                                              type_properties_username=None,
                                              type_properties_password=None,
                                              type_properties_enable_ssl=None,
                                              type_properties_trusted_cert_path=None,
                                              type_properties_use_system_trust_store=None,
                                              type_properties_allow_host_name_cnmismatch=None,
                                              type_properties_allow_self_signed_server_cert=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Phoenix'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.http_path = type_properties_http_path
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.enable_ssl = type_properties_enable_ssl
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.allow_host_name_cn_mismatch = type_properties_allow_host_name_cnmismatch
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_postgre_sql_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_connection_string,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_password=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'PostgreSql'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_postgre_sql_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_connection_string,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_password=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'PostgreSql'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_presto_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_server_version,
                                             type_properties_catalog,
                                             type_properties_authentication_type,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_port=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_enable_ssl=None,
                                             type_properties_trusted_cert_path=None,
                                             type_properties_use_system_trust_store=None,
                                             type_properties_allow_host_name_cnmismatch=None,
                                             type_properties_allow_self_signed_server_cert=None,
                                             type_properties_time_zone_id=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_server_version, str):
        type_properties_server_version = json.loads(type_properties_server_version)
    if isinstance(type_properties_catalog, str):
        type_properties_catalog = json.loads(type_properties_catalog)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_time_zone_id, str):
        type_properties_time_zone_id = json.loads(type_properties_time_zone_id)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Presto'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['server_version'] = type_properties_server_version
    properties['catalog'] = type_properties_catalog
    properties['port'] = type_properties_port
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['allow_host_name_cn_mismatch'] = type_properties_allow_host_name_cnmismatch
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['time_zone_id'] = type_properties_time_zone_id
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_presto_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_server_version,
                                             type_properties_catalog,
                                             type_properties_authentication_type,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_port=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_enable_ssl=None,
                                             type_properties_trusted_cert_path=None,
                                             type_properties_use_system_trust_store=None,
                                             type_properties_allow_host_name_cnmismatch=None,
                                             type_properties_allow_self_signed_server_cert=None,
                                             type_properties_time_zone_id=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_server_version, str):
        type_properties_server_version = json.loads(type_properties_server_version)
    if isinstance(type_properties_catalog, str):
        type_properties_catalog = json.loads(type_properties_catalog)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_time_zone_id, str):
        type_properties_time_zone_id = json.loads(type_properties_time_zone_id)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Presto'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.server_version = type_properties_server_version
    instance.catalog = type_properties_catalog
    instance.port = type_properties_port
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.enable_ssl = type_properties_enable_ssl
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.allow_host_name_cn_mismatch = type_properties_allow_host_name_cnmismatch
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.time_zone_id = type_properties_time_zone_id
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_quick_books_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_endpoint,
                                                  type_properties_company_id,
                                                  type_properties_consumer_key,
                                                  type_properties_consumer_secret,
                                                  type_properties_access_token,
                                                  type_properties_access_token_secret,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_use_encrypted_endpoints=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_company_id, str):
        type_properties_company_id = json.loads(type_properties_company_id)
    if isinstance(type_properties_consumer_key, str):
        type_properties_consumer_key = json.loads(type_properties_consumer_key)
    if isinstance(type_properties_consumer_secret, str):
        type_properties_consumer_secret = json.loads(type_properties_consumer_secret)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_access_token_secret, str):
        type_properties_access_token_secret = json.loads(type_properties_access_token_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'QuickBooks'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['company_id'] = type_properties_company_id
    properties['consumer_key'] = type_properties_consumer_key
    properties['consumer_secret'] = type_properties_consumer_secret
    properties['access_token'] = type_properties_access_token
    properties['access_token_secret'] = type_properties_access_token_secret
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_quick_books_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_endpoint,
                                                  type_properties_company_id,
                                                  type_properties_consumer_key,
                                                  type_properties_consumer_secret,
                                                  type_properties_access_token,
                                                  type_properties_access_token_secret,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_use_encrypted_endpoints=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_company_id, str):
        type_properties_company_id = json.loads(type_properties_company_id)
    if isinstance(type_properties_consumer_key, str):
        type_properties_consumer_key = json.loads(type_properties_consumer_key)
    if isinstance(type_properties_consumer_secret, str):
        type_properties_consumer_secret = json.loads(type_properties_consumer_secret)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_access_token_secret, str):
        type_properties_access_token_secret = json.loads(type_properties_access_token_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'QuickBooks'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.company_id = type_properties_company_id
    instance.consumer_key = type_properties_consumer_key
    instance.consumer_secret = type_properties_consumer_secret
    instance.access_token = type_properties_access_token
    instance.access_token_secret = type_properties_access_token_secret
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_responsys_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_endpoint,
                                                type_properties_client_id,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_client_secret=None,
                                                type_properties_use_encrypted_endpoints=None,
                                                type_properties_use_host_verification=None,
                                                type_properties_use_peer_verification=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Responsys'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_responsys_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_endpoint,
                                                type_properties_client_id,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_client_secret=None,
                                                type_properties_use_encrypted_endpoints=None,
                                                type_properties_use_host_verification=None,
                                                type_properties_use_peer_verification=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Responsys'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_rest_service_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_url,
                                                   type_properties_authentication_type,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_enable_server_certificate_validation=None,
                                                   type_properties_user_name=None,
                                                   type_properties_password=None,
                                                   type_properties_service_principal_id=None,
                                                   type_properties_service_principal_key=None,
                                                   type_properties_tenant=None,
                                                   type_properties_aad_resource_id=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_enable_server_certificate_validation, str):
        type_properties_enable_server_certificate_validation = json.loads(type_properties_enable_server_certificate_validation)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_aad_resource_id, str):
        type_properties_aad_resource_id = json.loads(type_properties_aad_resource_id)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'RestService'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['enable_server_certificate_validation'] = type_properties_enable_server_certificate_validation
    properties['authentication_type'] = type_properties_authentication_type
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['service_principal_id'] = type_properties_service_principal_id
    properties['service_principal_key'] = type_properties_service_principal_key
    properties['tenant'] = type_properties_tenant
    properties['aad_resource_id'] = type_properties_aad_resource_id
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_rest_service_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_url,
                                                   type_properties_authentication_type,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_enable_server_certificate_validation=None,
                                                   type_properties_user_name=None,
                                                   type_properties_password=None,
                                                   type_properties_service_principal_id=None,
                                                   type_properties_service_principal_key=None,
                                                   type_properties_tenant=None,
                                                   type_properties_aad_resource_id=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_enable_server_certificate_validation, str):
        type_properties_enable_server_certificate_validation = json.loads(type_properties_enable_server_certificate_validation)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_service_principal_id, str):
        type_properties_service_principal_id = json.loads(type_properties_service_principal_id)
    if isinstance(type_properties_service_principal_key, str):
        type_properties_service_principal_key = json.loads(type_properties_service_principal_key)
    if isinstance(type_properties_tenant, str):
        type_properties_tenant = json.loads(type_properties_tenant)
    if isinstance(type_properties_aad_resource_id, str):
        type_properties_aad_resource_id = json.loads(type_properties_aad_resource_id)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'RestService'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.enable_server_certificate_validation = type_properties_enable_server_certificate_validation
    instance.authentication_type = type_properties_authentication_type
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.service_principal_id = type_properties_service_principal_id
    instance.service_principal_key = type_properties_service_principal_key
    instance.tenant = type_properties_tenant
    instance.aad_resource_id = type_properties_aad_resource_id
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_salesforce_create(cmd, client,
                                                 resource_group_name,
                                                 factory_name,
                                                 linked_service_name,
                                                 if_match=None,
                                                 connect_via=None,
                                                 description=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 type_properties_environment_url=None,
                                                 type_properties_username=None,
                                                 type_properties_password=None,
                                                 type_properties_security_token=None,
                                                 type_properties_api_version=None,
                                                 type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_environment_url, str):
        type_properties_environment_url = json.loads(type_properties_environment_url)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_security_token, str):
        type_properties_security_token = json.loads(type_properties_security_token)
    if isinstance(type_properties_api_version, str):
        type_properties_api_version = json.loads(type_properties_api_version)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Salesforce'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['environment_url'] = type_properties_environment_url
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['security_token'] = type_properties_security_token
    properties['api_version'] = type_properties_api_version
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_salesforce_update(instance, cmd,
                                                 resource_group_name,
                                                 factory_name,
                                                 linked_service_name,
                                                 if_match=None,
                                                 connect_via=None,
                                                 description=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 type_properties_environment_url=None,
                                                 type_properties_username=None,
                                                 type_properties_password=None,
                                                 type_properties_security_token=None,
                                                 type_properties_api_version=None,
                                                 type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_environment_url, str):
        type_properties_environment_url = json.loads(type_properties_environment_url)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_security_token, str):
        type_properties_security_token = json.loads(type_properties_security_token)
    if isinstance(type_properties_api_version, str):
        type_properties_api_version = json.loads(type_properties_api_version)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Salesforce'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.environment_url = type_properties_environment_url
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.security_token = type_properties_security_token
    instance.api_version = type_properties_api_version
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_salesforce_marketing_cloud_create(cmd, client,
                                                                 resource_group_name,
                                                                 factory_name,
                                                                 linked_service_name,
                                                                 type_properties_client_id,
                                                                 if_match=None,
                                                                 connect_via=None,
                                                                 description=None,
                                                                 parameters=None,
                                                                 annotations=None,
                                                                 type_properties_client_secret=None,
                                                                 type_properties_use_encrypted_endpoints=None,
                                                                 type_properties_use_host_verification=None,
                                                                 type_properties_use_peer_verification=None,
                                                                 type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SalesforceMarketingCloud'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_salesforce_marketing_cloud_update(instance, cmd,
                                                                 resource_group_name,
                                                                 factory_name,
                                                                 linked_service_name,
                                                                 type_properties_client_id,
                                                                 if_match=None,
                                                                 connect_via=None,
                                                                 description=None,
                                                                 parameters=None,
                                                                 annotations=None,
                                                                 type_properties_client_secret=None,
                                                                 type_properties_use_encrypted_endpoints=None,
                                                                 type_properties_use_host_verification=None,
                                                                 type_properties_use_peer_verification=None,
                                                                 type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SalesforceMarketingCloud'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_salesforce_service_cloud_create(cmd, client,
                                                               resource_group_name,
                                                               factory_name,
                                                               linked_service_name,
                                                               if_match=None,
                                                               connect_via=None,
                                                               description=None,
                                                               parameters=None,
                                                               annotations=None,
                                                               type_properties_environment_url=None,
                                                               type_properties_username=None,
                                                               type_properties_password=None,
                                                               type_properties_security_token=None,
                                                               type_properties_api_version=None,
                                                               type_properties_extended_properties=None,
                                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_environment_url, str):
        type_properties_environment_url = json.loads(type_properties_environment_url)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_security_token, str):
        type_properties_security_token = json.loads(type_properties_security_token)
    if isinstance(type_properties_api_version, str):
        type_properties_api_version = json.loads(type_properties_api_version)
    if isinstance(type_properties_extended_properties, str):
        type_properties_extended_properties = json.loads(type_properties_extended_properties)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SalesforceServiceCloud'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['environment_url'] = type_properties_environment_url
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['security_token'] = type_properties_security_token
    properties['api_version'] = type_properties_api_version
    properties['extended_properties'] = type_properties_extended_properties
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_salesforce_service_cloud_update(instance, cmd,
                                                               resource_group_name,
                                                               factory_name,
                                                               linked_service_name,
                                                               if_match=None,
                                                               connect_via=None,
                                                               description=None,
                                                               parameters=None,
                                                               annotations=None,
                                                               type_properties_environment_url=None,
                                                               type_properties_username=None,
                                                               type_properties_password=None,
                                                               type_properties_security_token=None,
                                                               type_properties_api_version=None,
                                                               type_properties_extended_properties=None,
                                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_environment_url, str):
        type_properties_environment_url = json.loads(type_properties_environment_url)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_security_token, str):
        type_properties_security_token = json.loads(type_properties_security_token)
    if isinstance(type_properties_api_version, str):
        type_properties_api_version = json.loads(type_properties_api_version)
    if isinstance(type_properties_extended_properties, str):
        type_properties_extended_properties = json.loads(type_properties_extended_properties)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SalesforceServiceCloud'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.environment_url = type_properties_environment_url
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.security_token = type_properties_security_token
    instance.api_version = type_properties_api_version
    instance.extended_properties = type_properties_extended_properties
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sap_b_w_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_server,
                                              type_properties_system_number,
                                              type_properties_client_id,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_user_name=None,
                                              type_properties_password=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_system_number, str):
        type_properties_system_number = json.loads(type_properties_system_number)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SapBW'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['server'] = type_properties_server
    properties['system_number'] = type_properties_system_number
    properties['client_id'] = type_properties_client_id
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sap_b_w_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_server,
                                              type_properties_system_number,
                                              type_properties_client_id,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_user_name=None,
                                              type_properties_password=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_system_number, str):
        type_properties_system_number = json.loads(type_properties_system_number)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SapBW'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.server = type_properties_server
    instance.system_number = type_properties_system_number
    instance.client_id = type_properties_client_id
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sap_cloud_for_customer_create(cmd, client,
                                                             resource_group_name,
                                                             factory_name,
                                                             linked_service_name,
                                                             type_properties_url,
                                                             if_match=None,
                                                             connect_via=None,
                                                             description=None,
                                                             parameters=None,
                                                             annotations=None,
                                                             type_properties_username=None,
                                                             type_properties_password=None,
                                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SapCloudForCustomer'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sap_cloud_for_customer_update(instance, cmd,
                                                             resource_group_name,
                                                             factory_name,
                                                             linked_service_name,
                                                             type_properties_url,
                                                             if_match=None,
                                                             connect_via=None,
                                                             description=None,
                                                             parameters=None,
                                                             annotations=None,
                                                             type_properties_username=None,
                                                             type_properties_password=None,
                                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_url, str):
        type_properties_url = json.loads(type_properties_url)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SapCloudForCustomer'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sap_ecc_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_url,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_username=None,
                                              type_properties_password=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    properties = {}
    properties['type'] = 'SapEcc'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['url'] = type_properties_url
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sap_ecc_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_url,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_username=None,
                                              type_properties_password=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    instance.type = 'SapEcc'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.url = type_properties_url
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sap_hana_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_connection_string=None,
                                               type_properties_server=None,
                                               type_properties_authentication_type=None,
                                               type_properties_user_name=None,
                                               type_properties_password=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SapHana'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['server'] = type_properties_server
    properties['authentication_type'] = type_properties_authentication_type
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sap_hana_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_connection_string=None,
                                               type_properties_server=None,
                                               type_properties_authentication_type=None,
                                               type_properties_user_name=None,
                                               type_properties_password=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SapHana'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.server = type_properties_server
    instance.authentication_type = type_properties_authentication_type
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sap_open_hub_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_server,
                                                   type_properties_system_number,
                                                   type_properties_client_id,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_language=None,
                                                   type_properties_user_name=None,
                                                   type_properties_password=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_system_number, str):
        type_properties_system_number = json.loads(type_properties_system_number)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_language, str):
        type_properties_language = json.loads(type_properties_language)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SapOpenHub'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['server'] = type_properties_server
    properties['system_number'] = type_properties_system_number
    properties['client_id'] = type_properties_client_id
    properties['language'] = type_properties_language
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sap_open_hub_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   linked_service_name,
                                                   type_properties_server,
                                                   type_properties_system_number,
                                                   type_properties_client_id,
                                                   if_match=None,
                                                   connect_via=None,
                                                   description=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   type_properties_language=None,
                                                   type_properties_user_name=None,
                                                   type_properties_password=None,
                                                   type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_system_number, str):
        type_properties_system_number = json.loads(type_properties_system_number)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_language, str):
        type_properties_language = json.loads(type_properties_language)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SapOpenHub'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.server = type_properties_server
    instance.system_number = type_properties_system_number
    instance.client_id = type_properties_client_id
    instance.language = type_properties_language
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sap_table_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_server=None,
                                                type_properties_system_number=None,
                                                type_properties_client_id=None,
                                                type_properties_language=None,
                                                type_properties_system_id=None,
                                                type_properties_user_name=None,
                                                type_properties_password=None,
                                                type_properties_message_server=None,
                                                type_properties_message_server_service=None,
                                                type_properties_snc_mode=None,
                                                type_properties_snc_my_name=None,
                                                type_properties_snc_partner_name=None,
                                                type_properties_snc_library_path=None,
                                                type_properties_snc_qop=None,
                                                type_properties_logon_group=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_system_number, str):
        type_properties_system_number = json.loads(type_properties_system_number)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_language, str):
        type_properties_language = json.loads(type_properties_language)
    if isinstance(type_properties_system_id, str):
        type_properties_system_id = json.loads(type_properties_system_id)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_message_server, str):
        type_properties_message_server = json.loads(type_properties_message_server)
    if isinstance(type_properties_message_server_service, str):
        type_properties_message_server_service = json.loads(type_properties_message_server_service)
    if isinstance(type_properties_snc_mode, str):
        type_properties_snc_mode = json.loads(type_properties_snc_mode)
    if isinstance(type_properties_snc_my_name, str):
        type_properties_snc_my_name = json.loads(type_properties_snc_my_name)
    if isinstance(type_properties_snc_partner_name, str):
        type_properties_snc_partner_name = json.loads(type_properties_snc_partner_name)
    if isinstance(type_properties_snc_library_path, str):
        type_properties_snc_library_path = json.loads(type_properties_snc_library_path)
    if isinstance(type_properties_snc_qop, str):
        type_properties_snc_qop = json.loads(type_properties_snc_qop)
    if isinstance(type_properties_logon_group, str):
        type_properties_logon_group = json.loads(type_properties_logon_group)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SapTable'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['server'] = type_properties_server
    properties['system_number'] = type_properties_system_number
    properties['client_id'] = type_properties_client_id
    properties['language'] = type_properties_language
    properties['system_id'] = type_properties_system_id
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['message_server'] = type_properties_message_server
    properties['message_server_service'] = type_properties_message_server_service
    properties['snc_mode'] = type_properties_snc_mode
    properties['snc_my_name'] = type_properties_snc_my_name
    properties['snc_partner_name'] = type_properties_snc_partner_name
    properties['snc_library_path'] = type_properties_snc_library_path
    properties['snc_qop'] = type_properties_snc_qop
    properties['logon_group'] = type_properties_logon_group
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sap_table_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_server=None,
                                                type_properties_system_number=None,
                                                type_properties_client_id=None,
                                                type_properties_language=None,
                                                type_properties_system_id=None,
                                                type_properties_user_name=None,
                                                type_properties_password=None,
                                                type_properties_message_server=None,
                                                type_properties_message_server_service=None,
                                                type_properties_snc_mode=None,
                                                type_properties_snc_my_name=None,
                                                type_properties_snc_partner_name=None,
                                                type_properties_snc_library_path=None,
                                                type_properties_snc_qop=None,
                                                type_properties_logon_group=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_system_number, str):
        type_properties_system_number = json.loads(type_properties_system_number)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_language, str):
        type_properties_language = json.loads(type_properties_language)
    if isinstance(type_properties_system_id, str):
        type_properties_system_id = json.loads(type_properties_system_id)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_message_server, str):
        type_properties_message_server = json.loads(type_properties_message_server)
    if isinstance(type_properties_message_server_service, str):
        type_properties_message_server_service = json.loads(type_properties_message_server_service)
    if isinstance(type_properties_snc_mode, str):
        type_properties_snc_mode = json.loads(type_properties_snc_mode)
    if isinstance(type_properties_snc_my_name, str):
        type_properties_snc_my_name = json.loads(type_properties_snc_my_name)
    if isinstance(type_properties_snc_partner_name, str):
        type_properties_snc_partner_name = json.loads(type_properties_snc_partner_name)
    if isinstance(type_properties_snc_library_path, str):
        type_properties_snc_library_path = json.loads(type_properties_snc_library_path)
    if isinstance(type_properties_snc_qop, str):
        type_properties_snc_qop = json.loads(type_properties_snc_qop)
    if isinstance(type_properties_logon_group, str):
        type_properties_logon_group = json.loads(type_properties_logon_group)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SapTable'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.server = type_properties_server
    instance.system_number = type_properties_system_number
    instance.client_id = type_properties_client_id
    instance.language = type_properties_language
    instance.system_id = type_properties_system_id
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.message_server = type_properties_message_server
    instance.message_server_service = type_properties_message_server_service
    instance.snc_mode = type_properties_snc_mode
    instance.snc_my_name = type_properties_snc_my_name
    instance.snc_partner_name = type_properties_snc_partner_name
    instance.snc_library_path = type_properties_snc_library_path
    instance.snc_qop = type_properties_snc_qop
    instance.logon_group = type_properties_logon_group
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_service_now_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_endpoint,
                                                  type_properties_authentication_type,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_username=None,
                                                  type_properties_password=None,
                                                  type_properties_client_id=None,
                                                  type_properties_client_secret=None,
                                                  type_properties_use_encrypted_endpoints=None,
                                                  type_properties_use_host_verification=None,
                                                  type_properties_use_peer_verification=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'ServiceNow'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_service_now_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  linked_service_name,
                                                  type_properties_endpoint,
                                                  type_properties_authentication_type,
                                                  if_match=None,
                                                  connect_via=None,
                                                  description=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  type_properties_username=None,
                                                  type_properties_password=None,
                                                  type_properties_client_id=None,
                                                  type_properties_client_secret=None,
                                                  type_properties_use_encrypted_endpoints=None,
                                                  type_properties_use_host_verification=None,
                                                  type_properties_use_peer_verification=None,
                                                  type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'ServiceNow'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sftp_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_port=None,
                                           type_properties_authentication_type=None,
                                           type_properties_user_name=None,
                                           type_properties_password=None,
                                           type_properties_encrypted_credential=None,
                                           type_properties_private_key_path=None,
                                           type_properties_private_key_content=None,
                                           type_properties_pass_phrase=None,
                                           type_properties_skip_host_key_validation=None,
                                           type_properties_host_key_fingerprint=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_private_key_path, str):
        type_properties_private_key_path = json.loads(type_properties_private_key_path)
    if isinstance(type_properties_private_key_content, str):
        type_properties_private_key_content = json.loads(type_properties_private_key_content)
    if isinstance(type_properties_pass_phrase, str):
        type_properties_pass_phrase = json.loads(type_properties_pass_phrase)
    if isinstance(type_properties_skip_host_key_validation, str):
        type_properties_skip_host_key_validation = json.loads(type_properties_skip_host_key_validation)
    if isinstance(type_properties_host_key_fingerprint, str):
        type_properties_host_key_fingerprint = json.loads(type_properties_host_key_fingerprint)
    properties = {}
    properties['type'] = 'Sftp'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['authentication_type'] = type_properties_authentication_type
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    properties['private_key_path'] = type_properties_private_key_path
    properties['private_key_content'] = type_properties_private_key_content
    properties['pass_phrase'] = type_properties_pass_phrase
    properties['skip_host_key_validation'] = type_properties_skip_host_key_validation
    properties['host_key_fingerprint'] = type_properties_host_key_fingerprint
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sftp_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_port=None,
                                           type_properties_authentication_type=None,
                                           type_properties_user_name=None,
                                           type_properties_password=None,
                                           type_properties_encrypted_credential=None,
                                           type_properties_private_key_path=None,
                                           type_properties_private_key_content=None,
                                           type_properties_pass_phrase=None,
                                           type_properties_skip_host_key_validation=None,
                                           type_properties_host_key_fingerprint=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    if isinstance(type_properties_private_key_path, str):
        type_properties_private_key_path = json.loads(type_properties_private_key_path)
    if isinstance(type_properties_private_key_content, str):
        type_properties_private_key_content = json.loads(type_properties_private_key_content)
    if isinstance(type_properties_pass_phrase, str):
        type_properties_pass_phrase = json.loads(type_properties_pass_phrase)
    if isinstance(type_properties_skip_host_key_validation, str):
        type_properties_skip_host_key_validation = json.loads(type_properties_skip_host_key_validation)
    if isinstance(type_properties_host_key_fingerprint, str):
        type_properties_host_key_fingerprint = json.loads(type_properties_host_key_fingerprint)
    instance.type = 'Sftp'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.authentication_type = type_properties_authentication_type
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    instance.private_key_path = type_properties_private_key_path
    instance.private_key_content = type_properties_private_key_content
    instance.pass_phrase = type_properties_pass_phrase
    instance.skip_host_key_validation = type_properties_skip_host_key_validation
    instance.host_key_fingerprint = type_properties_host_key_fingerprint
    return instance


def datafactory_linked_service_shopify_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_host,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_access_token=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Shopify'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['access_token'] = type_properties_access_token
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_shopify_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              type_properties_host,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_access_token=None,
                                              type_properties_use_encrypted_endpoints=None,
                                              type_properties_use_host_verification=None,
                                              type_properties_use_peer_verification=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Shopify'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.access_token = type_properties_access_token
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_snowflake_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_connection_string,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_password=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Snowflake'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_snowflake_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                linked_service_name,
                                                type_properties_connection_string,
                                                if_match=None,
                                                connect_via=None,
                                                description=None,
                                                parameters=None,
                                                annotations=None,
                                                type_properties_password=None,
                                                type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Snowflake'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_spark_create(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            linked_service_name,
                                            type_properties_host,
                                            type_properties_port,
                                            type_properties_authentication_type,
                                            if_match=None,
                                            connect_via=None,
                                            description=None,
                                            parameters=None,
                                            annotations=None,
                                            type_properties_server_type=None,
                                            type_properties_thrift_transport_protocol=None,
                                            type_properties_username=None,
                                            type_properties_password=None,
                                            type_properties_http_path=None,
                                            type_properties_enable_ssl=None,
                                            type_properties_trusted_cert_path=None,
                                            type_properties_use_system_trust_store=None,
                                            type_properties_allow_host_name_cnmismatch=None,
                                            type_properties_allow_self_signed_server_cert=None,
                                            type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Spark'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['port'] = type_properties_port
    properties['server_type'] = type_properties_server_type
    properties['thrift_transport_protocol'] = type_properties_thrift_transport_protocol
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['http_path'] = type_properties_http_path
    properties['enable_ssl'] = type_properties_enable_ssl
    properties['trusted_cert_path'] = type_properties_trusted_cert_path
    properties['use_system_trust_store'] = type_properties_use_system_trust_store
    properties['allow_host_name_cn_mismatch'] = type_properties_allow_host_name_cnmismatch
    properties['allow_self_signed_server_cert'] = type_properties_allow_self_signed_server_cert
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_spark_update(instance, cmd,
                                            resource_group_name,
                                            factory_name,
                                            linked_service_name,
                                            type_properties_host,
                                            type_properties_port,
                                            type_properties_authentication_type,
                                            if_match=None,
                                            connect_via=None,
                                            description=None,
                                            parameters=None,
                                            annotations=None,
                                            type_properties_server_type=None,
                                            type_properties_thrift_transport_protocol=None,
                                            type_properties_username=None,
                                            type_properties_password=None,
                                            type_properties_http_path=None,
                                            type_properties_enable_ssl=None,
                                            type_properties_trusted_cert_path=None,
                                            type_properties_use_system_trust_store=None,
                                            type_properties_allow_host_name_cnmismatch=None,
                                            type_properties_allow_self_signed_server_cert=None,
                                            type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_port, str):
        type_properties_port = json.loads(type_properties_port)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_http_path, str):
        type_properties_http_path = json.loads(type_properties_http_path)
    if isinstance(type_properties_enable_ssl, str):
        type_properties_enable_ssl = json.loads(type_properties_enable_ssl)
    if isinstance(type_properties_trusted_cert_path, str):
        type_properties_trusted_cert_path = json.loads(type_properties_trusted_cert_path)
    if isinstance(type_properties_use_system_trust_store, str):
        type_properties_use_system_trust_store = json.loads(type_properties_use_system_trust_store)
    if isinstance(type_properties_allow_host_name_cnmismatch, str):
        type_properties_allow_host_name_cnmismatch = json.loads(type_properties_allow_host_name_cnmismatch)
    if isinstance(type_properties_allow_self_signed_server_cert, str):
        type_properties_allow_self_signed_server_cert = json.loads(type_properties_allow_self_signed_server_cert)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Spark'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.port = type_properties_port
    instance.server_type = type_properties_server_type
    instance.thrift_transport_protocol = type_properties_thrift_transport_protocol
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.http_path = type_properties_http_path
    instance.enable_ssl = type_properties_enable_ssl
    instance.trusted_cert_path = type_properties_trusted_cert_path
    instance.use_system_trust_store = type_properties_use_system_trust_store
    instance.allow_host_name_cn_mismatch = type_properties_allow_host_name_cnmismatch
    instance.allow_self_signed_server_cert = type_properties_allow_self_signed_server_cert
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sql_server_create(cmd, client,
                                                 resource_group_name,
                                                 factory_name,
                                                 linked_service_name,
                                                 type_properties_connection_string,
                                                 if_match=None,
                                                 connect_via=None,
                                                 description=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 type_properties_user_name=None,
                                                 type_properties_password=None,
                                                 type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'SqlServer'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['user_name'] = type_properties_user_name
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sql_server_update(instance, cmd,
                                                 resource_group_name,
                                                 factory_name,
                                                 linked_service_name,
                                                 type_properties_connection_string,
                                                 if_match=None,
                                                 connect_via=None,
                                                 description=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 type_properties_user_name=None,
                                                 type_properties_password=None,
                                                 type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_user_name, str):
        type_properties_user_name = json.loads(type_properties_user_name)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'SqlServer'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.user_name = type_properties_user_name
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_square_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_client_id,
                                             type_properties_redirect_uri,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_client_secret=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_redirect_uri, str):
        type_properties_redirect_uri = json.loads(type_properties_redirect_uri)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Square'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['client_id'] = type_properties_client_id
    properties['client_secret'] = type_properties_client_secret
    properties['redirect_uri'] = type_properties_redirect_uri
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_square_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_host,
                                             type_properties_client_id,
                                             type_properties_redirect_uri,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_client_secret=None,
                                             type_properties_use_encrypted_endpoints=None,
                                             type_properties_use_host_verification=None,
                                             type_properties_use_peer_verification=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_client_id, str):
        type_properties_client_id = json.loads(type_properties_client_id)
    if isinstance(type_properties_client_secret, str):
        type_properties_client_secret = json.loads(type_properties_client_secret)
    if isinstance(type_properties_redirect_uri, str):
        type_properties_redirect_uri = json.loads(type_properties_redirect_uri)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Square'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.client_id = type_properties_client_id
    instance.client_secret = type_properties_client_secret
    instance.redirect_uri = type_properties_redirect_uri
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_sybase_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_server,
                                             type_properties_database,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_schema=None,
                                             type_properties_authentication_type=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Sybase'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['server'] = type_properties_server
    properties['database'] = type_properties_database
    properties['schema'] = type_properties_schema
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_sybase_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             linked_service_name,
                                             type_properties_server,
                                             type_properties_database,
                                             if_match=None,
                                             connect_via=None,
                                             description=None,
                                             parameters=None,
                                             annotations=None,
                                             type_properties_schema=None,
                                             type_properties_authentication_type=None,
                                             type_properties_username=None,
                                             type_properties_password=None,
                                             type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Sybase'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.server = type_properties_server
    instance.database = type_properties_database
    instance.schema = type_properties_schema
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_teradata_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_connection_string=None,
                                               type_properties_server=None,
                                               type_properties_authentication_type=None,
                                               type_properties_username=None,
                                               type_properties_password=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Teradata'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['server'] = type_properties_server
    properties['authentication_type'] = type_properties_authentication_type
    properties['username'] = type_properties_username
    properties['password'] = type_properties_password
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_teradata_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               linked_service_name,
                                               if_match=None,
                                               connect_via=None,
                                               description=None,
                                               parameters=None,
                                               annotations=None,
                                               type_properties_connection_string=None,
                                               type_properties_server=None,
                                               type_properties_authentication_type=None,
                                               type_properties_username=None,
                                               type_properties_password=None,
                                               type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_server, str):
        type_properties_server = json.loads(type_properties_server)
    if isinstance(type_properties_username, str):
        type_properties_username = json.loads(type_properties_username)
    if isinstance(type_properties_password, str):
        type_properties_password = json.loads(type_properties_password)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Teradata'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.server = type_properties_server
    instance.authentication_type = type_properties_authentication_type
    instance.username = type_properties_username
    instance.password = type_properties_password
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_vertica_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_connection_string=None,
                                              type_properties_pwd=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Vertica'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['connection_string'] = type_properties_connection_string
    properties['pwd'] = type_properties_pwd
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_vertica_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              linked_service_name,
                                              if_match=None,
                                              connect_via=None,
                                              description=None,
                                              parameters=None,
                                              annotations=None,
                                              type_properties_connection_string=None,
                                              type_properties_pwd=None,
                                              type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_connection_string, str):
        type_properties_connection_string = json.loads(type_properties_connection_string)
    if isinstance(type_properties_pwd, str):
        type_properties_pwd = json.loads(type_properties_pwd)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Vertica'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.connection_string = type_properties_connection_string
    instance.pwd = type_properties_pwd
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_web_create(cmd, client,
                                          resource_group_name,
                                          factory_name,
                                          linked_service_name,
                                          type_properties,
                                          if_match=None,
                                          connect_via=None,
                                          description=None,
                                          parameters=None,
                                          annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties, str):
        type_properties = json.loads(type_properties)
    properties = {}
    properties['type'] = 'Web'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['type_properties'] = type_properties
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_web_update(instance, cmd,
                                          resource_group_name,
                                          factory_name,
                                          linked_service_name,
                                          type_properties,
                                          if_match=None,
                                          connect_via=None,
                                          description=None,
                                          parameters=None,
                                          annotations=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties, str):
        type_properties = json.loads(type_properties)
    instance.type = 'Web'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.type_properties = type_properties
    return instance


def datafactory_linked_service_xero_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_consumer_key=None,
                                           type_properties_private_key=None,
                                           type_properties_use_encrypted_endpoints=None,
                                           type_properties_use_host_verification=None,
                                           type_properties_use_peer_verification=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_consumer_key, str):
        type_properties_consumer_key = json.loads(type_properties_consumer_key)
    if isinstance(type_properties_private_key, str):
        type_properties_private_key = json.loads(type_properties_private_key)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Xero'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['host'] = type_properties_host
    properties['consumer_key'] = type_properties_consumer_key
    properties['private_key'] = type_properties_private_key
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_xero_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_host,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_consumer_key=None,
                                           type_properties_private_key=None,
                                           type_properties_use_encrypted_endpoints=None,
                                           type_properties_use_host_verification=None,
                                           type_properties_use_peer_verification=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_host, str):
        type_properties_host = json.loads(type_properties_host)
    if isinstance(type_properties_consumer_key, str):
        type_properties_consumer_key = json.loads(type_properties_consumer_key)
    if isinstance(type_properties_private_key, str):
        type_properties_private_key = json.loads(type_properties_private_key)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Xero'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.host = type_properties_host
    instance.consumer_key = type_properties_consumer_key
    instance.private_key = type_properties_private_key
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_zoho_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_endpoint,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_access_token=None,
                                           type_properties_use_encrypted_endpoints=None,
                                           type_properties_use_host_verification=None,
                                           type_properties_use_peer_verification=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    properties = {}
    properties['type'] = 'Zoho'
    properties['connect_via'] = connect_via
    properties['description'] = description
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['endpoint'] = type_properties_endpoint
    properties['access_token'] = type_properties_access_token
    properties['use_encrypted_endpoints'] = type_properties_use_encrypted_endpoints
    properties['use_host_verification'] = type_properties_use_host_verification
    properties['use_peer_verification'] = type_properties_use_peer_verification
    properties['encrypted_credential'] = type_properties_encrypted_credential
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   linked_service_name=linked_service_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_linked_service_zoho_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           linked_service_name,
                                           type_properties_endpoint,
                                           if_match=None,
                                           connect_via=None,
                                           description=None,
                                           parameters=None,
                                           annotations=None,
                                           type_properties_access_token=None,
                                           type_properties_use_encrypted_endpoints=None,
                                           type_properties_use_host_verification=None,
                                           type_properties_use_peer_verification=None,
                                           type_properties_encrypted_credential=None):
    if isinstance(connect_via, str):
        connect_via = json.loads(connect_via)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_endpoint, str):
        type_properties_endpoint = json.loads(type_properties_endpoint)
    if isinstance(type_properties_access_token, str):
        type_properties_access_token = json.loads(type_properties_access_token)
    if isinstance(type_properties_use_encrypted_endpoints, str):
        type_properties_use_encrypted_endpoints = json.loads(type_properties_use_encrypted_endpoints)
    if isinstance(type_properties_use_host_verification, str):
        type_properties_use_host_verification = json.loads(type_properties_use_host_verification)
    if isinstance(type_properties_use_peer_verification, str):
        type_properties_use_peer_verification = json.loads(type_properties_use_peer_verification)
    if isinstance(type_properties_encrypted_credential, str):
        type_properties_encrypted_credential = json.loads(type_properties_encrypted_credential)
    instance.type = 'Zoho'
    instance.connect_via = connect_via
    instance.description = description
    instance.parameters = parameters
    instance.annotations = annotations
    instance.endpoint = type_properties_endpoint
    instance.access_token = type_properties_access_token
    instance.use_encrypted_endpoints = type_properties_use_encrypted_endpoints
    instance.use_host_verification = type_properties_use_host_verification
    instance.use_peer_verification = type_properties_use_peer_verification
    instance.encrypted_credential = type_properties_encrypted_credential
    return instance


def datafactory_linked_service_delete(cmd, client,
                                      resource_group_name,
                                      factory_name,
                                      linked_service_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         linked_service_name=linked_service_name)


def datafactory_dataset_list(cmd, client,
                             resource_group_name,
                             factory_name):
    return client.list_by_factory(resource_group_name=resource_group_name,
                                  factory_name=factory_name)


def datafactory_dataset_show(cmd, client,
                             resource_group_name,
                             factory_name,
                             dataset_name,
                             if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      dataset_name=dataset_name,
                      if_none_match=if_none_match)


def datafactory_dataset_amazon_m_w_s_object_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'AmazonMWSObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_amazon_m_w_s_object_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'AmazonMWSObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_amazon_redshift_table_create(cmd, client,
                                                     resource_group_name,
                                                     factory_name,
                                                     dataset_name,
                                                     linked_service_name,
                                                     if_match=None,
                                                     description=None,
                                                     structure=None,
                                                     schema=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     folder=None,
                                                     type_properties_table_name=None,
                                                     type_properties_table=None,
                                                     type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'AmazonRedshiftTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_amazon_redshift_table_update(instance, cmd,
                                                     resource_group_name,
                                                     factory_name,
                                                     dataset_name,
                                                     linked_service_name,
                                                     if_match=None,
                                                     description=None,
                                                     structure=None,
                                                     schema=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     folder=None,
                                                     type_properties_table_name=None,
                                                     type_properties_table=None,
                                                     type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'AmazonRedshiftTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_amazon_s3_object_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                type_properties_bucket_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_key=None,
                                                type_properties_prefix=None,
                                                type_properties_version=None,
                                                type_properties_modified_datetime_start=None,
                                                type_properties_modified_datetime_end=None,
                                                type_properties_format=None,
                                                dataset_b_zip2_compression=None,
                                                dataset_g_zip_compression=None,
                                                dataset_deflate_compression=None,
                                                dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_bucket_name, str):
        type_properties_bucket_name = json.loads(type_properties_bucket_name)
    if isinstance(type_properties_key, str):
        type_properties_key = json.loads(type_properties_key)
    if isinstance(type_properties_prefix, str):
        type_properties_prefix = json.loads(type_properties_prefix)
    if isinstance(type_properties_version, str):
        type_properties_version = json.loads(type_properties_version)
    if isinstance(type_properties_modified_datetime_start, str):
        type_properties_modified_datetime_start = json.loads(type_properties_modified_datetime_start)
    if isinstance(type_properties_modified_datetime_end, str):
        type_properties_modified_datetime_end = json.loads(type_properties_modified_datetime_end)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'AmazonS3Object'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['bucket_name'] = type_properties_bucket_name
    properties['key'] = type_properties_key
    properties['prefix'] = type_properties_prefix
    properties['version'] = type_properties_version
    properties['modified_datetime_start'] = type_properties_modified_datetime_start
    properties['modified_datetime_end'] = type_properties_modified_datetime_end
    properties['format'] = type_properties_format
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_amazon_s3_object_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                type_properties_bucket_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_key=None,
                                                type_properties_prefix=None,
                                                type_properties_version=None,
                                                type_properties_modified_datetime_start=None,
                                                type_properties_modified_datetime_end=None,
                                                type_properties_format=None,
                                                dataset_b_zip2_compression=None,
                                                dataset_g_zip_compression=None,
                                                dataset_deflate_compression=None,
                                                dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_bucket_name, str):
        type_properties_bucket_name = json.loads(type_properties_bucket_name)
    if isinstance(type_properties_key, str):
        type_properties_key = json.loads(type_properties_key)
    if isinstance(type_properties_prefix, str):
        type_properties_prefix = json.loads(type_properties_prefix)
    if isinstance(type_properties_version, str):
        type_properties_version = json.loads(type_properties_version)
    if isinstance(type_properties_modified_datetime_start, str):
        type_properties_modified_datetime_start = json.loads(type_properties_modified_datetime_start)
    if isinstance(type_properties_modified_datetime_end, str):
        type_properties_modified_datetime_end = json.loads(type_properties_modified_datetime_end)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'AmazonS3Object'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.bucket_name = type_properties_bucket_name
    instance.key = type_properties_key
    instance.prefix = type_properties_prefix
    instance.version = type_properties_version
    instance.modified_datetime_start = type_properties_modified_datetime_start
    instance.modified_datetime_end = type_properties_modified_datetime_end
    instance.format = type_properties_format
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_avro_create(cmd, client,
                                    resource_group_name,
                                    factory_name,
                                    dataset_name,
                                    linked_service_name,
                                    if_match=None,
                                    description=None,
                                    structure=None,
                                    schema=None,
                                    parameters=None,
                                    annotations=None,
                                    folder=None,
                                    type_properties_location=None,
                                    type_properties_avro_compression_codec=None,
                                    type_properties_avro_compression_level=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    properties = {}
    properties['type'] = 'Avro'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['location'] = type_properties_location
    properties['avro_compression_codec'] = type_properties_avro_compression_codec
    properties['avro_compression_level'] = type_properties_avro_compression_level
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_avro_update(instance, cmd,
                                    resource_group_name,
                                    factory_name,
                                    dataset_name,
                                    linked_service_name,
                                    if_match=None,
                                    description=None,
                                    structure=None,
                                    schema=None,
                                    parameters=None,
                                    annotations=None,
                                    folder=None,
                                    type_properties_location=None,
                                    type_properties_avro_compression_codec=None,
                                    type_properties_avro_compression_level=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    instance.type = 'Avro'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.location = type_properties_location
    instance.avro_compression_codec = type_properties_avro_compression_codec
    instance.avro_compression_level = type_properties_avro_compression_level
    return instance


def datafactory_dataset_azure_blob_create(cmd, client,
                                          resource_group_name,
                                          factory_name,
                                          dataset_name,
                                          linked_service_name,
                                          if_match=None,
                                          description=None,
                                          structure=None,
                                          schema=None,
                                          parameters=None,
                                          annotations=None,
                                          folder=None,
                                          type_properties_folder_path=None,
                                          type_properties_table_root_location=None,
                                          type_properties_file_name=None,
                                          type_properties_modified_datetime_start=None,
                                          type_properties_modified_datetime_end=None,
                                          type_properties_format=None,
                                          dataset_b_zip2_compression=None,
                                          dataset_g_zip_compression=None,
                                          dataset_deflate_compression=None,
                                          dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_table_root_location, str):
        type_properties_table_root_location = json.loads(type_properties_table_root_location)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_modified_datetime_start, str):
        type_properties_modified_datetime_start = json.loads(type_properties_modified_datetime_start)
    if isinstance(type_properties_modified_datetime_end, str):
        type_properties_modified_datetime_end = json.loads(type_properties_modified_datetime_end)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'AzureBlob'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['folder_path'] = type_properties_folder_path
    properties['table_root_location'] = type_properties_table_root_location
    properties['file_name'] = type_properties_file_name
    properties['modified_datetime_start'] = type_properties_modified_datetime_start
    properties['modified_datetime_end'] = type_properties_modified_datetime_end
    properties['format'] = type_properties_format
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_blob_update(instance, cmd,
                                          resource_group_name,
                                          factory_name,
                                          dataset_name,
                                          linked_service_name,
                                          if_match=None,
                                          description=None,
                                          structure=None,
                                          schema=None,
                                          parameters=None,
                                          annotations=None,
                                          folder=None,
                                          type_properties_folder_path=None,
                                          type_properties_table_root_location=None,
                                          type_properties_file_name=None,
                                          type_properties_modified_datetime_start=None,
                                          type_properties_modified_datetime_end=None,
                                          type_properties_format=None,
                                          dataset_b_zip2_compression=None,
                                          dataset_g_zip_compression=None,
                                          dataset_deflate_compression=None,
                                          dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_table_root_location, str):
        type_properties_table_root_location = json.loads(type_properties_table_root_location)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_modified_datetime_start, str):
        type_properties_modified_datetime_start = json.loads(type_properties_modified_datetime_start)
    if isinstance(type_properties_modified_datetime_end, str):
        type_properties_modified_datetime_end = json.loads(type_properties_modified_datetime_end)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'AzureBlob'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.folder_path = type_properties_folder_path
    instance.table_root_location = type_properties_table_root_location
    instance.file_name = type_properties_file_name
    instance.modified_datetime_start = type_properties_modified_datetime_start
    instance.modified_datetime_end = type_properties_modified_datetime_end
    instance.format = type_properties_format
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_azure_blob_f_s_file_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_folder_path=None,
                                                   type_properties_file_name=None,
                                                   type_properties_format=None,
                                                   dataset_b_zip2_compression=None,
                                                   dataset_g_zip_compression=None,
                                                   dataset_deflate_compression=None,
                                                   dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'AzureBlobFSFile'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['folder_path'] = type_properties_folder_path
    properties['file_name'] = type_properties_file_name
    properties['format'] = type_properties_format
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_blob_f_s_file_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_folder_path=None,
                                                   type_properties_file_name=None,
                                                   type_properties_format=None,
                                                   dataset_b_zip2_compression=None,
                                                   dataset_g_zip_compression=None,
                                                   dataset_deflate_compression=None,
                                                   dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'AzureBlobFSFile'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.folder_path = type_properties_folder_path
    instance.file_name = type_properties_file_name
    instance.format = type_properties_format
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_azure_data_explorer_table_create(cmd, client,
                                                         resource_group_name,
                                                         factory_name,
                                                         dataset_name,
                                                         linked_service_name,
                                                         if_match=None,
                                                         description=None,
                                                         structure=None,
                                                         schema=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         folder=None,
                                                         type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'AzureDataExplorerTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_data_explorer_table_update(instance, cmd,
                                                         resource_group_name,
                                                         factory_name,
                                                         dataset_name,
                                                         linked_service_name,
                                                         if_match=None,
                                                         description=None,
                                                         structure=None,
                                                         schema=None,
                                                         parameters=None,
                                                         annotations=None,
                                                         folder=None,
                                                         type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'AzureDataExplorerTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table = type_properties_table
    return instance


def datafactory_dataset_azure_data_lake_store_file_create(cmd, client,
                                                          resource_group_name,
                                                          factory_name,
                                                          dataset_name,
                                                          linked_service_name,
                                                          if_match=None,
                                                          description=None,
                                                          structure=None,
                                                          schema=None,
                                                          parameters=None,
                                                          annotations=None,
                                                          folder=None,
                                                          type_properties_folder_path=None,
                                                          type_properties_file_name=None,
                                                          type_properties_format=None,
                                                          dataset_b_zip2_compression=None,
                                                          dataset_g_zip_compression=None,
                                                          dataset_deflate_compression=None,
                                                          dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'AzureDataLakeStoreFile'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['folder_path'] = type_properties_folder_path
    properties['file_name'] = type_properties_file_name
    properties['format'] = type_properties_format
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_data_lake_store_file_update(instance, cmd,
                                                          resource_group_name,
                                                          factory_name,
                                                          dataset_name,
                                                          linked_service_name,
                                                          if_match=None,
                                                          description=None,
                                                          structure=None,
                                                          schema=None,
                                                          parameters=None,
                                                          annotations=None,
                                                          folder=None,
                                                          type_properties_folder_path=None,
                                                          type_properties_file_name=None,
                                                          type_properties_format=None,
                                                          dataset_b_zip2_compression=None,
                                                          dataset_g_zip_compression=None,
                                                          dataset_deflate_compression=None,
                                                          dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'AzureDataLakeStoreFile'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.folder_path = type_properties_folder_path
    instance.file_name = type_properties_file_name
    instance.format = type_properties_format
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_azure_maria_d_b_table_create(cmd, client,
                                                     resource_group_name,
                                                     factory_name,
                                                     dataset_name,
                                                     linked_service_name,
                                                     if_match=None,
                                                     description=None,
                                                     structure=None,
                                                     schema=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     folder=None,
                                                     type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'AzureMariaDBTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_maria_d_b_table_update(instance, cmd,
                                                     resource_group_name,
                                                     factory_name,
                                                     dataset_name,
                                                     linked_service_name,
                                                     if_match=None,
                                                     description=None,
                                                     structure=None,
                                                     schema=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     folder=None,
                                                     type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'AzureMariaDBTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_azure_my_sql_table_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_table_name=None,
                                                  type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'AzureMySqlTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_my_sql_table_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_table_name=None,
                                                  type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'AzureMySqlTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    return instance


def datafactory_dataset_azure_postgre_sql_table_create(cmd, client,
                                                       resource_group_name,
                                                       factory_name,
                                                       dataset_name,
                                                       linked_service_name,
                                                       if_match=None,
                                                       description=None,
                                                       structure=None,
                                                       schema=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       folder=None,
                                                       type_properties_table_name=None,
                                                       type_properties_table=None,
                                                       type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'AzurePostgreSqlTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_postgre_sql_table_update(instance, cmd,
                                                       resource_group_name,
                                                       factory_name,
                                                       dataset_name,
                                                       linked_service_name,
                                                       if_match=None,
                                                       description=None,
                                                       structure=None,
                                                       schema=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       folder=None,
                                                       type_properties_table_name=None,
                                                       type_properties_table=None,
                                                       type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'AzurePostgreSqlTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_azure_search_index_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  type_properties_index_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_index_name, str):
        type_properties_index_name = json.loads(type_properties_index_name)
    properties = {}
    properties['type'] = 'AzureSearchIndex'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['index_name'] = type_properties_index_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_search_index_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  type_properties_index_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_index_name, str):
        type_properties_index_name = json.loads(type_properties_index_name)
    instance.type = 'AzureSearchIndex'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.index_name = type_properties_index_name
    return instance


def datafactory_dataset_azure_sql_d_w_table_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_table_name=None,
                                                   type_properties_schema=None,
                                                   type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'AzureSqlDWTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_sql_d_w_table_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_table_name=None,
                                                   type_properties_schema=None,
                                                   type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'AzureSqlDWTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_azure_sql_m_i_table_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_table_name=None,
                                                   type_properties_schema=None,
                                                   type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'AzureSqlMITable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_sql_m_i_table_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_table_name=None,
                                                   type_properties_schema=None,
                                                   type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'AzureSqlMITable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_azure_sql_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None,
                                               type_properties_schema=None,
                                               type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'AzureSqlTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_sql_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None,
                                               type_properties_schema=None,
                                               type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'AzureSqlTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_azure_table_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           type_properties_table_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'AzureTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_azure_table_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           type_properties_table_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'AzureTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_binary_create(cmd, client,
                                      resource_group_name,
                                      factory_name,
                                      dataset_name,
                                      linked_service_name,
                                      if_match=None,
                                      description=None,
                                      structure=None,
                                      schema=None,
                                      parameters=None,
                                      annotations=None,
                                      folder=None,
                                      type_properties_location=None,
                                      dataset_b_zip2_compression=None,
                                      dataset_g_zip_compression=None,
                                      dataset_deflate_compression=None,
                                      dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'Binary'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['location'] = type_properties_location
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_binary_update(instance, cmd,
                                      resource_group_name,
                                      factory_name,
                                      dataset_name,
                                      linked_service_name,
                                      if_match=None,
                                      description=None,
                                      structure=None,
                                      schema=None,
                                      parameters=None,
                                      annotations=None,
                                      folder=None,
                                      type_properties_location=None,
                                      dataset_b_zip2_compression=None,
                                      dataset_g_zip_compression=None,
                                      dataset_deflate_compression=None,
                                      dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'Binary'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.location = type_properties_location
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_cassandra_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None,
                                               type_properties_keyspace=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_keyspace, str):
        type_properties_keyspace = json.loads(type_properties_keyspace)
    properties = {}
    properties['type'] = 'CassandraTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['keyspace'] = type_properties_keyspace
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_cassandra_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None,
                                               type_properties_keyspace=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_keyspace, str):
        type_properties_keyspace = json.loads(type_properties_keyspace)
    instance.type = 'CassandraTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.keyspace = type_properties_keyspace
    return instance


def datafactory_dataset_common_data_service_for_apps_entity_create(cmd, client,
                                                                   resource_group_name,
                                                                   factory_name,
                                                                   dataset_name,
                                                                   linked_service_name,
                                                                   if_match=None,
                                                                   description=None,
                                                                   structure=None,
                                                                   schema=None,
                                                                   parameters=None,
                                                                   annotations=None,
                                                                   folder=None,
                                                                   type_properties_entity_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_entity_name, str):
        type_properties_entity_name = json.loads(type_properties_entity_name)
    properties = {}
    properties['type'] = 'CommonDataServiceForAppsEntity'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['entity_name'] = type_properties_entity_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_common_data_service_for_apps_entity_update(instance, cmd,
                                                                   resource_group_name,
                                                                   factory_name,
                                                                   dataset_name,
                                                                   linked_service_name,
                                                                   if_match=None,
                                                                   description=None,
                                                                   structure=None,
                                                                   schema=None,
                                                                   parameters=None,
                                                                   annotations=None,
                                                                   folder=None,
                                                                   type_properties_entity_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_entity_name, str):
        type_properties_entity_name = json.loads(type_properties_entity_name)
    instance.type = 'CommonDataServiceForAppsEntity'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.entity_name = type_properties_entity_name
    return instance


def datafactory_dataset_concur_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'ConcurObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_concur_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'ConcurObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_cosmos_db_mongo_db_api_collection_create(cmd, client,
                                                                 resource_group_name,
                                                                 factory_name,
                                                                 dataset_name,
                                                                 linked_service_name,
                                                                 type_properties_collection,
                                                                 if_match=None,
                                                                 description=None,
                                                                 structure=None,
                                                                 schema=None,
                                                                 parameters=None,
                                                                 annotations=None,
                                                                 folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection, str):
        type_properties_collection = json.loads(type_properties_collection)
    properties = {}
    properties['type'] = 'CosmosDbMongoDbApiCollection'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['collection'] = type_properties_collection
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_cosmos_db_mongo_db_api_collection_update(instance, cmd,
                                                                 resource_group_name,
                                                                 factory_name,
                                                                 dataset_name,
                                                                 linked_service_name,
                                                                 type_properties_collection,
                                                                 if_match=None,
                                                                 description=None,
                                                                 structure=None,
                                                                 schema=None,
                                                                 parameters=None,
                                                                 annotations=None,
                                                                 folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection, str):
        type_properties_collection = json.loads(type_properties_collection)
    instance.type = 'CosmosDbMongoDbApiCollection'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.collection = type_properties_collection
    return instance


def datafactory_dataset_cosmos_db_sql_api_collection_create(cmd, client,
                                                            resource_group_name,
                                                            factory_name,
                                                            dataset_name,
                                                            properties,
                                                            if_match=None):
    if isinstance(properties, str):
        properties = json.loads(properties)
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_cosmos_db_sql_api_collection_update(instance, cmd,
                                                            resource_group_name,
                                                            factory_name,
                                                            dataset_name,
                                                            properties,
                                                            if_match=None):
    if isinstance(properties, str):
        properties = json.loads(properties)
    return instance


def datafactory_dataset_couchbase_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'CouchbaseTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_couchbase_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'CouchbaseTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_custom_dataset_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties, str):
        type_properties = json.loads(type_properties)
    properties = {}
    properties['type'] = 'CustomDataset'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['type_properties'] = type_properties
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_custom_dataset_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties, str):
        type_properties = json.loads(type_properties)
    instance.type = 'CustomDataset'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.type_properties = type_properties
    return instance


def datafactory_dataset_db2_table_create(cmd, client,
                                         resource_group_name,
                                         factory_name,
                                         dataset_name,
                                         linked_service_name,
                                         if_match=None,
                                         description=None,
                                         structure=None,
                                         schema=None,
                                         parameters=None,
                                         annotations=None,
                                         folder=None,
                                         type_properties_table_name=None,
                                         type_properties_schema=None,
                                         type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'Db2Table'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_db2_table_update(instance, cmd,
                                         resource_group_name,
                                         factory_name,
                                         dataset_name,
                                         linked_service_name,
                                         if_match=None,
                                         description=None,
                                         structure=None,
                                         schema=None,
                                         parameters=None,
                                         annotations=None,
                                         folder=None,
                                         type_properties_table_name=None,
                                         type_properties_schema=None,
                                         type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'Db2Table'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_delimited_text_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_location=None,
                                              type_properties_column_delimiter=None,
                                              type_properties_row_delimiter=None,
                                              type_properties_encoding_name=None,
                                              type_properties_compression_codec=None,
                                              type_properties_compression_level=None,
                                              type_properties_quote_char=None,
                                              type_properties_escape_char=None,
                                              type_properties_first_row_as_header=None,
                                              type_properties_null_value=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    if isinstance(type_properties_column_delimiter, str):
        type_properties_column_delimiter = json.loads(type_properties_column_delimiter)
    if isinstance(type_properties_row_delimiter, str):
        type_properties_row_delimiter = json.loads(type_properties_row_delimiter)
    if isinstance(type_properties_encoding_name, str):
        type_properties_encoding_name = json.loads(type_properties_encoding_name)
    if isinstance(type_properties_quote_char, str):
        type_properties_quote_char = json.loads(type_properties_quote_char)
    if isinstance(type_properties_escape_char, str):
        type_properties_escape_char = json.loads(type_properties_escape_char)
    if isinstance(type_properties_first_row_as_header, str):
        type_properties_first_row_as_header = json.loads(type_properties_first_row_as_header)
    if isinstance(type_properties_null_value, str):
        type_properties_null_value = json.loads(type_properties_null_value)
    properties = {}
    properties['type'] = 'DelimitedText'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['location'] = type_properties_location
    properties['column_delimiter'] = type_properties_column_delimiter
    properties['row_delimiter'] = type_properties_row_delimiter
    properties['encoding_name'] = type_properties_encoding_name
    properties['compression_codec'] = type_properties_compression_codec
    properties['compression_level'] = type_properties_compression_level
    properties['quote_char'] = type_properties_quote_char
    properties['escape_char'] = type_properties_escape_char
    properties['first_row_as_header'] = type_properties_first_row_as_header
    properties['null_value'] = type_properties_null_value
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_delimited_text_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_location=None,
                                              type_properties_column_delimiter=None,
                                              type_properties_row_delimiter=None,
                                              type_properties_encoding_name=None,
                                              type_properties_compression_codec=None,
                                              type_properties_compression_level=None,
                                              type_properties_quote_char=None,
                                              type_properties_escape_char=None,
                                              type_properties_first_row_as_header=None,
                                              type_properties_null_value=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    if isinstance(type_properties_column_delimiter, str):
        type_properties_column_delimiter = json.loads(type_properties_column_delimiter)
    if isinstance(type_properties_row_delimiter, str):
        type_properties_row_delimiter = json.loads(type_properties_row_delimiter)
    if isinstance(type_properties_encoding_name, str):
        type_properties_encoding_name = json.loads(type_properties_encoding_name)
    if isinstance(type_properties_quote_char, str):
        type_properties_quote_char = json.loads(type_properties_quote_char)
    if isinstance(type_properties_escape_char, str):
        type_properties_escape_char = json.loads(type_properties_escape_char)
    if isinstance(type_properties_first_row_as_header, str):
        type_properties_first_row_as_header = json.loads(type_properties_first_row_as_header)
    if isinstance(type_properties_null_value, str):
        type_properties_null_value = json.loads(type_properties_null_value)
    instance.type = 'DelimitedText'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.location = type_properties_location
    instance.column_delimiter = type_properties_column_delimiter
    instance.row_delimiter = type_properties_row_delimiter
    instance.encoding_name = type_properties_encoding_name
    instance.compression_codec = type_properties_compression_codec
    instance.compression_level = type_properties_compression_level
    instance.quote_char = type_properties_quote_char
    instance.escape_char = type_properties_escape_char
    instance.first_row_as_header = type_properties_first_row_as_header
    instance.null_value = type_properties_null_value
    return instance


def datafactory_dataset_document_db_collection_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      type_properties_collection_name,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection_name, str):
        type_properties_collection_name = json.loads(type_properties_collection_name)
    properties = {}
    properties['type'] = 'DocumentDbCollection'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['collection_name'] = type_properties_collection_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_document_db_collection_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      type_properties_collection_name,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection_name, str):
        type_properties_collection_name = json.loads(type_properties_collection_name)
    instance.type = 'DocumentDbCollection'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.collection_name = type_properties_collection_name
    return instance


def datafactory_dataset_drill_table_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None,
                                           type_properties_table=None,
                                           type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'DrillTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_drill_table_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None,
                                           type_properties_table=None,
                                           type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'DrillTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_dynamics_a_x_resource_create(cmd, client,
                                                     resource_group_name,
                                                     factory_name,
                                                     dataset_name,
                                                     linked_service_name,
                                                     type_properties_path,
                                                     if_match=None,
                                                     description=None,
                                                     structure=None,
                                                     schema=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    properties = {}
    properties['type'] = 'DynamicsAXResource'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['path'] = type_properties_path
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_dynamics_a_x_resource_update(instance, cmd,
                                                     resource_group_name,
                                                     factory_name,
                                                     dataset_name,
                                                     linked_service_name,
                                                     type_properties_path,
                                                     if_match=None,
                                                     description=None,
                                                     structure=None,
                                                     schema=None,
                                                     parameters=None,
                                                     annotations=None,
                                                     folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    instance.type = 'DynamicsAXResource'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.path = type_properties_path
    return instance


def datafactory_dataset_dynamics_crm_entity_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_entity_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_entity_name, str):
        type_properties_entity_name = json.loads(type_properties_entity_name)
    properties = {}
    properties['type'] = 'DynamicsCrmEntity'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['entity_name'] = type_properties_entity_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_dynamics_crm_entity_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None,
                                                   type_properties_entity_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_entity_name, str):
        type_properties_entity_name = json.loads(type_properties_entity_name)
    instance.type = 'DynamicsCrmEntity'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.entity_name = type_properties_entity_name
    return instance


def datafactory_dataset_dynamics_entity_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_entity_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_entity_name, str):
        type_properties_entity_name = json.loads(type_properties_entity_name)
    properties = {}
    properties['type'] = 'DynamicsEntity'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['entity_name'] = type_properties_entity_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_dynamics_entity_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_entity_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_entity_name, str):
        type_properties_entity_name = json.loads(type_properties_entity_name)
    instance.type = 'DynamicsEntity'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.entity_name = type_properties_entity_name
    return instance


def datafactory_dataset_eloqua_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'EloquaObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_eloqua_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'EloquaObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_file_share_create(cmd, client,
                                          resource_group_name,
                                          factory_name,
                                          dataset_name,
                                          linked_service_name,
                                          if_match=None,
                                          description=None,
                                          structure=None,
                                          schema=None,
                                          parameters=None,
                                          annotations=None,
                                          folder=None,
                                          type_properties_folder_path=None,
                                          type_properties_file_name=None,
                                          type_properties_modified_datetime_start=None,
                                          type_properties_modified_datetime_end=None,
                                          type_properties_format=None,
                                          type_properties_file_filter=None,
                                          dataset_b_zip2_compression=None,
                                          dataset_g_zip_compression=None,
                                          dataset_deflate_compression=None,
                                          dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_modified_datetime_start, str):
        type_properties_modified_datetime_start = json.loads(type_properties_modified_datetime_start)
    if isinstance(type_properties_modified_datetime_end, str):
        type_properties_modified_datetime_end = json.loads(type_properties_modified_datetime_end)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    if isinstance(type_properties_file_filter, str):
        type_properties_file_filter = json.loads(type_properties_file_filter)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'FileShare'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['folder_path'] = type_properties_folder_path
    properties['file_name'] = type_properties_file_name
    properties['modified_datetime_start'] = type_properties_modified_datetime_start
    properties['modified_datetime_end'] = type_properties_modified_datetime_end
    properties['format'] = type_properties_format
    properties['file_filter'] = type_properties_file_filter
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_file_share_update(instance, cmd,
                                          resource_group_name,
                                          factory_name,
                                          dataset_name,
                                          linked_service_name,
                                          if_match=None,
                                          description=None,
                                          structure=None,
                                          schema=None,
                                          parameters=None,
                                          annotations=None,
                                          folder=None,
                                          type_properties_folder_path=None,
                                          type_properties_file_name=None,
                                          type_properties_modified_datetime_start=None,
                                          type_properties_modified_datetime_end=None,
                                          type_properties_format=None,
                                          type_properties_file_filter=None,
                                          dataset_b_zip2_compression=None,
                                          dataset_g_zip_compression=None,
                                          dataset_deflate_compression=None,
                                          dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_folder_path, str):
        type_properties_folder_path = json.loads(type_properties_folder_path)
    if isinstance(type_properties_file_name, str):
        type_properties_file_name = json.loads(type_properties_file_name)
    if isinstance(type_properties_modified_datetime_start, str):
        type_properties_modified_datetime_start = json.loads(type_properties_modified_datetime_start)
    if isinstance(type_properties_modified_datetime_end, str):
        type_properties_modified_datetime_end = json.loads(type_properties_modified_datetime_end)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    if isinstance(type_properties_file_filter, str):
        type_properties_file_filter = json.loads(type_properties_file_filter)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'FileShare'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.folder_path = type_properties_folder_path
    instance.file_name = type_properties_file_name
    instance.modified_datetime_start = type_properties_modified_datetime_start
    instance.modified_datetime_end = type_properties_modified_datetime_end
    instance.format = type_properties_format
    instance.file_filter = type_properties_file_filter
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_google_ad_words_object_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None,
                                                      type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'GoogleAdWordsObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_google_ad_words_object_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None,
                                                      type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'GoogleAdWordsObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_google_big_query_object_create(cmd, client,
                                                       resource_group_name,
                                                       factory_name,
                                                       dataset_name,
                                                       linked_service_name,
                                                       if_match=None,
                                                       description=None,
                                                       structure=None,
                                                       schema=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       folder=None,
                                                       type_properties_table_name=None,
                                                       type_properties_table=None,
                                                       type_properties_dataset=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_dataset, str):
        type_properties_dataset = json.loads(type_properties_dataset)
    properties = {}
    properties['type'] = 'GoogleBigQueryObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['dataset'] = type_properties_dataset
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_google_big_query_object_update(instance, cmd,
                                                       resource_group_name,
                                                       factory_name,
                                                       dataset_name,
                                                       linked_service_name,
                                                       if_match=None,
                                                       description=None,
                                                       structure=None,
                                                       schema=None,
                                                       parameters=None,
                                                       annotations=None,
                                                       folder=None,
                                                       type_properties_table_name=None,
                                                       type_properties_table=None,
                                                       type_properties_dataset=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_dataset, str):
        type_properties_dataset = json.loads(type_properties_dataset)
    instance.type = 'GoogleBigQueryObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.dataset = type_properties_dataset
    return instance


def datafactory_dataset_greenplum_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None,
                                               type_properties_table=None,
                                               type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'GreenplumTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_greenplum_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None,
                                               type_properties_table=None,
                                               type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'GreenplumTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_h_base_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'HBaseObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_h_base_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'HBaseObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_hive_object_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None,
                                           type_properties_table=None,
                                           type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'HiveObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_hive_object_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None,
                                           type_properties_table=None,
                                           type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'HiveObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_http_file_create(cmd, client,
                                         resource_group_name,
                                         factory_name,
                                         dataset_name,
                                         linked_service_name,
                                         if_match=None,
                                         description=None,
                                         structure=None,
                                         schema=None,
                                         parameters=None,
                                         annotations=None,
                                         folder=None,
                                         type_properties_relative_url=None,
                                         type_properties_request_method=None,
                                         type_properties_request_body=None,
                                         type_properties_additional_headers=None,
                                         type_properties_format=None,
                                         dataset_b_zip2_compression=None,
                                         dataset_g_zip_compression=None,
                                         dataset_deflate_compression=None,
                                         dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_relative_url, str):
        type_properties_relative_url = json.loads(type_properties_relative_url)
    if isinstance(type_properties_request_method, str):
        type_properties_request_method = json.loads(type_properties_request_method)
    if isinstance(type_properties_request_body, str):
        type_properties_request_body = json.loads(type_properties_request_body)
    if isinstance(type_properties_additional_headers, str):
        type_properties_additional_headers = json.loads(type_properties_additional_headers)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'HttpFile'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['relative_url'] = type_properties_relative_url
    properties['request_method'] = type_properties_request_method
    properties['request_body'] = type_properties_request_body
    properties['additional_headers'] = type_properties_additional_headers
    properties['format'] = type_properties_format
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_http_file_update(instance, cmd,
                                         resource_group_name,
                                         factory_name,
                                         dataset_name,
                                         linked_service_name,
                                         if_match=None,
                                         description=None,
                                         structure=None,
                                         schema=None,
                                         parameters=None,
                                         annotations=None,
                                         folder=None,
                                         type_properties_relative_url=None,
                                         type_properties_request_method=None,
                                         type_properties_request_body=None,
                                         type_properties_additional_headers=None,
                                         type_properties_format=None,
                                         dataset_b_zip2_compression=None,
                                         dataset_g_zip_compression=None,
                                         dataset_deflate_compression=None,
                                         dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_relative_url, str):
        type_properties_relative_url = json.loads(type_properties_relative_url)
    if isinstance(type_properties_request_method, str):
        type_properties_request_method = json.loads(type_properties_request_method)
    if isinstance(type_properties_request_body, str):
        type_properties_request_body = json.loads(type_properties_request_body)
    if isinstance(type_properties_additional_headers, str):
        type_properties_additional_headers = json.loads(type_properties_additional_headers)
    if isinstance(type_properties_format, str):
        type_properties_format = json.loads(type_properties_format)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'HttpFile'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.relative_url = type_properties_relative_url
    instance.request_method = type_properties_request_method
    instance.request_body = type_properties_request_body
    instance.additional_headers = type_properties_additional_headers
    instance.format = type_properties_format
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_hubspot_object_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'HubspotObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_hubspot_object_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'HubspotObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_impala_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'ImpalaObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_impala_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'ImpalaObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_informix_table_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'InformixTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_informix_table_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'InformixTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_jira_object_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'JiraObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_jira_object_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'JiraObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_json_create(cmd, client,
                                    resource_group_name,
                                    factory_name,
                                    dataset_name,
                                    linked_service_name,
                                    if_match=None,
                                    description=None,
                                    structure=None,
                                    schema=None,
                                    parameters=None,
                                    annotations=None,
                                    folder=None,
                                    type_properties_location=None,
                                    type_properties_encoding_name=None,
                                    dataset_b_zip2_compression=None,
                                    dataset_g_zip_compression=None,
                                    dataset_deflate_compression=None,
                                    dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    if isinstance(type_properties_encoding_name, str):
        type_properties_encoding_name = json.loads(type_properties_encoding_name)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    properties = {}
    properties['type'] = 'Json'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['location'] = type_properties_location
    properties['encoding_name'] = type_properties_encoding_name
    properties['compression'] = type_properties_compression
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_json_update(instance, cmd,
                                    resource_group_name,
                                    factory_name,
                                    dataset_name,
                                    linked_service_name,
                                    if_match=None,
                                    description=None,
                                    structure=None,
                                    schema=None,
                                    parameters=None,
                                    annotations=None,
                                    folder=None,
                                    type_properties_location=None,
                                    type_properties_encoding_name=None,
                                    dataset_b_zip2_compression=None,
                                    dataset_g_zip_compression=None,
                                    dataset_deflate_compression=None,
                                    dataset_zip_deflate_compression=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    if isinstance(type_properties_encoding_name, str):
        type_properties_encoding_name = json.loads(type_properties_encoding_name)
    all_type_properties_compression = []
    if dataset_b_zip2_compression is not None:
        all_type_properties_compression.append(dataset_b_zip2_compression)
    if dataset_g_zip_compression is not None:
        all_type_properties_compression.append(dataset_g_zip_compression)
    if dataset_deflate_compression is not None:
        all_type_properties_compression.append(dataset_deflate_compression)
    if dataset_zip_deflate_compression is not None:
        all_type_properties_compression.append(dataset_zip_deflate_compression)
    if len(all_type_properties_compression) > 1:
        raise CLIError('at most one of  dataset_b_zip2_compression, dataset_g_zip_compression, dataset_deflate_compress'
                       'ion, dataset_zip_deflate_compression is needed for type_properties_compression!')
    type_properties_compression = all_type_properties_compression[0] if len(all_type_properties_compression) == 1 else None
    instance.type = 'Json'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.location = type_properties_location
    instance.encoding_name = type_properties_encoding_name
    instance.compression = type_properties_compression
    return instance


def datafactory_dataset_magento_object_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'MagentoObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_magento_object_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'MagentoObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_maria_d_b_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'MariaDBTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_maria_d_b_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'MariaDBTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_marketo_object_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'MarketoObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_marketo_object_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'MarketoObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_microsoft_access_table_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None,
                                                      type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'MicrosoftAccessTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_microsoft_access_table_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None,
                                                      type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'MicrosoftAccessTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_mongo_db_collection_create(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   type_properties_collection_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection_name, str):
        type_properties_collection_name = json.loads(type_properties_collection_name)
    properties = {}
    properties['type'] = 'MongoDbCollection'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['collection_name'] = type_properties_collection_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_mongo_db_collection_update(instance, cmd,
                                                   resource_group_name,
                                                   factory_name,
                                                   dataset_name,
                                                   linked_service_name,
                                                   type_properties_collection_name,
                                                   if_match=None,
                                                   description=None,
                                                   structure=None,
                                                   schema=None,
                                                   parameters=None,
                                                   annotations=None,
                                                   folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection_name, str):
        type_properties_collection_name = json.loads(type_properties_collection_name)
    instance.type = 'MongoDbCollection'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.collection_name = type_properties_collection_name
    return instance


def datafactory_dataset_mongo_db_v2_collection_create(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      type_properties_collection,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection, str):
        type_properties_collection = json.loads(type_properties_collection)
    properties = {}
    properties['type'] = 'MongoDbV2Collection'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['collection'] = type_properties_collection
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_mongo_db_v2_collection_update(instance, cmd,
                                                      resource_group_name,
                                                      factory_name,
                                                      dataset_name,
                                                      linked_service_name,
                                                      type_properties_collection,
                                                      if_match=None,
                                                      description=None,
                                                      structure=None,
                                                      schema=None,
                                                      parameters=None,
                                                      annotations=None,
                                                      folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_collection, str):
        type_properties_collection = json.loads(type_properties_collection)
    instance.type = 'MongoDbV2Collection'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.collection = type_properties_collection
    return instance


def datafactory_dataset_my_sql_table_create(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'MySqlTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_my_sql_table_update(instance, cmd,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'MySqlTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_netezza_table_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'NetezzaTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_netezza_table_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'NetezzaTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_o_data_resource_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_path=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    properties = {}
    properties['type'] = 'ODataResource'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['path'] = type_properties_path
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_o_data_resource_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_path=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    instance.type = 'ODataResource'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.path = type_properties_path
    return instance


def datafactory_dataset_odbc_table_create(cmd, client,
                                          resource_group_name,
                                          factory_name,
                                          dataset_name,
                                          linked_service_name,
                                          if_match=None,
                                          description=None,
                                          structure=None,
                                          schema=None,
                                          parameters=None,
                                          annotations=None,
                                          folder=None,
                                          type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'OdbcTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_odbc_table_update(instance, cmd,
                                          resource_group_name,
                                          factory_name,
                                          dataset_name,
                                          linked_service_name,
                                          if_match=None,
                                          description=None,
                                          structure=None,
                                          schema=None,
                                          parameters=None,
                                          annotations=None,
                                          folder=None,
                                          type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'OdbcTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_office365_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               type_properties_table_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_predicate=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_predicate, str):
        type_properties_predicate = json.loads(type_properties_predicate)
    properties = {}
    properties['type'] = 'Office365Table'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['predicate'] = type_properties_predicate
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_office365_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               type_properties_table_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_predicate=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_predicate, str):
        type_properties_predicate = json.loads(type_properties_predicate)
    instance.type = 'Office365Table'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.predicate = type_properties_predicate
    return instance


def datafactory_dataset_oracle_service_cloud_object_create(cmd, client,
                                                           resource_group_name,
                                                           factory_name,
                                                           dataset_name,
                                                           linked_service_name,
                                                           if_match=None,
                                                           description=None,
                                                           structure=None,
                                                           schema=None,
                                                           parameters=None,
                                                           annotations=None,
                                                           folder=None,
                                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'OracleServiceCloudObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_oracle_service_cloud_object_update(instance, cmd,
                                                           resource_group_name,
                                                           factory_name,
                                                           dataset_name,
                                                           linked_service_name,
                                                           if_match=None,
                                                           description=None,
                                                           structure=None,
                                                           schema=None,
                                                           parameters=None,
                                                           annotations=None,
                                                           folder=None,
                                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'OracleServiceCloudObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_oracle_table_create(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None,
                                            type_properties_schema=None,
                                            type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'OracleTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_oracle_table_update(instance, cmd,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None,
                                            type_properties_schema=None,
                                            type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'OracleTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_orc_create(cmd, client,
                                   resource_group_name,
                                   factory_name,
                                   dataset_name,
                                   linked_service_name,
                                   if_match=None,
                                   description=None,
                                   structure=None,
                                   schema=None,
                                   parameters=None,
                                   annotations=None,
                                   folder=None,
                                   type_properties_location=None,
                                   type_properties_orc_compression_codec=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    properties = {}
    properties['type'] = 'Orc'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['location'] = type_properties_location
    properties['orc_compression_codec'] = type_properties_orc_compression_codec
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_orc_update(instance, cmd,
                                   resource_group_name,
                                   factory_name,
                                   dataset_name,
                                   linked_service_name,
                                   if_match=None,
                                   description=None,
                                   structure=None,
                                   schema=None,
                                   parameters=None,
                                   annotations=None,
                                   folder=None,
                                   type_properties_location=None,
                                   type_properties_orc_compression_codec=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    instance.type = 'Orc'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.location = type_properties_location
    instance.orc_compression_codec = type_properties_orc_compression_codec
    return instance


def datafactory_dataset_parquet_create(cmd, client,
                                       resource_group_name,
                                       factory_name,
                                       dataset_name,
                                       linked_service_name,
                                       if_match=None,
                                       description=None,
                                       structure=None,
                                       schema=None,
                                       parameters=None,
                                       annotations=None,
                                       folder=None,
                                       type_properties_location=None,
                                       type_properties_compression_codec=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    properties = {}
    properties['type'] = 'Parquet'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['location'] = type_properties_location
    properties['compression_codec'] = type_properties_compression_codec
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_parquet_update(instance, cmd,
                                       resource_group_name,
                                       factory_name,
                                       dataset_name,
                                       linked_service_name,
                                       if_match=None,
                                       description=None,
                                       structure=None,
                                       schema=None,
                                       parameters=None,
                                       annotations=None,
                                       folder=None,
                                       type_properties_location=None,
                                       type_properties_compression_codec=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_location, str):
        type_properties_location = json.loads(type_properties_location)
    instance.type = 'Parquet'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.location = type_properties_location
    instance.compression_codec = type_properties_compression_codec
    return instance


def datafactory_dataset_paypal_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'PaypalObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_paypal_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'PaypalObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_phoenix_object_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None,
                                              type_properties_table=None,
                                              type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'PhoenixObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_phoenix_object_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None,
                                              type_properties_table=None,
                                              type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'PhoenixObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_postgre_sql_table_create(cmd, client,
                                                 resource_group_name,
                                                 factory_name,
                                                 dataset_name,
                                                 linked_service_name,
                                                 if_match=None,
                                                 description=None,
                                                 structure=None,
                                                 schema=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 folder=None,
                                                 type_properties_table_name=None,
                                                 type_properties_table=None,
                                                 type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'PostgreSqlTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_postgre_sql_table_update(instance, cmd,
                                                 resource_group_name,
                                                 factory_name,
                                                 dataset_name,
                                                 linked_service_name,
                                                 if_match=None,
                                                 description=None,
                                                 structure=None,
                                                 schema=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 folder=None,
                                                 type_properties_table_name=None,
                                                 type_properties_table=None,
                                                 type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'PostgreSqlTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_presto_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'PrestoObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_presto_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'PrestoObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_quick_books_object_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'QuickBooksObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_quick_books_object_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'QuickBooksObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_relational_table_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'RelationalTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_relational_table_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'RelationalTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_responsys_object_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'ResponsysObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_responsys_object_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'ResponsysObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_rest_resource_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_relative_url=None,
                                             type_properties_request_method=None,
                                             type_properties_request_body=None,
                                             type_properties_additional_headers=None,
                                             type_properties_pagination_rules=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_relative_url, str):
        type_properties_relative_url = json.loads(type_properties_relative_url)
    if isinstance(type_properties_request_method, str):
        type_properties_request_method = json.loads(type_properties_request_method)
    if isinstance(type_properties_request_body, str):
        type_properties_request_body = json.loads(type_properties_request_body)
    if isinstance(type_properties_additional_headers, str):
        type_properties_additional_headers = json.loads(type_properties_additional_headers)
    if isinstance(type_properties_pagination_rules, str):
        type_properties_pagination_rules = json.loads(type_properties_pagination_rules)
    properties = {}
    properties['type'] = 'RestResource'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['relative_url'] = type_properties_relative_url
    properties['request_method'] = type_properties_request_method
    properties['request_body'] = type_properties_request_body
    properties['additional_headers'] = type_properties_additional_headers
    properties['pagination_rules'] = type_properties_pagination_rules
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_rest_resource_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_relative_url=None,
                                             type_properties_request_method=None,
                                             type_properties_request_body=None,
                                             type_properties_additional_headers=None,
                                             type_properties_pagination_rules=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_relative_url, str):
        type_properties_relative_url = json.loads(type_properties_relative_url)
    if isinstance(type_properties_request_method, str):
        type_properties_request_method = json.loads(type_properties_request_method)
    if isinstance(type_properties_request_body, str):
        type_properties_request_body = json.loads(type_properties_request_body)
    if isinstance(type_properties_additional_headers, str):
        type_properties_additional_headers = json.loads(type_properties_additional_headers)
    if isinstance(type_properties_pagination_rules, str):
        type_properties_pagination_rules = json.loads(type_properties_pagination_rules)
    instance.type = 'RestResource'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.relative_url = type_properties_relative_url
    instance.request_method = type_properties_request_method
    instance.request_body = type_properties_request_body
    instance.additional_headers = type_properties_additional_headers
    instance.pagination_rules = type_properties_pagination_rules
    return instance


def datafactory_dataset_salesforce_marketing_cloud_object_create(cmd, client,
                                                                 resource_group_name,
                                                                 factory_name,
                                                                 dataset_name,
                                                                 linked_service_name,
                                                                 if_match=None,
                                                                 description=None,
                                                                 structure=None,
                                                                 schema=None,
                                                                 parameters=None,
                                                                 annotations=None,
                                                                 folder=None,
                                                                 type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'SalesforceMarketingCloudObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_salesforce_marketing_cloud_object_update(instance, cmd,
                                                                 resource_group_name,
                                                                 factory_name,
                                                                 dataset_name,
                                                                 linked_service_name,
                                                                 if_match=None,
                                                                 description=None,
                                                                 structure=None,
                                                                 schema=None,
                                                                 parameters=None,
                                                                 annotations=None,
                                                                 folder=None,
                                                                 type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'SalesforceMarketingCloudObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_salesforce_object_create(cmd, client,
                                                 resource_group_name,
                                                 factory_name,
                                                 dataset_name,
                                                 linked_service_name,
                                                 if_match=None,
                                                 description=None,
                                                 structure=None,
                                                 schema=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 folder=None,
                                                 type_properties_object_api_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_object_api_name, str):
        type_properties_object_api_name = json.loads(type_properties_object_api_name)
    properties = {}
    properties['type'] = 'SalesforceObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['object_api_name'] = type_properties_object_api_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_salesforce_object_update(instance, cmd,
                                                 resource_group_name,
                                                 factory_name,
                                                 dataset_name,
                                                 linked_service_name,
                                                 if_match=None,
                                                 description=None,
                                                 structure=None,
                                                 schema=None,
                                                 parameters=None,
                                                 annotations=None,
                                                 folder=None,
                                                 type_properties_object_api_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_object_api_name, str):
        type_properties_object_api_name = json.loads(type_properties_object_api_name)
    instance.type = 'SalesforceObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.object_api_name = type_properties_object_api_name
    return instance


def datafactory_dataset_salesforce_service_cloud_object_create(cmd, client,
                                                               resource_group_name,
                                                               factory_name,
                                                               dataset_name,
                                                               linked_service_name,
                                                               if_match=None,
                                                               description=None,
                                                               structure=None,
                                                               schema=None,
                                                               parameters=None,
                                                               annotations=None,
                                                               folder=None,
                                                               type_properties_object_api_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_object_api_name, str):
        type_properties_object_api_name = json.loads(type_properties_object_api_name)
    properties = {}
    properties['type'] = 'SalesforceServiceCloudObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['object_api_name'] = type_properties_object_api_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_salesforce_service_cloud_object_update(instance, cmd,
                                                               resource_group_name,
                                                               factory_name,
                                                               dataset_name,
                                                               linked_service_name,
                                                               if_match=None,
                                                               description=None,
                                                               structure=None,
                                                               schema=None,
                                                               parameters=None,
                                                               annotations=None,
                                                               folder=None,
                                                               type_properties_object_api_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_object_api_name, str):
        type_properties_object_api_name = json.loads(type_properties_object_api_name)
    instance.type = 'SalesforceServiceCloudObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.object_api_name = type_properties_object_api_name
    return instance


def datafactory_dataset_sap_bw_cube_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    properties = {}
    properties['type'] = 'SapBwCube'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sap_bw_cube_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    instance.type = 'SapBwCube'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    return instance


def datafactory_dataset_sap_cloud_for_customer_resource_create(cmd, client,
                                                               resource_group_name,
                                                               factory_name,
                                                               dataset_name,
                                                               linked_service_name,
                                                               type_properties_path,
                                                               if_match=None,
                                                               description=None,
                                                               structure=None,
                                                               schema=None,
                                                               parameters=None,
                                                               annotations=None,
                                                               folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    properties = {}
    properties['type'] = 'SapCloudForCustomerResource'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['path'] = type_properties_path
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sap_cloud_for_customer_resource_update(instance, cmd,
                                                               resource_group_name,
                                                               factory_name,
                                                               dataset_name,
                                                               linked_service_name,
                                                               type_properties_path,
                                                               if_match=None,
                                                               description=None,
                                                               structure=None,
                                                               schema=None,
                                                               parameters=None,
                                                               annotations=None,
                                                               folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    instance.type = 'SapCloudForCustomerResource'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.path = type_properties_path
    return instance


def datafactory_dataset_sap_ecc_resource_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                type_properties_path,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    properties = {}
    properties['type'] = 'SapEccResource'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['path'] = type_properties_path
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sap_ecc_resource_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                type_properties_path,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    instance.type = 'SapEccResource'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.path = type_properties_path
    return instance


def datafactory_dataset_sap_hana_table_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_schema=None,
                                              type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'SapHanaTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sap_hana_table_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_schema=None,
                                              type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'SapHanaTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_sap_open_hub_table_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  type_properties_open_hub_destination_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_exclude_last_request=None,
                                                  type_properties_base_request_id=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_open_hub_destination_name, str):
        type_properties_open_hub_destination_name = json.loads(type_properties_open_hub_destination_name)
    if isinstance(type_properties_exclude_last_request, str):
        type_properties_exclude_last_request = json.loads(type_properties_exclude_last_request)
    if isinstance(type_properties_base_request_id, str):
        type_properties_base_request_id = json.loads(type_properties_base_request_id)
    properties = {}
    properties['type'] = 'SapOpenHubTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['open_hub_destination_name'] = type_properties_open_hub_destination_name
    properties['exclude_last_request'] = type_properties_exclude_last_request
    properties['base_request_id'] = type_properties_base_request_id
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sap_open_hub_table_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  type_properties_open_hub_destination_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_exclude_last_request=None,
                                                  type_properties_base_request_id=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_open_hub_destination_name, str):
        type_properties_open_hub_destination_name = json.loads(type_properties_open_hub_destination_name)
    if isinstance(type_properties_exclude_last_request, str):
        type_properties_exclude_last_request = json.loads(type_properties_exclude_last_request)
    if isinstance(type_properties_base_request_id, str):
        type_properties_base_request_id = json.loads(type_properties_base_request_id)
    instance.type = 'SapOpenHubTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.open_hub_destination_name = type_properties_open_hub_destination_name
    instance.exclude_last_request = type_properties_exclude_last_request
    instance.base_request_id = type_properties_base_request_id
    return instance


def datafactory_dataset_sap_table_resource_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  type_properties_table_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'SapTableResource'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sap_table_resource_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  type_properties_table_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'SapTableResource'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_service_now_object_create(cmd, client,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'ServiceNowObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_service_now_object_update(instance, cmd,
                                                  resource_group_name,
                                                  factory_name,
                                                  dataset_name,
                                                  linked_service_name,
                                                  if_match=None,
                                                  description=None,
                                                  structure=None,
                                                  schema=None,
                                                  parameters=None,
                                                  annotations=None,
                                                  folder=None,
                                                  type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'ServiceNowObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_shopify_object_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'ShopifyObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_shopify_object_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'ShopifyObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_snowflake_table_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_schema=None,
                                               type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'SnowflakeTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_snowflake_table_update(instance, cmd,
                                               resource_group_name,
                                               factory_name,
                                               dataset_name,
                                               linked_service_name,
                                               if_match=None,
                                               description=None,
                                               structure=None,
                                               schema=None,
                                               parameters=None,
                                               annotations=None,
                                               folder=None,
                                               type_properties_schema=None,
                                               type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'SnowflakeTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_spark_object_create(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None,
                                            type_properties_table=None,
                                            type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'SparkObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_spark_object_update(instance, cmd,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None,
                                            type_properties_table=None,
                                            type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'SparkObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_sql_server_table_create(cmd, client,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_table_name=None,
                                                type_properties_schema=None,
                                                type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'SqlServerTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['schema_type_properties_schema'] = type_properties_schema
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sql_server_table_update(instance, cmd,
                                                resource_group_name,
                                                factory_name,
                                                dataset_name,
                                                linked_service_name,
                                                if_match=None,
                                                description=None,
                                                structure=None,
                                                schema=None,
                                                parameters=None,
                                                annotations=None,
                                                folder=None,
                                                type_properties_table_name=None,
                                                type_properties_schema=None,
                                                type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'SqlServerTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.schema_type_properties_schema = type_properties_schema
    instance.table = type_properties_table
    return instance


def datafactory_dataset_square_object_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'SquareObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_square_object_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'SquareObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_sybase_table_create(cmd, client,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'SybaseTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_sybase_table_update(instance, cmd,
                                            resource_group_name,
                                            factory_name,
                                            dataset_name,
                                            linked_service_name,
                                            if_match=None,
                                            description=None,
                                            structure=None,
                                            schema=None,
                                            parameters=None,
                                            annotations=None,
                                            folder=None,
                                            type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'SybaseTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_teradata_table_create(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_database=None,
                                              type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    properties = {}
    properties['type'] = 'TeradataTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['database'] = type_properties_database
    properties['table'] = type_properties_table
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_teradata_table_update(instance, cmd,
                                              resource_group_name,
                                              factory_name,
                                              dataset_name,
                                              linked_service_name,
                                              if_match=None,
                                              description=None,
                                              structure=None,
                                              schema=None,
                                              parameters=None,
                                              annotations=None,
                                              folder=None,
                                              type_properties_database=None,
                                              type_properties_table=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_database, str):
        type_properties_database = json.loads(type_properties_database)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    instance.type = 'TeradataTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.database = type_properties_database
    instance.table = type_properties_table
    return instance


def datafactory_dataset_vertica_table_create(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    properties = {}
    properties['type'] = 'VerticaTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    properties['table'] = type_properties_table
    properties['schema_type_properties_schema'] = type_properties_schema
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_vertica_table_update(instance, cmd,
                                             resource_group_name,
                                             factory_name,
                                             dataset_name,
                                             linked_service_name,
                                             if_match=None,
                                             description=None,
                                             structure=None,
                                             schema=None,
                                             parameters=None,
                                             annotations=None,
                                             folder=None,
                                             type_properties_table_name=None,
                                             type_properties_table=None,
                                             type_properties_schema=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    if isinstance(type_properties_table, str):
        type_properties_table = json.loads(type_properties_table)
    if isinstance(type_properties_schema, str):
        type_properties_schema = json.loads(type_properties_schema)
    instance.type = 'VerticaTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    instance.table = type_properties_table
    instance.schema_type_properties_schema = type_properties_schema
    return instance


def datafactory_dataset_web_table_create(cmd, client,
                                         resource_group_name,
                                         factory_name,
                                         dataset_name,
                                         linked_service_name,
                                         type_properties_index,
                                         if_match=None,
                                         description=None,
                                         structure=None,
                                         schema=None,
                                         parameters=None,
                                         annotations=None,
                                         folder=None,
                                         type_properties_path=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_index, str):
        type_properties_index = json.loads(type_properties_index)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    properties = {}
    properties['type'] = 'WebTable'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['index'] = type_properties_index
    properties['path'] = type_properties_path
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_web_table_update(instance, cmd,
                                         resource_group_name,
                                         factory_name,
                                         dataset_name,
                                         linked_service_name,
                                         type_properties_index,
                                         if_match=None,
                                         description=None,
                                         structure=None,
                                         schema=None,
                                         parameters=None,
                                         annotations=None,
                                         folder=None,
                                         type_properties_path=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_index, str):
        type_properties_index = json.loads(type_properties_index)
    if isinstance(type_properties_path, str):
        type_properties_path = json.loads(type_properties_path)
    instance.type = 'WebTable'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.index = type_properties_index
    instance.path = type_properties_path
    return instance


def datafactory_dataset_xero_object_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'XeroObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_xero_object_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'XeroObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_zoho_object_create(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    properties = {}
    properties['type'] = 'ZohoObject'
    properties['description'] = description
    properties['structure'] = structure
    properties['schema'] = schema
    properties['linked_service_name'] = linked_service_name
    properties['parameters'] = parameters
    properties['annotations'] = annotations
    properties['folder'] = folder
    properties['table_name'] = type_properties_table_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   dataset_name=dataset_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_dataset_zoho_object_update(instance, cmd,
                                           resource_group_name,
                                           factory_name,
                                           dataset_name,
                                           linked_service_name,
                                           if_match=None,
                                           description=None,
                                           structure=None,
                                           schema=None,
                                           parameters=None,
                                           annotations=None,
                                           folder=None,
                                           type_properties_table_name=None):
    if isinstance(structure, str):
        structure = json.loads(structure)
    if isinstance(schema, str):
        schema = json.loads(schema)
    if isinstance(linked_service_name, str):
        linked_service_name = json.loads(linked_service_name)
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    if isinstance(annotations, str):
        annotations = json.loads(annotations)
    if isinstance(type_properties_table_name, str):
        type_properties_table_name = json.loads(type_properties_table_name)
    instance.type = 'ZohoObject'
    instance.description = description
    instance.structure = structure
    instance.schema = schema
    instance.linked_service_name = linked_service_name
    instance.parameters = parameters
    instance.annotations = annotations
    instance.folder = folder
    instance.table_name = type_properties_table_name
    return instance


def datafactory_dataset_delete(cmd, client,
                               resource_group_name,
                               factory_name,
                               dataset_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         dataset_name=dataset_name)


def datafactory_pipeline_list(cmd, client,
                              resource_group_name,
                              factory_name):
    return client.list_by_factory(resource_group_name=resource_group_name,
                                  factory_name=factory_name)


def datafactory_pipeline_show(cmd, client,
                              resource_group_name,
                              factory_name,
                              pipeline_name,
                              if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      pipeline_name=pipeline_name,
                      if_none_match=if_none_match)


def datafactory_pipeline_create(cmd, client,
                                resource_group_name,
                                factory_name,
                                pipeline_name,
                                pipeline,
                                if_match=None):
    if isinstance(pipeline, str):
        pipeline = json.loads(pipeline)
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   pipeline_name=pipeline_name,
                                   if_match=if_match,
                                   pipeline=pipeline)


def datafactory_pipeline_update(instance, cmd,
                                resource_group_name,
                                factory_name,
                                pipeline_name,
                                pipeline,
                                if_match=None):
    if isinstance(pipeline, str):
        pipeline = json.loads(pipeline)
    return instance


def datafactory_pipeline_delete(cmd, client,
                                resource_group_name,
                                factory_name,
                                pipeline_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         pipeline_name=pipeline_name)


def datafactory_pipeline_create_run(cmd, client,
                                    resource_group_name,
                                    factory_name,
                                    pipeline_name,
                                    reference_pipeline_run_id=None,
                                    is_recovery=None,
                                    start_activity_name=None,
                                    start_from_failure=None,
                                    parameters=None):
    if isinstance(parameters, str):
        parameters = json.loads(parameters)
    return client.create_run(resource_group_name=resource_group_name,
                             factory_name=factory_name,
                             pipeline_name=pipeline_name,
                             reference_pipeline_run_id=reference_pipeline_run_id,
                             is_recovery=is_recovery,
                             start_activity_name=start_activity_name,
                             start_from_failure=start_from_failure,
                             parameters=parameters)


def datafactory_pipeline_run_show(cmd, client,
                                  resource_group_name,
                                  factory_name,
                                  run_id):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      run_id=run_id)


def datafactory_pipeline_run_cancel(cmd, client,
                                    resource_group_name,
                                    factory_name,
                                    run_id,
                                    is_recursive=None):
    return client.cancel(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         run_id=run_id,
                         is_recursive=is_recursive)


def datafactory_pipeline_run_query_by_factory(cmd, client,
                                              resource_group_name,
                                              factory_name,
                                              last_updated_after,
                                              last_updated_before,
                                              continuation_token=None,
                                              filters=None,
                                              order_by=None):
    return client.query_by_factory(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   continuation_token=continuation_token,
                                   last_updated_after=last_updated_after,
                                   last_updated_before=last_updated_before,
                                   filters=filters,
                                   order_by=order_by)


def datafactory_activity_run_query_by_pipeline_run(cmd, client,
                                                   resource_group_name,
                                                   factory_name,
                                                   run_id,
                                                   last_updated_after,
                                                   last_updated_before,
                                                   continuation_token=None,
                                                   filters=None,
                                                   order_by=None):
    return client.query_by_pipeline_run(resource_group_name=resource_group_name,
                                        factory_name=factory_name,
                                        run_id=run_id,
                                        continuation_token=continuation_token,
                                        last_updated_after=last_updated_after,
                                        last_updated_before=last_updated_before,
                                        filters=filters,
                                        order_by=order_by)


def datafactory_trigger_list(cmd, client,
                             resource_group_name,
                             factory_name):
    return client.list_by_factory(resource_group_name=resource_group_name,
                                  factory_name=factory_name)


def datafactory_trigger_show(cmd, client,
                             resource_group_name,
                             factory_name,
                             trigger_name,
                             if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      trigger_name=trigger_name,
                      if_none_match=if_none_match)


def datafactory_trigger_create(cmd, client,
                               resource_group_name,
                               factory_name,
                               trigger_name,
                               properties,
                               if_match=None):
    if isinstance(properties, str):
        properties = json.loads(properties)
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   trigger_name=trigger_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_trigger_update(instance, cmd,
                               resource_group_name,
                               factory_name,
                               trigger_name,
                               properties,
                               if_match=None):
    if isinstance(properties, str):
        properties = json.loads(properties)
    return instance


def datafactory_trigger_delete(cmd, client,
                               resource_group_name,
                               factory_name,
                               trigger_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         trigger_name=trigger_name)


def datafactory_trigger_get_event_subscription_status(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      trigger_name):
    return client.get_event_subscription_status(resource_group_name=resource_group_name,
                                                factory_name=factory_name,
                                                trigger_name=trigger_name)


def datafactory_trigger_query_by_factory(cmd, client,
                                         resource_group_name,
                                         factory_name,
                                         continuation_token=None,
                                         parent_trigger_name=None):
    return client.query_by_factory(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   continuation_token=continuation_token,
                                   parent_trigger_name=parent_trigger_name)


def datafactory_trigger_start(cmd, client,
                              resource_group_name,
                              factory_name,
                              trigger_name):
    return client.begin_start(resource_group_name=resource_group_name,
                              factory_name=factory_name,
                              trigger_name=trigger_name)


def datafactory_trigger_stop(cmd, client,
                             resource_group_name,
                             factory_name,
                             trigger_name):
    return client.begin_stop(resource_group_name=resource_group_name,
                             factory_name=factory_name,
                             trigger_name=trigger_name)


def datafactory_trigger_subscribe_to_event(cmd, client,
                                           resource_group_name,
                                           factory_name,
                                           trigger_name):
    return client.begin_subscribe_to_event(resource_group_name=resource_group_name,
                                           factory_name=factory_name,
                                           trigger_name=trigger_name)


def datafactory_trigger_unsubscribe_from_event(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               trigger_name):
    return client.begin_unsubscribe_from_event(resource_group_name=resource_group_name,
                                               factory_name=factory_name,
                                               trigger_name=trigger_name)


def datafactory_trigger_run_query_by_factory(cmd, client,
                                             resource_group_name,
                                             factory_name,
                                             last_updated_after,
                                             last_updated_before,
                                             continuation_token=None,
                                             filters=None,
                                             order_by=None):
    return client.query_by_factory(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   continuation_token=continuation_token,
                                   last_updated_after=last_updated_after,
                                   last_updated_before=last_updated_before,
                                   filters=filters,
                                   order_by=order_by)


def datafactory_trigger_run_rerun(cmd, client,
                                  resource_group_name,
                                  factory_name,
                                  trigger_name,
                                  run_id):
    return client.rerun(resource_group_name=resource_group_name,
                        factory_name=factory_name,
                        trigger_name=trigger_name,
                        run_id=run_id)


def datafactory_data_flow_list(cmd, client,
                               resource_group_name,
                               factory_name):
    return client.list_by_factory(resource_group_name=resource_group_name,
                                  factory_name=factory_name)


def datafactory_data_flow_show(cmd, client,
                               resource_group_name,
                               factory_name,
                               data_flow_name,
                               if_none_match=None):
    return client.get(resource_group_name=resource_group_name,
                      factory_name=factory_name,
                      data_flow_name=data_flow_name,
                      if_none_match=if_none_match)


def datafactory_data_flow_create(cmd, client,
                                 resource_group_name,
                                 factory_name,
                                 data_flow_name,
                                 properties,
                                 if_match=None):
    if isinstance(properties, str):
        properties = json.loads(properties)
    return client.create_or_update(resource_group_name=resource_group_name,
                                   factory_name=factory_name,
                                   data_flow_name=data_flow_name,
                                   if_match=if_match,
                                   properties=properties)


def datafactory_data_flow_update(instance, cmd,
                                 resource_group_name,
                                 factory_name,
                                 data_flow_name,
                                 properties,
                                 if_match=None):
    if isinstance(properties, str):
        properties = json.loads(properties)
    return instance


def datafactory_data_flow_delete(cmd, client,
                                 resource_group_name,
                                 factory_name,
                                 data_flow_name):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         data_flow_name=data_flow_name)


def datafactory_data_flow_debug_session_create(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               compute_type=None,
                                               core_count=None,
                                               time_to_live=None,
                                               integration_runtime=None):
    if isinstance(integration_runtime, str):
        integration_runtime = json.loads(integration_runtime)
    return client.begin_create(resource_group_name=resource_group_name,
                               factory_name=factory_name,
                               compute_type=compute_type,
                               core_count=core_count,
                               time_to_live=time_to_live,
                               integration_runtime=integration_runtime)


def datafactory_data_flow_debug_session_delete(cmd, client,
                                               resource_group_name,
                                               factory_name,
                                               session_id=None):
    return client.delete(resource_group_name=resource_group_name,
                         factory_name=factory_name,
                         session_id=session_id)


def datafactory_data_flow_debug_session_add_data_flow(cmd, client,
                                                      resource_group_name,
                                                      factory_name,
                                                      session_id=None,
                                                      data_flow=None,
                                                      datasets=None,
                                                      linked_services=None,
                                                      staging=None,
                                                      debug_settings=None):
    if isinstance(data_flow, str):
        data_flow = json.loads(data_flow)
    if isinstance(datasets, str):
        datasets = json.loads(datasets)
    if isinstance(linked_services, str):
        linked_services = json.loads(linked_services)
    if isinstance(staging, str):
        staging = json.loads(staging)
    if isinstance(debug_settings, str):
        debug_settings = json.loads(debug_settings)
    return client.add_data_flow(resource_group_name=resource_group_name,
                                factory_name=factory_name,
                                session_id=session_id,
                                data_flow=data_flow,
                                datasets=datasets,
                                linked_services=linked_services,
                                staging=staging,
                                debug_settings=debug_settings)


def datafactory_data_flow_debug_session_execute_command(cmd, client,
                                                        resource_group_name,
                                                        factory_name,
                                                        session_id=None,
                                                        command=None,
                                                        command_payload=None):
    return client.begin_execute_command(resource_group_name=resource_group_name,
                                        factory_name=factory_name,
                                        session_id=session_id,
                                        command=command,
                                        command_payload=command_payload)


def datafactory_data_flow_debug_session_query_by_factory(cmd, client,
                                                         resource_group_name,
                                                         factory_name):
    return client.query_by_factory(resource_group_name=resource_group_name,
                                   factory_name=factory_name)
